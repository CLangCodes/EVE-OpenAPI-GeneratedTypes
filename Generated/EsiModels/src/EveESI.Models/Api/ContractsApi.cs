/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EveESI.Models.Client;
using EveESI.Models.Client.Auth;
using EveESI.Models.Model;

namespace EveESI.Models.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsGetInner&gt;</returns>
        List<CharactersCharacterIdContractsGetInner> GetCharactersCharacterIdContracts(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsGetInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdContractsGetInner>> GetCharactersCharacterIdContractsWithHttpInfo(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        List<CharactersCharacterIdContractsContractIdBidsGetInner> GetCharactersCharacterIdContractsContractIdBids(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCharactersCharacterIdContractsContractIdBidsWithHttpInfo(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        List<CharactersCharacterIdContractsContractIdItemsGetInner> GetCharactersCharacterIdContractsContractIdItems(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCharactersCharacterIdContractsContractIdItemsWithHttpInfo(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContractsPublicBidsContractIdGetInner&gt;</returns>
        List<ContractsPublicBidsContractIdGetInner> GetContractsPublicBidsContractId(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContractsPublicBidsContractIdGetInner&gt;</returns>
        ApiResponse<List<ContractsPublicBidsContractIdGetInner>> GetContractsPublicBidsContractIdWithHttpInfo(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContractsPublicItemsContractIdGetInner&gt;</returns>
        List<ContractsPublicItemsContractIdGetInner> GetContractsPublicItemsContractId(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContractsPublicItemsContractIdGetInner&gt;</returns>
        ApiResponse<List<ContractsPublicItemsContractIdGetInner>> GetContractsPublicItemsContractIdWithHttpInfo(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContractsPublicRegionIdGetInner&gt;</returns>
        List<ContractsPublicRegionIdGetInner> GetContractsPublicRegionId(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContractsPublicRegionIdGetInner&gt;</returns>
        ApiResponse<List<ContractsPublicRegionIdGetInner>> GetContractsPublicRegionIdWithHttpInfo(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CorporationsCorporationIdContractsGetInner&gt;</returns>
        List<CorporationsCorporationIdContractsGetInner> GetCorporationsCorporationIdContracts(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CorporationsCorporationIdContractsGetInner&gt;</returns>
        ApiResponse<List<CorporationsCorporationIdContractsGetInner>> GetCorporationsCorporationIdContractsWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        List<CharactersCharacterIdContractsContractIdBidsGetInner> GetCorporationsCorporationIdContractsContractIdBids(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfo(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        List<CharactersCharacterIdContractsContractIdItemsGetInner> GetCorporationsCorporationIdContractsContractIdItems(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfo(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdContractsGetInner>> GetCharactersCharacterIdContractsAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdContractsGetInner>>> GetCharactersCharacterIdContractsWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCharactersCharacterIdContractsContractIdBidsAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>>> GetCharactersCharacterIdContractsContractIdBidsWithHttpInfoAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCharactersCharacterIdContractsContractIdItemsAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>>> GetCharactersCharacterIdContractsContractIdItemsWithHttpInfoAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContractsPublicBidsContractIdGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<ContractsPublicBidsContractIdGetInner>> GetContractsPublicBidsContractIdAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get public contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a public auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContractsPublicBidsContractIdGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractsPublicBidsContractIdGetInner>>> GetContractsPublicBidsContractIdWithHttpInfoAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContractsPublicItemsContractIdGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<ContractsPublicItemsContractIdGetInner>> GetContractsPublicItemsContractIdAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get public contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a public contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContractsPublicItemsContractIdGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractsPublicItemsContractIdGetInner>>> GetContractsPublicItemsContractIdWithHttpInfoAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContractsPublicRegionIdGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<ContractsPublicRegionIdGetInner>> GetContractsPublicRegionIdAsync(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get public contracts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all public contracts in the given region
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContractsPublicRegionIdGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractsPublicRegionIdGetInner>>> GetContractsPublicRegionIdWithHttpInfoAsync(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CorporationsCorporationIdContractsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CorporationsCorporationIdContractsGetInner>> GetCorporationsCorporationIdContractsAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get corporation contracts
        /// </summary>
        /// <remarks>
        /// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CorporationsCorporationIdContractsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CorporationsCorporationIdContractsGetInner>>> GetCorporationsCorporationIdContractsWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCorporationsCorporationIdContractsContractIdBidsAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get corporation contract bids
        /// </summary>
        /// <remarks>
        /// Lists bids on a particular auction contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>>> GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfoAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCorporationsCorporationIdContractsContractIdItemsAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get corporation contract items
        /// </summary>
        /// <remarks>
        /// Lists items of a particular contract
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>>> GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfoAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractsApi : IContractsApiSync, IContractsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContractsApi : IContractsApi
    {
        private EveESI.Models.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractsApi(string basePath)
        {
            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                new EveESI.Models.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractsApi(EveESI.Models.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContractsApi(EveESI.Models.Client.ISynchronousClient client, EveESI.Models.Client.IAsynchronousClient asyncClient, EveESI.Models.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EveESI.Models.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EveESI.Models.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EveESI.Models.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EveESI.Models.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsGetInner&gt;</returns>
        public List<CharactersCharacterIdContractsGetInner> GetCharactersCharacterIdContracts(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsGetInner>> localVarResponse = GetCharactersCharacterIdContractsWithHttpInfo(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsGetInner>> GetCharactersCharacterIdContractsWithHttpInfo(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCharactersCharacterIdContracts");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCharactersCharacterIdContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CharactersCharacterIdContractsGetInner>>("/characters/{character_id}/contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdContractsGetInner>> GetCharactersCharacterIdContractsAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsGetInner>> localVarResponse = await GetCharactersCharacterIdContractsWithHttpInfoAsync(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contracts Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsGetInner>>> GetCharactersCharacterIdContractsWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCharactersCharacterIdContracts");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCharactersCharacterIdContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CharactersCharacterIdContractsGetInner>>("/characters/{character_id}/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        public List<CharactersCharacterIdContractsContractIdBidsGetInner> GetCharactersCharacterIdContractsContractIdBids(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> localVarResponse = GetCharactersCharacterIdContractsContractIdBidsWithHttpInfo(characterId, contractId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCharactersCharacterIdContractsContractIdBidsWithHttpInfo(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdBids");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCharactersCharacterIdContractsContractIdBids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CharactersCharacterIdContractsContractIdBidsGetInner>>("/characters/{character_id}/contracts/{contract_id}/bids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdContractsContractIdBids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCharactersCharacterIdContractsContractIdBidsAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> localVarResponse = await GetCharactersCharacterIdContractsContractIdBidsWithHttpInfoAsync(characterId, contractId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>>> GetCharactersCharacterIdContractsContractIdBidsWithHttpInfoAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdBids");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCharactersCharacterIdContractsContractIdBids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CharactersCharacterIdContractsContractIdBidsGetInner>>("/characters/{character_id}/contracts/{contract_id}/bids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdContractsContractIdBids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        public List<CharactersCharacterIdContractsContractIdItemsGetInner> GetCharactersCharacterIdContractsContractIdItems(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> localVarResponse = GetCharactersCharacterIdContractsContractIdItemsWithHttpInfo(characterId, contractId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCharactersCharacterIdContractsContractIdItemsWithHttpInfo(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdItems");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCharactersCharacterIdContractsContractIdItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CharactersCharacterIdContractsContractIdItemsGetInner>>("/characters/{character_id}/contracts/{contract_id}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdContractsContractIdItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCharactersCharacterIdContractsContractIdItemsAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> localVarResponse = await GetCharactersCharacterIdContractsContractIdItemsWithHttpInfoAsync(characterId, contractId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>>> GetCharactersCharacterIdContractsContractIdItemsWithHttpInfoAsync(long characterId, long contractId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCharactersCharacterIdContractsContractIdItems");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCharactersCharacterIdContractsContractIdItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CharactersCharacterIdContractsContractIdItemsGetInner>>("/characters/{character_id}/contracts/{contract_id}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdContractsContractIdItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContractsPublicBidsContractIdGetInner&gt;</returns>
        public List<ContractsPublicBidsContractIdGetInner> GetContractsPublicBidsContractId(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<ContractsPublicBidsContractIdGetInner>> localVarResponse = GetContractsPublicBidsContractIdWithHttpInfo(contractId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContractsPublicBidsContractIdGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<ContractsPublicBidsContractIdGetInner>> GetContractsPublicBidsContractIdWithHttpInfo(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetContractsPublicBidsContractId");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetContractsPublicBidsContractId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContractsPublicBidsContractIdGetInner>>("/contracts/public/bids/{contract_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractsPublicBidsContractId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContractsPublicBidsContractIdGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractsPublicBidsContractIdGetInner>> GetContractsPublicBidsContractIdAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<ContractsPublicBidsContractIdGetInner>> localVarResponse = await GetContractsPublicBidsContractIdWithHttpInfoAsync(contractId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contract bids Lists bids on a public auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContractsPublicBidsContractIdGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<ContractsPublicBidsContractIdGetInner>>> GetContractsPublicBidsContractIdWithHttpInfoAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetContractsPublicBidsContractId");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetContractsPublicBidsContractId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContractsPublicBidsContractIdGetInner>>("/contracts/public/bids/{contract_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractsPublicBidsContractId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContractsPublicItemsContractIdGetInner&gt;</returns>
        public List<ContractsPublicItemsContractIdGetInner> GetContractsPublicItemsContractId(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<ContractsPublicItemsContractIdGetInner>> localVarResponse = GetContractsPublicItemsContractIdWithHttpInfo(contractId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContractsPublicItemsContractIdGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<ContractsPublicItemsContractIdGetInner>> GetContractsPublicItemsContractIdWithHttpInfo(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetContractsPublicItemsContractId");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetContractsPublicItemsContractId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContractsPublicItemsContractIdGetInner>>("/contracts/public/items/{contract_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractsPublicItemsContractId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContractsPublicItemsContractIdGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractsPublicItemsContractIdGetInner>> GetContractsPublicItemsContractIdAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<ContractsPublicItemsContractIdGetInner>> localVarResponse = await GetContractsPublicItemsContractIdWithHttpInfoAsync(contractId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contract items Lists items of a public contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContractsPublicItemsContractIdGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<ContractsPublicItemsContractIdGetInner>>> GetContractsPublicItemsContractIdWithHttpInfoAsync(long contractId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetContractsPublicItemsContractId");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetContractsPublicItemsContractId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContractsPublicItemsContractIdGetInner>>("/contracts/public/items/{contract_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractsPublicItemsContractId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContractsPublicRegionIdGetInner&gt;</returns>
        public List<ContractsPublicRegionIdGetInner> GetContractsPublicRegionId(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<ContractsPublicRegionIdGetInner>> localVarResponse = GetContractsPublicRegionIdWithHttpInfo(regionId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContractsPublicRegionIdGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<ContractsPublicRegionIdGetInner>> GetContractsPublicRegionIdWithHttpInfo(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetContractsPublicRegionId");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("region_id", EveESI.Models.Client.ClientUtils.ParameterToString(regionId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetContractsPublicRegionId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContractsPublicRegionIdGetInner>>("/contracts/public/{region_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractsPublicRegionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContractsPublicRegionIdGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContractsPublicRegionIdGetInner>> GetContractsPublicRegionIdAsync(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<ContractsPublicRegionIdGetInner>> localVarResponse = await GetContractsPublicRegionIdWithHttpInfoAsync(regionId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get public contracts Returns a paginated list of all public contracts in the given region
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"></param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContractsPublicRegionIdGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<ContractsPublicRegionIdGetInner>>> GetContractsPublicRegionIdWithHttpInfoAsync(long regionId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetContractsPublicRegionId");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("region_id", EveESI.Models.Client.ClientUtils.ParameterToString(regionId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetContractsPublicRegionId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContractsPublicRegionIdGetInner>>("/contracts/public/{region_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractsPublicRegionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CorporationsCorporationIdContractsGetInner&gt;</returns>
        public List<CorporationsCorporationIdContractsGetInner> GetCorporationsCorporationIdContracts(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdContractsGetInner>> localVarResponse = GetCorporationsCorporationIdContractsWithHttpInfo(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CorporationsCorporationIdContractsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdContractsGetInner>> GetCorporationsCorporationIdContractsWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCorporationsCorporationIdContracts");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCorporationsCorporationIdContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CorporationsCorporationIdContractsGetInner>>("/corporations/{corporation_id}/contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CorporationsCorporationIdContractsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CorporationsCorporationIdContractsGetInner>> GetCorporationsCorporationIdContractsAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdContractsGetInner>> localVarResponse = await GetCorporationsCorporationIdContractsWithHttpInfoAsync(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contracts Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CorporationsCorporationIdContractsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdContractsGetInner>>> GetCorporationsCorporationIdContractsWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCorporationsCorporationIdContracts");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCorporationsCorporationIdContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CorporationsCorporationIdContractsGetInner>>("/corporations/{corporation_id}/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        public List<CharactersCharacterIdContractsContractIdBidsGetInner> GetCorporationsCorporationIdContractsContractIdBids(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> localVarResponse = GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfo(contractId, corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfo(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdBids");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCorporationsCorporationIdContractsContractIdBids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CharactersCharacterIdContractsContractIdBidsGetInner>>("/corporations/{corporation_id}/contracts/{contract_id}/bids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdContractsContractIdBids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdBidsGetInner>> GetCorporationsCorporationIdContractsContractIdBidsAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>> localVarResponse = await GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfoAsync(contractId, corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contract bids Lists bids on a particular auction contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdBidsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdBidsGetInner>>> GetCorporationsCorporationIdContractsContractIdBidsWithHttpInfoAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdBids");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCorporationsCorporationIdContractsContractIdBids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CharactersCharacterIdContractsContractIdBidsGetInner>>("/corporations/{corporation_id}/contracts/{contract_id}/bids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdContractsContractIdBids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        public List<CharactersCharacterIdContractsContractIdItemsGetInner> GetCorporationsCorporationIdContractsContractIdItems(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> localVarResponse = GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfo(contractId, corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfo(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdItems");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCorporationsCorporationIdContractsContractIdItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CharactersCharacterIdContractsContractIdItemsGetInner>>("/corporations/{corporation_id}/contracts/{contract_id}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdContractsContractIdItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdContractsContractIdItemsGetInner>> GetCorporationsCorporationIdContractsContractIdItemsAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>> localVarResponse = await GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfoAsync(contractId, corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation contract items Lists items of a particular contract
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdContractsContractIdItemsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdContractsContractIdItemsGetInner>>> GetCorporationsCorporationIdContractsContractIdItemsWithHttpInfoAsync(long contractId, long corporationId, DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling ContractsApi->GetCorporationsCorporationIdContractsContractIdItems");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contract_id", EveESI.Models.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "ContractsApi.GetCorporationsCorporationIdContractsContractIdItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CharactersCharacterIdContractsContractIdItemsGetInner>>("/corporations/{corporation_id}/contracts/{contract_id}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdContractsContractIdItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
