/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EveESI.Models.Client;
using EveESI.Models.Client.Auth;
using EveESI.Models.Model;

namespace EveESI.Models.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncursionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List incursions
        /// </summary>
        /// <remarks>
        /// Return a list of current incursions
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;IncursionsGetInner&gt;</returns>
        List<IncursionsGetInner> GetIncursions(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// List incursions
        /// </summary>
        /// <remarks>
        /// Return a list of current incursions
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;IncursionsGetInner&gt;</returns>
        ApiResponse<List<IncursionsGetInner>> GetIncursionsWithHttpInfo(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncursionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List incursions
        /// </summary>
        /// <remarks>
        /// Return a list of current incursions
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IncursionsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<IncursionsGetInner>> GetIncursionsAsync(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List incursions
        /// </summary>
        /// <remarks>
        /// Return a list of current incursions
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IncursionsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IncursionsGetInner>>> GetIncursionsWithHttpInfoAsync(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncursionsApi : IIncursionsApiSync, IIncursionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IncursionsApi : IIncursionsApi
    {
        private EveESI.Models.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncursionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncursionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncursionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncursionsApi(string basePath)
        {
            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                new EveESI.Models.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncursionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncursionsApi(EveESI.Models.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncursionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IncursionsApi(EveESI.Models.Client.ISynchronousClient client, EveESI.Models.Client.IAsynchronousClient asyncClient, EveESI.Models.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EveESI.Models.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EveESI.Models.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EveESI.Models.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EveESI.Models.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List incursions Return a list of current incursions
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;IncursionsGetInner&gt;</returns>
        public List<IncursionsGetInner> GetIncursions(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<IncursionsGetInner>> localVarResponse = GetIncursionsWithHttpInfo(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incursions Return a list of current incursions
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;IncursionsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<IncursionsGetInner>> GetIncursionsWithHttpInfo(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling IncursionsApi->GetIncursions");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "IncursionsApi.GetIncursions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IncursionsGetInner>>("/incursions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncursions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List incursions Return a list of current incursions
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IncursionsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<IncursionsGetInner>> GetIncursionsAsync(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<IncursionsGetInner>> localVarResponse = await GetIncursionsWithHttpInfoAsync(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incursions Return a list of current incursions
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IncursionsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<IncursionsGetInner>>> GetIncursionsWithHttpInfoAsync(DateOnly xCompatibilityDate, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling IncursionsApi->GetIncursions");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "IncursionsApi.GetIncursions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IncursionsGetInner>>("/incursions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncursions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
