/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EveESI.Models.Client;
using EveESI.Models.Client.Auth;
using EveESI.Models.Model;

namespace EveESI.Models.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICorporationProjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get your project contribution
        /// </summary>
        /// <remarks>
        /// Show your contribution to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsContribution</returns>
        CorporationsProjectsContribution GetCorporationsProjectsContribution(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get your project contribution
        /// </summary>
        /// <remarks>
        /// Show your contribution to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsContribution</returns>
        ApiResponse<CorporationsProjectsContribution> GetCorporationsProjectsContributionWithHttpInfo(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// List project contributors
        /// </summary>
        /// <remarks>
        /// Listing of all contributors to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsContributors</returns>
        CorporationsProjectsContributors GetCorporationsProjectsContributors(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// List project contributors
        /// </summary>
        /// <remarks>
        /// Listing of all contributors to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsContributors</returns>
        ApiResponse<CorporationsProjectsContributors> GetCorporationsProjectsContributorsWithHttpInfo(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get project details
        /// </summary>
        /// <remarks>
        /// Get the details of a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsDetail</returns>
        CorporationsProjectsDetail GetCorporationsProjectsDetail(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get project details
        /// </summary>
        /// <remarks>
        /// Get the details of a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsDetail</returns>
        ApiResponse<CorporationsProjectsDetail> GetCorporationsProjectsDetailWithHttpInfo(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// List corporation projects
        /// </summary>
        /// <remarks>
        /// Listing of all (active) corporation projects.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsListing</returns>
        CorporationsProjectsListing GetCorporationsProjectsListing(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// List corporation projects
        /// </summary>
        /// <remarks>
        /// Listing of all (active) corporation projects.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsListing</returns>
        ApiResponse<CorporationsProjectsListing> GetCorporationsProjectsListingWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICorporationProjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get your project contribution
        /// </summary>
        /// <remarks>
        /// Show your contribution to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsContribution</returns>
        System.Threading.Tasks.Task<CorporationsProjectsContribution> GetCorporationsProjectsContributionAsync(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your project contribution
        /// </summary>
        /// <remarks>
        /// Show your contribution to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsContribution)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorporationsProjectsContribution>> GetCorporationsProjectsContributionWithHttpInfoAsync(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List project contributors
        /// </summary>
        /// <remarks>
        /// Listing of all contributors to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsContributors</returns>
        System.Threading.Tasks.Task<CorporationsProjectsContributors> GetCorporationsProjectsContributorsAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List project contributors
        /// </summary>
        /// <remarks>
        /// Listing of all contributors to a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsContributors)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorporationsProjectsContributors>> GetCorporationsProjectsContributorsWithHttpInfoAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get project details
        /// </summary>
        /// <remarks>
        /// Get the details of a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsDetail</returns>
        System.Threading.Tasks.Task<CorporationsProjectsDetail> GetCorporationsProjectsDetailAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project details
        /// </summary>
        /// <remarks>
        /// Get the details of a corporation project.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorporationsProjectsDetail>> GetCorporationsProjectsDetailWithHttpInfoAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List corporation projects
        /// </summary>
        /// <remarks>
        /// Listing of all (active) corporation projects.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsListing</returns>
        System.Threading.Tasks.Task<CorporationsProjectsListing> GetCorporationsProjectsListingAsync(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List corporation projects
        /// </summary>
        /// <remarks>
        /// Listing of all (active) corporation projects.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorporationsProjectsListing>> GetCorporationsProjectsListingWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICorporationProjectsApi : ICorporationProjectsApiSync, ICorporationProjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CorporationProjectsApi : ICorporationProjectsApi
    {
        private EveESI.Models.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CorporationProjectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CorporationProjectsApi(string basePath)
        {
            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                new EveESI.Models.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CorporationProjectsApi(EveESI.Models.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationProjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CorporationProjectsApi(EveESI.Models.Client.ISynchronousClient client, EveESI.Models.Client.IAsynchronousClient asyncClient, EveESI.Models.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EveESI.Models.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EveESI.Models.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EveESI.Models.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EveESI.Models.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get your project contribution Show your contribution to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsContribution</returns>
        public CorporationsProjectsContribution GetCorporationsProjectsContribution(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsContribution> localVarResponse = GetCorporationsProjectsContributionWithHttpInfo(corporationId, projectId, characterId, xCompatibilityDate, ifModifiedSince, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your project contribution Show your contribution to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsContribution</returns>
        public EveESI.Models.Client.ApiResponse<CorporationsProjectsContribution> GetCorporationsProjectsContributionWithHttpInfo(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsContribution");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", EveESI.Models.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", EveESI.Models.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsContribution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CorporationsProjectsContribution>("/corporations/{corporation_id}/projects/{project_id}/contribution/{character_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsContribution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your project contribution Show your contribution to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsContribution</returns>
        public async System.Threading.Tasks.Task<CorporationsProjectsContribution> GetCorporationsProjectsContributionAsync(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsContribution> localVarResponse = await GetCorporationsProjectsContributionWithHttpInfoAsync(corporationId, projectId, characterId, xCompatibilityDate, ifModifiedSince, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your project contribution Show your contribution to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsContribution)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<CorporationsProjectsContribution>> GetCorporationsProjectsContributionWithHttpInfoAsync(long corporationId, Guid projectId, long characterId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsContribution");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", EveESI.Models.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", EveESI.Models.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsContribution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CorporationsProjectsContribution>("/corporations/{corporation_id}/projects/{project_id}/contribution/{character_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsContribution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List project contributors Listing of all contributors to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsContributors</returns>
        public CorporationsProjectsContributors GetCorporationsProjectsContributors(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsContributors> localVarResponse = GetCorporationsProjectsContributorsWithHttpInfo(corporationId, projectId, xCompatibilityDate, after, before, limit, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List project contributors Listing of all contributors to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsContributors</returns>
        public EveESI.Models.Client.ApiResponse<CorporationsProjectsContributors> GetCorporationsProjectsContributorsWithHttpInfo(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsContributors");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", EveESI.Models.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsContributors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CorporationsProjectsContributors>("/corporations/{corporation_id}/projects/{project_id}/contributors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsContributors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List project contributors Listing of all contributors to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsContributors</returns>
        public async System.Threading.Tasks.Task<CorporationsProjectsContributors> GetCorporationsProjectsContributorsAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsContributors> localVarResponse = await GetCorporationsProjectsContributorsWithHttpInfoAsync(corporationId, projectId, xCompatibilityDate, after, before, limit, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List project contributors Listing of all contributors to a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsContributors)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<CorporationsProjectsContributors>> GetCorporationsProjectsContributorsWithHttpInfoAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsContributors");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", EveESI.Models.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsContributors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CorporationsProjectsContributors>("/corporations/{corporation_id}/projects/{project_id}/contributors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsContributors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project details Get the details of a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsDetail</returns>
        public CorporationsProjectsDetail GetCorporationsProjectsDetail(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsDetail> localVarResponse = GetCorporationsProjectsDetailWithHttpInfo(corporationId, projectId, xCompatibilityDate, ifModifiedSince, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project details Get the details of a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsDetail</returns>
        public EveESI.Models.Client.ApiResponse<CorporationsProjectsDetail> GetCorporationsProjectsDetailWithHttpInfo(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsDetail");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", EveESI.Models.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", EveESI.Models.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsDetail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CorporationsProjectsDetail>("/corporations/{corporation_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get project details Get the details of a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsDetail</returns>
        public async System.Threading.Tasks.Task<CorporationsProjectsDetail> GetCorporationsProjectsDetailAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsDetail> localVarResponse = await GetCorporationsProjectsDetailWithHttpInfoAsync(corporationId, projectId, xCompatibilityDate, ifModifiedSince, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get project details Get the details of a corporation project.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="projectId">The ID of the project</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="ifModifiedSince">The date the resource was last modified. A 304 will be returned if the resource has not been modified since this date. (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsDetail)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<CorporationsProjectsDetail>> GetCorporationsProjectsDetailWithHttpInfoAsync(long corporationId, Guid projectId, DateOnly xCompatibilityDate, string? ifModifiedSince = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsDetail");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", EveESI.Models.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", EveESI.Models.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsDetail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CorporationsProjectsDetail>("/corporations/{corporation_id}/projects/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List corporation projects Listing of all (active) corporation projects.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorporationsProjectsListing</returns>
        public CorporationsProjectsListing GetCorporationsProjectsListing(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsListing> localVarResponse = GetCorporationsProjectsListingWithHttpInfo(corporationId, xCompatibilityDate, after, before, limit, state, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List corporation projects Listing of all (active) corporation projects.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorporationsProjectsListing</returns>
        public EveESI.Models.Client.ApiResponse<CorporationsProjectsListing> GetCorporationsProjectsListingWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsListing");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsListing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CorporationsProjectsListing>("/corporations/{corporation_id}/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsListing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List corporation projects Listing of all (active) corporation projects.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorporationsProjectsListing</returns>
        public async System.Threading.Tasks.Task<CorporationsProjectsListing> GetCorporationsProjectsListingAsync(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<CorporationsProjectsListing> localVarResponse = await GetCorporationsProjectsListingWithHttpInfoAsync(corporationId, xCompatibilityDate, after, before, limit, state, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List corporation projects Listing of all (active) corporation projects.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="after">Return records from after this cursor (mutual exclusive with &#39;before&#39;). &#39;0&#39; to start from the beginning. (optional)</param>
        /// <param name="before">Return records from before this cursor (mutual exclusive with &#39;after&#39;). &#39;0&#39; to start from the end. (optional)</param>
        /// <param name="limit">The amount of records to retrieve per request. (optional, default to 10)</param>
        /// <param name="state">Filter by state (optional, default to Active)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorporationsProjectsListing)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<CorporationsProjectsListing>> GetCorporationsProjectsListingWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, string? after = default(string?), string? before = default(string?), long? limit = default(long?), string? state = default(string?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling CorporationProjectsApi->GetCorporationsProjectsListing");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "CorporationProjectsApi.GetCorporationsProjectsListing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CorporationsProjectsListing>("/corporations/{corporation_id}/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsProjectsListing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
