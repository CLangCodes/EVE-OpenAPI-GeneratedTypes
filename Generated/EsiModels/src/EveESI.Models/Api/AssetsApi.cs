/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EveESI.Models.Client;
using EveESI.Models.Client.Auth;
using EveESI.Models.Model;

namespace EveESI.Models.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get character assets
        /// </summary>
        /// <remarks>
        /// Return a list of the characters assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsGetInner&gt;</returns>
        List<CharactersCharacterIdAssetsGetInner> GetCharactersCharacterIdAssets(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get character assets
        /// </summary>
        /// <remarks>
        /// Return a list of the characters assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsGetInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdAssetsGetInner>> GetCharactersCharacterIdAssetsWithHttpInfo(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get corporation assets
        /// </summary>
        /// <remarks>
        /// Return a list of the corporation assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CorporationsCorporationIdAssetsGetInner&gt;</returns>
        List<CorporationsCorporationIdAssetsGetInner> GetCorporationsCorporationIdAssets(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get corporation assets
        /// </summary>
        /// <remarks>
        /// Return a list of the corporation assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CorporationsCorporationIdAssetsGetInner&gt;</returns>
        ApiResponse<List<CorporationsCorporationIdAssetsGetInner>> GetCorporationsCorporationIdAssetsWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get character asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        List<CharactersCharacterIdAssetsLocationsPostInner> PostCharactersCharacterIdAssetsLocations(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get character asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCharactersCharacterIdAssetsLocationsWithHttpInfo(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get character asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        List<CharactersCharacterIdAssetsNamesPostInner> PostCharactersCharacterIdAssetsNames(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get character asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> PostCharactersCharacterIdAssetsNamesWithHttpInfo(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get corporation asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        List<CharactersCharacterIdAssetsLocationsPostInner> PostCorporationsCorporationIdAssetsLocations(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get corporation asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCorporationsCorporationIdAssetsLocationsWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get corporation asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        List<CharactersCharacterIdAssetsNamesPostInner> PostCorporationsCorporationIdAssetsNames(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get corporation asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> PostCorporationsCorporationIdAssetsNamesWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get character assets
        /// </summary>
        /// <remarks>
        /// Return a list of the characters assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsGetInner>> GetCharactersCharacterIdAssetsAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get character assets
        /// </summary>
        /// <remarks>
        /// Return a list of the characters assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdAssetsGetInner>>> GetCharactersCharacterIdAssetsWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get corporation assets
        /// </summary>
        /// <remarks>
        /// Return a list of the corporation assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CorporationsCorporationIdAssetsGetInner&gt;</returns>
        System.Threading.Tasks.Task<List<CorporationsCorporationIdAssetsGetInner>> GetCorporationsCorporationIdAssetsAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get corporation assets
        /// </summary>
        /// <remarks>
        /// Return a list of the corporation assets
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CorporationsCorporationIdAssetsGetInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CorporationsCorporationIdAssetsGetInner>>> GetCorporationsCorporationIdAssetsWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get character asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCharactersCharacterIdAssetsLocationsAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get character asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>>> PostCharactersCharacterIdAssetsLocationsWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get character asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsNamesPostInner>> PostCharactersCharacterIdAssetsNamesAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get character asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>>> PostCharactersCharacterIdAssetsNamesWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get corporation asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCorporationsCorporationIdAssetsLocationsAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get corporation asset locations
        /// </summary>
        /// <remarks>
        /// Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>>> PostCorporationsCorporationIdAssetsLocationsWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get corporation asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsNamesPostInner>> PostCorporationsCorporationIdAssetsNamesAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get corporation asset names
        /// </summary>
        /// <remarks>
        /// Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </remarks>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>>> PostCorporationsCorporationIdAssetsNamesWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private EveESI.Models.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                new EveESI.Models.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(EveESI.Models.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EveESI.Models.Client.Configuration.MergeConfigurations(
                EveESI.Models.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EveESI.Models.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetsApi(EveESI.Models.Client.ISynchronousClient client, EveESI.Models.Client.IAsynchronousClient asyncClient, EveESI.Models.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EveESI.Models.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EveESI.Models.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EveESI.Models.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EveESI.Models.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EveESI.Models.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get character assets Return a list of the characters assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsGetInner&gt;</returns>
        public List<CharactersCharacterIdAssetsGetInner> GetCharactersCharacterIdAssets(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsGetInner>> localVarResponse = GetCharactersCharacterIdAssetsWithHttpInfo(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get character assets Return a list of the characters assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsGetInner>> GetCharactersCharacterIdAssetsWithHttpInfo(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->GetCharactersCharacterIdAssets");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.GetCharactersCharacterIdAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CharactersCharacterIdAssetsGetInner>>("/characters/{character_id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get character assets Return a list of the characters assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsGetInner>> GetCharactersCharacterIdAssetsAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsGetInner>> localVarResponse = await GetCharactersCharacterIdAssetsWithHttpInfoAsync(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get character assets Return a list of the characters assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsGetInner>>> GetCharactersCharacterIdAssetsWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->GetCharactersCharacterIdAssets");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.GetCharactersCharacterIdAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CharactersCharacterIdAssetsGetInner>>("/characters/{character_id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharactersCharacterIdAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation assets Return a list of the corporation assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CorporationsCorporationIdAssetsGetInner&gt;</returns>
        public List<CorporationsCorporationIdAssetsGetInner> GetCorporationsCorporationIdAssets(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdAssetsGetInner>> localVarResponse = GetCorporationsCorporationIdAssetsWithHttpInfo(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation assets Return a list of the corporation assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CorporationsCorporationIdAssetsGetInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdAssetsGetInner>> GetCorporationsCorporationIdAssetsWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->GetCorporationsCorporationIdAssets");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.GetCorporationsCorporationIdAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CorporationsCorporationIdAssetsGetInner>>("/corporations/{corporation_id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation assets Return a list of the corporation assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CorporationsCorporationIdAssetsGetInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CorporationsCorporationIdAssetsGetInner>> GetCorporationsCorporationIdAssetsAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdAssetsGetInner>> localVarResponse = await GetCorporationsCorporationIdAssetsWithHttpInfoAsync(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation assets Return a list of the corporation assets
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="page"> (optional)</param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CorporationsCorporationIdAssetsGetInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CorporationsCorporationIdAssetsGetInner>>> GetCorporationsCorporationIdAssetsWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, int? page = default(int?), string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->GetCorporationsCorporationIdAssets");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EveESI.Models.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.GetCorporationsCorporationIdAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CorporationsCorporationIdAssetsGetInner>>("/corporations/{corporation_id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCorporationsCorporationIdAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get character asset locations Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        public List<CharactersCharacterIdAssetsLocationsPostInner> PostCharactersCharacterIdAssetsLocations(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> localVarResponse = PostCharactersCharacterIdAssetsLocationsWithHttpInfo(characterId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get character asset locations Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCharactersCharacterIdAssetsLocationsWithHttpInfo(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCharactersCharacterIdAssetsLocations");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCharactersCharacterIdAssetsLocations");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCharactersCharacterIdAssetsLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CharactersCharacterIdAssetsLocationsPostInner>>("/characters/{character_id}/assets/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCharactersCharacterIdAssetsLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get character asset locations Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCharactersCharacterIdAssetsLocationsAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> localVarResponse = await PostCharactersCharacterIdAssetsLocationsWithHttpInfoAsync(characterId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get character asset locations Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>>> PostCharactersCharacterIdAssetsLocationsWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCharactersCharacterIdAssetsLocations");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCharactersCharacterIdAssetsLocations");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCharactersCharacterIdAssetsLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CharactersCharacterIdAssetsLocationsPostInner>>("/characters/{character_id}/assets/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCharactersCharacterIdAssetsLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get character asset names Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        public List<CharactersCharacterIdAssetsNamesPostInner> PostCharactersCharacterIdAssetsNames(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> localVarResponse = PostCharactersCharacterIdAssetsNamesWithHttpInfo(characterId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get character asset names Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> PostCharactersCharacterIdAssetsNamesWithHttpInfo(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCharactersCharacterIdAssetsNames");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCharactersCharacterIdAssetsNames");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCharactersCharacterIdAssetsNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CharactersCharacterIdAssetsNamesPostInner>>("/characters/{character_id}/assets/names", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCharactersCharacterIdAssetsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get character asset names Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsNamesPostInner>> PostCharactersCharacterIdAssetsNamesAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> localVarResponse = await PostCharactersCharacterIdAssetsNamesWithHttpInfoAsync(characterId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get character asset names Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The ID of the character</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>>> PostCharactersCharacterIdAssetsNamesWithHttpInfoAsync(long characterId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCharactersCharacterIdAssetsNames");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCharactersCharacterIdAssetsNames");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("character_id", EveESI.Models.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCharactersCharacterIdAssetsNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CharactersCharacterIdAssetsNamesPostInner>>("/characters/{character_id}/assets/names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCharactersCharacterIdAssetsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation asset locations Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        public List<CharactersCharacterIdAssetsLocationsPostInner> PostCorporationsCorporationIdAssetsLocations(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> localVarResponse = PostCorporationsCorporationIdAssetsLocationsWithHttpInfo(corporationId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation asset locations Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCorporationsCorporationIdAssetsLocationsWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCorporationsCorporationIdAssetsLocations");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCorporationsCorporationIdAssetsLocations");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCorporationsCorporationIdAssetsLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CharactersCharacterIdAssetsLocationsPostInner>>("/corporations/{corporation_id}/assets/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCorporationsCorporationIdAssetsLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation asset locations Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsLocationsPostInner>> PostCorporationsCorporationIdAssetsLocationsAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>> localVarResponse = await PostCorporationsCorporationIdAssetsLocationsWithHttpInfoAsync(corporationId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation asset locations Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsLocationsPostInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsLocationsPostInner>>> PostCorporationsCorporationIdAssetsLocationsWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCorporationsCorporationIdAssetsLocations");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCorporationsCorporationIdAssetsLocations");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCorporationsCorporationIdAssetsLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CharactersCharacterIdAssetsLocationsPostInner>>("/corporations/{corporation_id}/assets/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCorporationsCorporationIdAssetsLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation asset names Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        public List<CharactersCharacterIdAssetsNamesPostInner> PostCorporationsCorporationIdAssetsNames(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> localVarResponse = PostCorporationsCorporationIdAssetsNamesWithHttpInfo(corporationId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation asset names Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        public EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> PostCorporationsCorporationIdAssetsNamesWithHttpInfo(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCorporationsCorporationIdAssetsNames");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCorporationsCorporationIdAssetsNames");
            }

            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCorporationsCorporationIdAssetsNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CharactersCharacterIdAssetsNamesPostInner>>("/corporations/{corporation_id}/assets/names", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCorporationsCorporationIdAssetsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get corporation asset names Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CharactersCharacterIdAssetsNamesPostInner>> PostCorporationsCorporationIdAssetsNamesAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>> localVarResponse = await PostCorporationsCorporationIdAssetsNamesWithHttpInfoAsync(corporationId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation asset names Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships
        /// </summary>
        /// <exception cref="EveESI.Models.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">The ID of the corporation</param>
        /// <param name="xCompatibilityDate">The compatibility date for the request.</param>
        /// <param name="requestBody"></param>
        /// <param name="acceptLanguage">The language to use for the response. (optional, default to en)</param>
        /// <param name="ifNoneMatch">The ETag of the previous request. A 304 will be returned if this matches the current ETag. (optional)</param>
        /// <param name="xTenant">The tenant ID for the request. (optional, default to &quot;tranquility&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CharactersCharacterIdAssetsNamesPostInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EveESI.Models.Client.ApiResponse<List<CharactersCharacterIdAssetsNamesPostInner>>> PostCorporationsCorporationIdAssetsNamesWithHttpInfoAsync(long corporationId, DateOnly xCompatibilityDate, List<long> requestBody, string? acceptLanguage = default(string?), string? ifNoneMatch = default(string?), string? xTenant = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xCompatibilityDate' is set
            if (xCompatibilityDate == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'xCompatibilityDate' when calling AssetsApi->PostCorporationsCorporationIdAssetsNames");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new EveESI.Models.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AssetsApi->PostCorporationsCorporationIdAssetsNames");
            }


            EveESI.Models.Client.RequestOptions localVarRequestOptions = new EveESI.Models.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EveESI.Models.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EveESI.Models.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("corporation_id", EveESI.Models.Client.ClientUtils.ParameterToString(corporationId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", EveESI.Models.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EveESI.Models.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Compatibility-Date", EveESI.Models.Client.ClientUtils.ParameterToString(xCompatibilityDate)); // header parameter
            if (xTenant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Tenant", EveESI.Models.Client.ClientUtils.ParameterToString(xTenant)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "AssetsApi.PostCorporationsCorporationIdAssetsNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CharactersCharacterIdAssetsNamesPostInner>>("/corporations/{corporation_id}/assets/names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCorporationsCorporationIdAssetsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
