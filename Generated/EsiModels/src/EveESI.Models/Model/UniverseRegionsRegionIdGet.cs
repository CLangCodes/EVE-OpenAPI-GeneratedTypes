/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseRegionsRegionIdGet
    /// </summary>
    [DataContract(Name = "UniverseRegionsRegionIdGet")]
    public partial class UniverseRegionsRegionIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseRegionsRegionIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseRegionsRegionIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseRegionsRegionIdGet" /> class.
        /// </summary>
        /// <param name="constellations">constellations (required).</param>
        /// <param name="description">description.</param>
        /// <param name="name">name (required).</param>
        /// <param name="regionId">regionId (required).</param>
        public UniverseRegionsRegionIdGet(List<long> constellations = default(List<long>), string description = default(string), string name = default(string), long regionId = default(long))
        {
            // to ensure "constellations" is required (not null)
            if (constellations == null)
            {
                throw new ArgumentNullException("constellations is a required property for UniverseRegionsRegionIdGet and cannot be null");
            }
            this.Constellations = constellations;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseRegionsRegionIdGet and cannot be null");
            }
            this.Name = name;
            this.RegionId = regionId;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Constellations
        /// </summary>
        [DataMember(Name = "constellations", IsRequired = true, EmitDefaultValue = true)]
        public List<long> Constellations { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name = "region_id", IsRequired = true, EmitDefaultValue = true)]
        public long RegionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseRegionsRegionIdGet {\n");
            sb.Append("  Constellations: ").Append(Constellations).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
