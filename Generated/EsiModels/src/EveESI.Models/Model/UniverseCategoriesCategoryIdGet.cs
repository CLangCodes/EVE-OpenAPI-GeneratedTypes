/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseCategoriesCategoryIdGet
    /// </summary>
    [DataContract(Name = "UniverseCategoriesCategoryIdGet")]
    public partial class UniverseCategoriesCategoryIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseCategoriesCategoryIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseCategoriesCategoryIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseCategoriesCategoryIdGet" /> class.
        /// </summary>
        /// <param name="categoryId">categoryId (required).</param>
        /// <param name="groups">groups (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="published">published (required).</param>
        public UniverseCategoriesCategoryIdGet(long categoryId = default(long), List<long> groups = default(List<long>), string name = default(string), bool published = default(bool))
        {
            this.CategoryId = categoryId;
            // to ensure "groups" is required (not null)
            if (groups == null)
            {
                throw new ArgumentNullException("groups is a required property for UniverseCategoriesCategoryIdGet and cannot be null");
            }
            this.Groups = groups;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseCategoriesCategoryIdGet and cannot be null");
            }
            this.Name = name;
            this.Published = published;
        }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "category_id", IsRequired = true, EmitDefaultValue = true)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", IsRequired = true, EmitDefaultValue = true)]
        public List<long> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", IsRequired = true, EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseCategoriesCategoryIdGet {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
