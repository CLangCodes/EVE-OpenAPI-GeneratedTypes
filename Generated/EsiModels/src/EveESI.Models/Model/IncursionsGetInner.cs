/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// IncursionsGetInner
    /// </summary>
    [DataContract(Name = "IncursionsGet_inner")]
    public partial class IncursionsGetInner
    {
        /// <summary>
        /// The state of this incursion
        /// </summary>
        /// <value>The state of this incursion</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Withdrawing for value: withdrawing
            /// </summary>
            [EnumMember(Value = "withdrawing")]
            Withdrawing = 1,

            /// <summary>
            /// Enum Mobilizing for value: mobilizing
            /// </summary>
            [EnumMember(Value = "mobilizing")]
            Mobilizing = 2,

            /// <summary>
            /// Enum Established for value: established
            /// </summary>
            [EnumMember(Value = "established")]
            Established = 3
        }


        /// <summary>
        /// The state of this incursion
        /// </summary>
        /// <value>The state of this incursion</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncursionsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IncursionsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncursionsGetInner" /> class.
        /// </summary>
        /// <param name="constellationId">The constellation id in which this incursion takes place (required).</param>
        /// <param name="factionId">The attacking faction&#39;s id (required).</param>
        /// <param name="hasBoss">Whether the final encounter has boss or not (required).</param>
        /// <param name="infestedSolarSystems">A list of infested solar system ids that are a part of this incursion (required).</param>
        /// <param name="influence">Influence of this incursion as a float from 0 to 1 (required).</param>
        /// <param name="stagingSolarSystemId">Staging solar system for this incursion (required).</param>
        /// <param name="state">The state of this incursion (required).</param>
        /// <param name="type">The type of this incursion (required).</param>
        public IncursionsGetInner(long constellationId = default(long), long factionId = default(long), bool hasBoss = default(bool), List<long> infestedSolarSystems = default(List<long>), double influence = default(double), long stagingSolarSystemId = default(long), StateEnum state = default(StateEnum), string type = default(string))
        {
            this.ConstellationId = constellationId;
            this.FactionId = factionId;
            this.HasBoss = hasBoss;
            // to ensure "infestedSolarSystems" is required (not null)
            if (infestedSolarSystems == null)
            {
                throw new ArgumentNullException("infestedSolarSystems is a required property for IncursionsGetInner and cannot be null");
            }
            this.InfestedSolarSystems = infestedSolarSystems;
            this.Influence = influence;
            this.StagingSolarSystemId = stagingSolarSystemId;
            this.State = state;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for IncursionsGetInner and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// The constellation id in which this incursion takes place
        /// </summary>
        /// <value>The constellation id in which this incursion takes place</value>
        [DataMember(Name = "constellation_id", IsRequired = true, EmitDefaultValue = true)]
        public long ConstellationId { get; set; }

        /// <summary>
        /// The attacking faction&#39;s id
        /// </summary>
        /// <value>The attacking faction&#39;s id</value>
        [DataMember(Name = "faction_id", IsRequired = true, EmitDefaultValue = true)]
        public long FactionId { get; set; }

        /// <summary>
        /// Whether the final encounter has boss or not
        /// </summary>
        /// <value>Whether the final encounter has boss or not</value>
        [DataMember(Name = "has_boss", IsRequired = true, EmitDefaultValue = true)]
        public bool HasBoss { get; set; }

        /// <summary>
        /// A list of infested solar system ids that are a part of this incursion
        /// </summary>
        /// <value>A list of infested solar system ids that are a part of this incursion</value>
        [DataMember(Name = "infested_solar_systems", IsRequired = true, EmitDefaultValue = true)]
        public List<long> InfestedSolarSystems { get; set; }

        /// <summary>
        /// Influence of this incursion as a float from 0 to 1
        /// </summary>
        /// <value>Influence of this incursion as a float from 0 to 1</value>
        [DataMember(Name = "influence", IsRequired = true, EmitDefaultValue = true)]
        public double Influence { get; set; }

        /// <summary>
        /// Staging solar system for this incursion
        /// </summary>
        /// <value>Staging solar system for this incursion</value>
        [DataMember(Name = "staging_solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long StagingSolarSystemId { get; set; }

        /// <summary>
        /// The type of this incursion
        /// </summary>
        /// <value>The type of this incursion</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncursionsGetInner {\n");
            sb.Append("  ConstellationId: ").Append(ConstellationId).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  HasBoss: ").Append(HasBoss).Append("\n");
            sb.Append("  InfestedSolarSystems: ").Append(InfestedSolarSystems).Append("\n");
            sb.Append("  Influence: ").Append(Influence).Append("\n");
            sb.Append("  StagingSolarSystemId: ").Append(StagingSolarSystemId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
