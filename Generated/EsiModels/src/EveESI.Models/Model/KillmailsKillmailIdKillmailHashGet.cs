/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// KillmailsKillmailIdKillmailHashGet
    /// </summary>
    [DataContract(Name = "KillmailsKillmailIdKillmailHashGet")]
    public partial class KillmailsKillmailIdKillmailHashGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KillmailsKillmailIdKillmailHashGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KillmailsKillmailIdKillmailHashGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KillmailsKillmailIdKillmailHashGet" /> class.
        /// </summary>
        /// <param name="attackers">attackers (required).</param>
        /// <param name="killmailId">ID of the killmail (required).</param>
        /// <param name="killmailTime">Time that the victim was killed and the killmail generated  (required).</param>
        /// <param name="moonId">Moon if the kill took place at one.</param>
        /// <param name="solarSystemId">Solar system that the kill took place in  (required).</param>
        /// <param name="victim">victim (required).</param>
        /// <param name="warId">War if the killmail is generated in relation to an official war .</param>
        public KillmailsKillmailIdKillmailHashGet(List<KillmailsKillmailIdKillmailHashGetAttackersInner> attackers = default(List<KillmailsKillmailIdKillmailHashGetAttackersInner>), long killmailId = default(long), DateTime killmailTime = default(DateTime), long moonId = default(long), long solarSystemId = default(long), KillmailsKillmailIdKillmailHashGetVictim victim = default(KillmailsKillmailIdKillmailHashGetVictim), long warId = default(long))
        {
            // to ensure "attackers" is required (not null)
            if (attackers == null)
            {
                throw new ArgumentNullException("attackers is a required property for KillmailsKillmailIdKillmailHashGet and cannot be null");
            }
            this.Attackers = attackers;
            this.KillmailId = killmailId;
            this.KillmailTime = killmailTime;
            this.SolarSystemId = solarSystemId;
            // to ensure "victim" is required (not null)
            if (victim == null)
            {
                throw new ArgumentNullException("victim is a required property for KillmailsKillmailIdKillmailHashGet and cannot be null");
            }
            this.Victim = victim;
            this.MoonId = moonId;
            this.WarId = warId;
        }

        /// <summary>
        /// Gets or Sets Attackers
        /// </summary>
        [DataMember(Name = "attackers", IsRequired = true, EmitDefaultValue = true)]
        public List<KillmailsKillmailIdKillmailHashGetAttackersInner> Attackers { get; set; }

        /// <summary>
        /// ID of the killmail
        /// </summary>
        /// <value>ID of the killmail</value>
        [DataMember(Name = "killmail_id", IsRequired = true, EmitDefaultValue = true)]
        public long KillmailId { get; set; }

        /// <summary>
        /// Time that the victim was killed and the killmail generated 
        /// </summary>
        /// <value>Time that the victim was killed and the killmail generated </value>
        [DataMember(Name = "killmail_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime KillmailTime { get; set; }

        /// <summary>
        /// Moon if the kill took place at one
        /// </summary>
        /// <value>Moon if the kill took place at one</value>
        [DataMember(Name = "moon_id", EmitDefaultValue = false)]
        public long MoonId { get; set; }

        /// <summary>
        /// Solar system that the kill took place in 
        /// </summary>
        /// <value>Solar system that the kill took place in </value>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Gets or Sets Victim
        /// </summary>
        [DataMember(Name = "victim", IsRequired = true, EmitDefaultValue = true)]
        public KillmailsKillmailIdKillmailHashGetVictim Victim { get; set; }

        /// <summary>
        /// War if the killmail is generated in relation to an official war 
        /// </summary>
        /// <value>War if the killmail is generated in relation to an official war </value>
        [DataMember(Name = "war_id", EmitDefaultValue = false)]
        public long WarId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KillmailsKillmailIdKillmailHashGet {\n");
            sb.Append("  Attackers: ").Append(Attackers).Append("\n");
            sb.Append("  KillmailId: ").Append(KillmailId).Append("\n");
            sb.Append("  KillmailTime: ").Append(KillmailTime).Append("\n");
            sb.Append("  MoonId: ").Append(MoonId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  Victim: ").Append(Victim).Append("\n");
            sb.Append("  WarId: ").Append(WarId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
