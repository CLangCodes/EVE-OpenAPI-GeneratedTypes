/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// SovereigntyCampaignsGetInner
    /// </summary>
    [DataContract(Name = "SovereigntyCampaignsGet_inner")]
    public partial class SovereigntyCampaignsGetInner
    {
        /// <summary>
        /// Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;. 
        /// </summary>
        /// <value>Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum TcuDefense for value: tcu_defense
            /// </summary>
            [EnumMember(Value = "tcu_defense")]
            TcuDefense = 1,

            /// <summary>
            /// Enum IhubDefense for value: ihub_defense
            /// </summary>
            [EnumMember(Value = "ihub_defense")]
            IhubDefense = 2,

            /// <summary>
            /// Enum StationDefense for value: station_defense
            /// </summary>
            [EnumMember(Value = "station_defense")]
            StationDefense = 3,

            /// <summary>
            /// Enum StationFreeport for value: station_freeport
            /// </summary>
            [EnumMember(Value = "station_freeport")]
            StationFreeport = 4
        }


        /// <summary>
        /// Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;. 
        /// </summary>
        /// <value>Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;. </value>
        [DataMember(Name = "event_type", IsRequired = true, EmitDefaultValue = true)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SovereigntyCampaignsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SovereigntyCampaignsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SovereigntyCampaignsGetInner" /> class.
        /// </summary>
        /// <param name="attackersScore">Score for all attacking parties, only present in Defense Events. .</param>
        /// <param name="campaignId">Unique ID for this campaign. (required).</param>
        /// <param name="constellationId">The constellation in which the campaign will take place.  (required).</param>
        /// <param name="defenderId">Defending alliance, only present in Defense Events .</param>
        /// <param name="defenderScore">Score for the defending alliance, only present in Defense Events. .</param>
        /// <param name="eventType">Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \&quot;Defense Events\&quot;, station_freeport as \&quot;Freeport Events\&quot;.  (required).</param>
        /// <param name="participants">Alliance participating and their respective scores, only present in Freeport Events. .</param>
        /// <param name="solarSystemId">The solar system the structure is located in.  (required).</param>
        /// <param name="startTime">Time the event is scheduled to start.  (required).</param>
        /// <param name="structureId">The structure item ID that is related to this campaign.  (required).</param>
        public SovereigntyCampaignsGetInner(double attackersScore = default(double), long campaignId = default(long), long constellationId = default(long), long defenderId = default(long), double defenderScore = default(double), EventTypeEnum eventType = default(EventTypeEnum), List<SovereigntyCampaignsGetInnerParticipantsInner> participants = default(List<SovereigntyCampaignsGetInnerParticipantsInner>), long solarSystemId = default(long), DateTime startTime = default(DateTime), long structureId = default(long))
        {
            this.CampaignId = campaignId;
            this.ConstellationId = constellationId;
            this.EventType = eventType;
            this.SolarSystemId = solarSystemId;
            this.StartTime = startTime;
            this.StructureId = structureId;
            this.AttackersScore = attackersScore;
            this.DefenderId = defenderId;
            this.DefenderScore = defenderScore;
            this.Participants = participants;
        }

        /// <summary>
        /// Score for all attacking parties, only present in Defense Events. 
        /// </summary>
        /// <value>Score for all attacking parties, only present in Defense Events. </value>
        [DataMember(Name = "attackers_score", EmitDefaultValue = false)]
        public double AttackersScore { get; set; }

        /// <summary>
        /// Unique ID for this campaign.
        /// </summary>
        /// <value>Unique ID for this campaign.</value>
        [DataMember(Name = "campaign_id", IsRequired = true, EmitDefaultValue = true)]
        public long CampaignId { get; set; }

        /// <summary>
        /// The constellation in which the campaign will take place. 
        /// </summary>
        /// <value>The constellation in which the campaign will take place. </value>
        [DataMember(Name = "constellation_id", IsRequired = true, EmitDefaultValue = true)]
        public long ConstellationId { get; set; }

        /// <summary>
        /// Defending alliance, only present in Defense Events 
        /// </summary>
        /// <value>Defending alliance, only present in Defense Events </value>
        [DataMember(Name = "defender_id", EmitDefaultValue = false)]
        public long DefenderId { get; set; }

        /// <summary>
        /// Score for the defending alliance, only present in Defense Events. 
        /// </summary>
        /// <value>Score for the defending alliance, only present in Defense Events. </value>
        [DataMember(Name = "defender_score", EmitDefaultValue = false)]
        public double DefenderScore { get; set; }

        /// <summary>
        /// Alliance participating and their respective scores, only present in Freeport Events. 
        /// </summary>
        /// <value>Alliance participating and their respective scores, only present in Freeport Events. </value>
        [DataMember(Name = "participants", EmitDefaultValue = false)]
        public List<SovereigntyCampaignsGetInnerParticipantsInner> Participants { get; set; }

        /// <summary>
        /// The solar system the structure is located in. 
        /// </summary>
        /// <value>The solar system the structure is located in. </value>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Time the event is scheduled to start. 
        /// </summary>
        /// <value>Time the event is scheduled to start. </value>
        [DataMember(Name = "start_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// The structure item ID that is related to this campaign. 
        /// </summary>
        /// <value>The structure item ID that is related to this campaign. </value>
        [DataMember(Name = "structure_id", IsRequired = true, EmitDefaultValue = true)]
        public long StructureId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SovereigntyCampaignsGetInner {\n");
            sb.Append("  AttackersScore: ").Append(AttackersScore).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  ConstellationId: ").Append(ConstellationId).Append("\n");
            sb.Append("  DefenderId: ").Append(DefenderId).Append("\n");
            sb.Append("  DefenderScore: ").Append(DefenderScore).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StructureId: ").Append(StructureId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
