/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseIdsPost
    /// </summary>
    [DataContract(Name = "UniverseIdsPost")]
    public partial class UniverseIdsPost
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseIdsPost" /> class.
        /// </summary>
        /// <param name="agents">agents.</param>
        /// <param name="alliances">alliances.</param>
        /// <param name="characters">characters.</param>
        /// <param name="constellations">constellations.</param>
        /// <param name="corporations">corporations.</param>
        /// <param name="factions">factions.</param>
        /// <param name="inventoryTypes">inventoryTypes.</param>
        /// <param name="regions">regions.</param>
        /// <param name="stations">stations.</param>
        /// <param name="systems">systems.</param>
        public UniverseIdsPost(List<UniverseIdsPostAgentsInner> agents = default(List<UniverseIdsPostAgentsInner>), List<UniverseIdsPostAlliancesInner> alliances = default(List<UniverseIdsPostAlliancesInner>), List<UniverseIdsPostCharactersInner> characters = default(List<UniverseIdsPostCharactersInner>), List<UniverseIdsPostConstellationsInner> constellations = default(List<UniverseIdsPostConstellationsInner>), List<UniverseIdsPostCorporationsInner> corporations = default(List<UniverseIdsPostCorporationsInner>), List<UniverseIdsPostFactionsInner> factions = default(List<UniverseIdsPostFactionsInner>), List<UniverseIdsPostInventoryTypesInner> inventoryTypes = default(List<UniverseIdsPostInventoryTypesInner>), List<UniverseIdsPostRegionsInner> regions = default(List<UniverseIdsPostRegionsInner>), List<UniverseIdsPostStationsInner> stations = default(List<UniverseIdsPostStationsInner>), List<UniverseIdsPostSystemsInner> systems = default(List<UniverseIdsPostSystemsInner>))
        {
            this.Agents = agents;
            this.Alliances = alliances;
            this.Characters = characters;
            this.Constellations = constellations;
            this.Corporations = corporations;
            this.Factions = factions;
            this.InventoryTypes = inventoryTypes;
            this.Regions = regions;
            this.Stations = stations;
            this.Systems = systems;
        }

        /// <summary>
        /// Gets or Sets Agents
        /// </summary>
        [DataMember(Name = "agents", EmitDefaultValue = false)]
        public List<UniverseIdsPostAgentsInner> Agents { get; set; }

        /// <summary>
        /// Gets or Sets Alliances
        /// </summary>
        [DataMember(Name = "alliances", EmitDefaultValue = false)]
        public List<UniverseIdsPostAlliancesInner> Alliances { get; set; }

        /// <summary>
        /// Gets or Sets Characters
        /// </summary>
        [DataMember(Name = "characters", EmitDefaultValue = false)]
        public List<UniverseIdsPostCharactersInner> Characters { get; set; }

        /// <summary>
        /// Gets or Sets Constellations
        /// </summary>
        [DataMember(Name = "constellations", EmitDefaultValue = false)]
        public List<UniverseIdsPostConstellationsInner> Constellations { get; set; }

        /// <summary>
        /// Gets or Sets Corporations
        /// </summary>
        [DataMember(Name = "corporations", EmitDefaultValue = false)]
        public List<UniverseIdsPostCorporationsInner> Corporations { get; set; }

        /// <summary>
        /// Gets or Sets Factions
        /// </summary>
        [DataMember(Name = "factions", EmitDefaultValue = false)]
        public List<UniverseIdsPostFactionsInner> Factions { get; set; }

        /// <summary>
        /// Gets or Sets InventoryTypes
        /// </summary>
        [DataMember(Name = "inventory_types", EmitDefaultValue = false)]
        public List<UniverseIdsPostInventoryTypesInner> InventoryTypes { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name = "regions", EmitDefaultValue = false)]
        public List<UniverseIdsPostRegionsInner> Regions { get; set; }

        /// <summary>
        /// Gets or Sets Stations
        /// </summary>
        [DataMember(Name = "stations", EmitDefaultValue = false)]
        public List<UniverseIdsPostStationsInner> Stations { get; set; }

        /// <summary>
        /// Gets or Sets Systems
        /// </summary>
        [DataMember(Name = "systems", EmitDefaultValue = false)]
        public List<UniverseIdsPostSystemsInner> Systems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseIdsPost {\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  Alliances: ").Append(Alliances).Append("\n");
            sb.Append("  Characters: ").Append(Characters).Append("\n");
            sb.Append("  Constellations: ").Append(Constellations).Append("\n");
            sb.Append("  Corporations: ").Append(Corporations).Append("\n");
            sb.Append("  Factions: ").Append(Factions).Append("\n");
            sb.Append("  InventoryTypes: ").Append(InventoryTypes).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Stations: ").Append(Stations).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
