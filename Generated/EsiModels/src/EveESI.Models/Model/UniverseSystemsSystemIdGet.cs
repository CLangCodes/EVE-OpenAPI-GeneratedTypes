/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseSystemsSystemIdGet
    /// </summary>
    [DataContract(Name = "UniverseSystemsSystemIdGet")]
    public partial class UniverseSystemsSystemIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseSystemsSystemIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseSystemsSystemIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseSystemsSystemIdGet" /> class.
        /// </summary>
        /// <param name="constellationId">The constellation this solar system is in (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="planets">planets.</param>
        /// <param name="position">position (required).</param>
        /// <param name="securityClass">securityClass.</param>
        /// <param name="securityStatus">securityStatus (required).</param>
        /// <param name="starId">starId.</param>
        /// <param name="stargates">stargates.</param>
        /// <param name="stations">stations.</param>
        /// <param name="systemId">systemId (required).</param>
        public UniverseSystemsSystemIdGet(long constellationId = default(long), string name = default(string), List<UniverseSystemsSystemIdGetPlanetsInner> planets = default(List<UniverseSystemsSystemIdGetPlanetsInner>), CharactersCharacterIdAssetsLocationsPostInnerPosition position = default(CharactersCharacterIdAssetsLocationsPostInnerPosition), string securityClass = default(string), double securityStatus = default(double), long starId = default(long), List<long> stargates = default(List<long>), List<long> stations = default(List<long>), long systemId = default(long))
        {
            this.ConstellationId = constellationId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseSystemsSystemIdGet and cannot be null");
            }
            this.Name = name;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for UniverseSystemsSystemIdGet and cannot be null");
            }
            this.Position = position;
            this.SecurityStatus = securityStatus;
            this.SystemId = systemId;
            this.Planets = planets;
            this.SecurityClass = securityClass;
            this.StarId = starId;
            this.Stargates = stargates;
            this.Stations = stations;
        }

        /// <summary>
        /// The constellation this solar system is in
        /// </summary>
        /// <value>The constellation this solar system is in</value>
        [DataMember(Name = "constellation_id", IsRequired = true, EmitDefaultValue = true)]
        public long ConstellationId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Planets
        /// </summary>
        [DataMember(Name = "planets", EmitDefaultValue = false)]
        public List<UniverseSystemsSystemIdGetPlanetsInner> Planets { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public CharactersCharacterIdAssetsLocationsPostInnerPosition Position { get; set; }

        /// <summary>
        /// Gets or Sets SecurityClass
        /// </summary>
        [DataMember(Name = "security_class", EmitDefaultValue = false)]
        public string SecurityClass { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStatus
        /// </summary>
        [DataMember(Name = "security_status", IsRequired = true, EmitDefaultValue = true)]
        public double SecurityStatus { get; set; }

        /// <summary>
        /// Gets or Sets StarId
        /// </summary>
        [DataMember(Name = "star_id", EmitDefaultValue = false)]
        public long StarId { get; set; }

        /// <summary>
        /// Gets or Sets Stargates
        /// </summary>
        [DataMember(Name = "stargates", EmitDefaultValue = false)]
        public List<long> Stargates { get; set; }

        /// <summary>
        /// Gets or Sets Stations
        /// </summary>
        [DataMember(Name = "stations", EmitDefaultValue = false)]
        public List<long> Stations { get; set; }

        /// <summary>
        /// Gets or Sets SystemId
        /// </summary>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseSystemsSystemIdGet {\n");
            sb.Append("  ConstellationId: ").Append(ConstellationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Planets: ").Append(Planets).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  SecurityClass: ").Append(SecurityClass).Append("\n");
            sb.Append("  SecurityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("  StarId: ").Append(StarId).Append("\n");
            sb.Append("  Stargates: ").Append(Stargates).Append("\n");
            sb.Append("  Stations: ").Append(Stations).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
