/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// WarsWarIdGet
    /// </summary>
    [DataContract(Name = "WarsWarIdGet")]
    public partial class WarsWarIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WarsWarIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WarsWarIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WarsWarIdGet" /> class.
        /// </summary>
        /// <param name="aggressor">aggressor (required).</param>
        /// <param name="allies">allied corporations or alliances, each object contains either corporation_id or alliance_id.</param>
        /// <param name="declared">Time that the war was declared (required).</param>
        /// <param name="defender">defender (required).</param>
        /// <param name="finished">Time the war ended and shooting was no longer allowed.</param>
        /// <param name="id">ID of the specified war (required).</param>
        /// <param name="mutual">Was the war declared mutual by both parties (required).</param>
        /// <param name="openForAllies">Is the war currently open for allies or not (required).</param>
        /// <param name="retracted">Time the war was retracted but both sides could still shoot each other.</param>
        /// <param name="started">Time when the war started and both sides could shoot each other.</param>
        public WarsWarIdGet(WarsWarIdGetAggressor aggressor = default(WarsWarIdGetAggressor), List<WarsWarIdGetAlliesInner> allies = default(List<WarsWarIdGetAlliesInner>), DateTime declared = default(DateTime), WarsWarIdGetDefender defender = default(WarsWarIdGetDefender), DateTime finished = default(DateTime), long id = default(long), bool mutual = default(bool), bool openForAllies = default(bool), DateTime retracted = default(DateTime), DateTime started = default(DateTime))
        {
            // to ensure "aggressor" is required (not null)
            if (aggressor == null)
            {
                throw new ArgumentNullException("aggressor is a required property for WarsWarIdGet and cannot be null");
            }
            this.Aggressor = aggressor;
            this.Declared = declared;
            // to ensure "defender" is required (not null)
            if (defender == null)
            {
                throw new ArgumentNullException("defender is a required property for WarsWarIdGet and cannot be null");
            }
            this.Defender = defender;
            this.Id = id;
            this.Mutual = mutual;
            this.OpenForAllies = openForAllies;
            this.Allies = allies;
            this.Finished = finished;
            this.Retracted = retracted;
            this.Started = started;
        }

        /// <summary>
        /// Gets or Sets Aggressor
        /// </summary>
        [DataMember(Name = "aggressor", IsRequired = true, EmitDefaultValue = true)]
        public WarsWarIdGetAggressor Aggressor { get; set; }

        /// <summary>
        /// allied corporations or alliances, each object contains either corporation_id or alliance_id
        /// </summary>
        /// <value>allied corporations or alliances, each object contains either corporation_id or alliance_id</value>
        [DataMember(Name = "allies", EmitDefaultValue = false)]
        public List<WarsWarIdGetAlliesInner> Allies { get; set; }

        /// <summary>
        /// Time that the war was declared
        /// </summary>
        /// <value>Time that the war was declared</value>
        [DataMember(Name = "declared", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Declared { get; set; }

        /// <summary>
        /// Gets or Sets Defender
        /// </summary>
        [DataMember(Name = "defender", IsRequired = true, EmitDefaultValue = true)]
        public WarsWarIdGetDefender Defender { get; set; }

        /// <summary>
        /// Time the war ended and shooting was no longer allowed
        /// </summary>
        /// <value>Time the war ended and shooting was no longer allowed</value>
        [DataMember(Name = "finished", EmitDefaultValue = false)]
        public DateTime Finished { get; set; }

        /// <summary>
        /// ID of the specified war
        /// </summary>
        /// <value>ID of the specified war</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Was the war declared mutual by both parties
        /// </summary>
        /// <value>Was the war declared mutual by both parties</value>
        [DataMember(Name = "mutual", IsRequired = true, EmitDefaultValue = true)]
        public bool Mutual { get; set; }

        /// <summary>
        /// Is the war currently open for allies or not
        /// </summary>
        /// <value>Is the war currently open for allies or not</value>
        [DataMember(Name = "open_for_allies", IsRequired = true, EmitDefaultValue = true)]
        public bool OpenForAllies { get; set; }

        /// <summary>
        /// Time the war was retracted but both sides could still shoot each other
        /// </summary>
        /// <value>Time the war was retracted but both sides could still shoot each other</value>
        [DataMember(Name = "retracted", EmitDefaultValue = false)]
        public DateTime Retracted { get; set; }

        /// <summary>
        /// Time when the war started and both sides could shoot each other
        /// </summary>
        /// <value>Time when the war started and both sides could shoot each other</value>
        [DataMember(Name = "started", EmitDefaultValue = false)]
        public DateTime Started { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WarsWarIdGet {\n");
            sb.Append("  Aggressor: ").Append(Aggressor).Append("\n");
            sb.Append("  Allies: ").Append(Allies).Append("\n");
            sb.Append("  Declared: ").Append(Declared).Append("\n");
            sb.Append("  Defender: ").Append(Defender).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Mutual: ").Append(Mutual).Append("\n");
            sb.Append("  OpenForAllies: ").Append(OpenForAllies).Append("\n");
            sb.Append("  Retracted: ").Append(Retracted).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
