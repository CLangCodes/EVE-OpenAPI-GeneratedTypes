/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsProjectsDetailDetails
    /// </summary>
    [DataContract(Name = "CorporationsProjectsDetailDetails")]
    public partial class CorporationsProjectsDetailDetails
    {
        /// <summary>
        /// Assigned career path
        /// </summary>
        /// <value>Assigned career path</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CareerEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Explorer for value: Explorer
            /// </summary>
            [EnumMember(Value = "Explorer")]
            Explorer = 2,

            /// <summary>
            /// Enum Industrialist for value: Industrialist
            /// </summary>
            [EnumMember(Value = "Industrialist")]
            Industrialist = 3,

            /// <summary>
            /// Enum Enforcer for value: Enforcer
            /// </summary>
            [EnumMember(Value = "Enforcer")]
            Enforcer = 4,

            /// <summary>
            /// Enum SoldierOfFortune for value: Soldier of Fortune
            /// </summary>
            [EnumMember(Value = "Soldier of Fortune")]
            SoldierOfFortune = 5
        }


        /// <summary>
        /// Assigned career path
        /// </summary>
        /// <value>Assigned career path</value>
        [DataMember(Name = "career", IsRequired = true, EmitDefaultValue = true)]
        public CareerEnum Career { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsProjectsDetailDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailDetails" /> class.
        /// </summary>
        /// <param name="career">Assigned career path (required).</param>
        /// <param name="created">Moment this project was created (required).</param>
        /// <param name="description">Description (required).</param>
        /// <param name="expires">Moment this project expires.</param>
        /// <param name="finished">Moment this project transitioned to a non-active state..</param>
        public CorporationsProjectsDetailDetails(CareerEnum career = default(CareerEnum), DateTime created = default(DateTime), string description = default(string), DateTime expires = default(DateTime), DateTime finished = default(DateTime))
        {
            this.Career = career;
            this.Created = created;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CorporationsProjectsDetailDetails and cannot be null");
            }
            this.Description = description;
            this.Expires = expires;
            this.Finished = finished;
        }

        /// <summary>
        /// Moment this project was created
        /// </summary>
        /// <value>Moment this project was created</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Moment this project expires
        /// </summary>
        /// <value>Moment this project expires</value>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public DateTime Expires { get; set; }

        /// <summary>
        /// Moment this project transitioned to a non-active state.
        /// </summary>
        /// <value>Moment this project transitioned to a non-active state.</value>
        [DataMember(Name = "finished", EmitDefaultValue = false)]
        public DateTime Finished { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsProjectsDetailDetails {\n");
            sb.Append("  Career: ").Append(Career).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
