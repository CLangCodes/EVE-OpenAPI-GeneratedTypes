/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdContractsGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdContractsGet_inner")]
    public partial class CharactersCharacterIdContractsGetInner
    {
        /// <summary>
        /// To whom the contract is available
        /// </summary>
        /// <value>To whom the contract is available</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityEnum
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,

            /// <summary>
            /// Enum Personal for value: personal
            /// </summary>
            [EnumMember(Value = "personal")]
            Personal = 2,

            /// <summary>
            /// Enum Corporation for value: corporation
            /// </summary>
            [EnumMember(Value = "corporation")]
            Corporation = 3,

            /// <summary>
            /// Enum Alliance for value: alliance
            /// </summary>
            [EnumMember(Value = "alliance")]
            Alliance = 4
        }


        /// <summary>
        /// To whom the contract is available
        /// </summary>
        /// <value>To whom the contract is available</value>
        [DataMember(Name = "availability", IsRequired = true, EmitDefaultValue = true)]
        public AvailabilityEnum Availability { get; set; }
        /// <summary>
        /// Status of the the contract
        /// </summary>
        /// <value>Status of the the contract</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Outstanding for value: outstanding
            /// </summary>
            [EnumMember(Value = "outstanding")]
            Outstanding = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 2,

            /// <summary>
            /// Enum FinishedIssuer for value: finished_issuer
            /// </summary>
            [EnumMember(Value = "finished_issuer")]
            FinishedIssuer = 3,

            /// <summary>
            /// Enum FinishedContractor for value: finished_contractor
            /// </summary>
            [EnumMember(Value = "finished_contractor")]
            FinishedContractor = 4,

            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 5,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 6,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 7,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 8,

            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 9,

            /// <summary>
            /// Enum Reversed for value: reversed
            /// </summary>
            [EnumMember(Value = "reversed")]
            Reversed = 10
        }


        /// <summary>
        /// Status of the the contract
        /// </summary>
        /// <value>Status of the the contract</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Type of the contract
        /// </summary>
        /// <value>Type of the contract</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown,

            /// <summary>
            /// Enum ItemExchange for value: item_exchange
            /// </summary>
            [EnumMember(Value = "item_exchange")]
            ItemExchange,

            /// <summary>
            /// Enum Auction for value: auction
            /// </summary>
            [EnumMember(Value = "auction")]
            Auction,

            /// <summary>
            /// Enum Courier for value: courier
            /// </summary>
            [EnumMember(Value = "courier")]
            Courier,

            /// <summary>
            /// Enum Loan for value: loan
            /// </summary>
            [EnumMember(Value = "loan")]
            Loan
        }


        /// <summary>
        /// Type of the contract
        /// </summary>
        /// <value>Type of the contract</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdContractsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdContractsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdContractsGetInner" /> class.
        /// </summary>
        /// <param name="acceptorId">Who will accept the contract (required).</param>
        /// <param name="assigneeId">ID to whom the contract is assigned, can be alliance, corporation or character ID (required).</param>
        /// <param name="availability">To whom the contract is available (required).</param>
        /// <param name="buyout">Buyout price (for Auctions only).</param>
        /// <param name="collateral">Collateral price (for Couriers only).</param>
        /// <param name="contractId">contractId (required).</param>
        /// <param name="dateAccepted">Date of confirmation of contract.</param>
        /// <param name="dateCompleted">Date of completed of contract.</param>
        /// <param name="dateExpired">Expiration date of the contract (required).</param>
        /// <param name="dateIssued">Ð¡reation date of the contract (required).</param>
        /// <param name="daysToComplete">Number of days to perform the contract.</param>
        /// <param name="endLocationId">End location ID (for Couriers contract).</param>
        /// <param name="forCorporation">true if the contract was issued on behalf of the issuer&#39;s corporation (required).</param>
        /// <param name="issuerCorporationId">Character&#39;s corporation ID for the issuer (required).</param>
        /// <param name="issuerId">Character ID for the issuer (required).</param>
        /// <param name="price">Price of contract (for ItemsExchange and Auctions).</param>
        /// <param name="reward">Remuneration for contract (for Couriers only).</param>
        /// <param name="startLocationId">Start location ID (for Couriers contract).</param>
        /// <param name="status">Status of the the contract (required).</param>
        /// <param name="title">Title of the contract.</param>
        /// <param name="type">Type of the contract (required).</param>
        /// <param name="volume">Volume of items in the contract.</param>
        public CharactersCharacterIdContractsGetInner(long acceptorId = default(long), long assigneeId = default(long), AvailabilityEnum availability = default(AvailabilityEnum), double buyout = default(double), double collateral = default(double), long contractId = default(long), DateTime dateAccepted = default(DateTime), DateTime dateCompleted = default(DateTime), DateTime dateExpired = default(DateTime), DateTime dateIssued = default(DateTime), long daysToComplete = default(long), long endLocationId = default(long), bool forCorporation = default(bool), long issuerCorporationId = default(long), long issuerId = default(long), double price = default(double), double reward = default(double), long startLocationId = default(long), StatusEnum status = default(StatusEnum), string title = default(string), TypeEnum type = default(TypeEnum), double volume = default(double))
        {
            this.AcceptorId = acceptorId;
            this.AssigneeId = assigneeId;
            this.Availability = availability;
            this.ContractId = contractId;
            this.DateExpired = dateExpired;
            this.DateIssued = dateIssued;
            this.ForCorporation = forCorporation;
            this.IssuerCorporationId = issuerCorporationId;
            this.IssuerId = issuerId;
            this.Status = status;
            this.Type = type;
            this.Buyout = buyout;
            this.Collateral = collateral;
            this.DateAccepted = dateAccepted;
            this.DateCompleted = dateCompleted;
            this.DaysToComplete = daysToComplete;
            this.EndLocationId = endLocationId;
            this.Price = price;
            this.Reward = reward;
            this.StartLocationId = startLocationId;
            this.Title = title;
            this.Volume = volume;
        }

        /// <summary>
        /// Who will accept the contract
        /// </summary>
        /// <value>Who will accept the contract</value>
        [DataMember(Name = "acceptor_id", IsRequired = true, EmitDefaultValue = true)]
        public long AcceptorId { get; set; }

        /// <summary>
        /// ID to whom the contract is assigned, can be alliance, corporation or character ID
        /// </summary>
        /// <value>ID to whom the contract is assigned, can be alliance, corporation or character ID</value>
        [DataMember(Name = "assignee_id", IsRequired = true, EmitDefaultValue = true)]
        public long AssigneeId { get; set; }

        /// <summary>
        /// Buyout price (for Auctions only)
        /// </summary>
        /// <value>Buyout price (for Auctions only)</value>
        [DataMember(Name = "buyout", EmitDefaultValue = false)]
        public double Buyout { get; set; }

        /// <summary>
        /// Collateral price (for Couriers only)
        /// </summary>
        /// <value>Collateral price (for Couriers only)</value>
        [DataMember(Name = "collateral", EmitDefaultValue = false)]
        public double Collateral { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [DataMember(Name = "contract_id", IsRequired = true, EmitDefaultValue = true)]
        public long ContractId { get; set; }

        /// <summary>
        /// Date of confirmation of contract
        /// </summary>
        /// <value>Date of confirmation of contract</value>
        [DataMember(Name = "date_accepted", EmitDefaultValue = false)]
        public DateTime DateAccepted { get; set; }

        /// <summary>
        /// Date of completed of contract
        /// </summary>
        /// <value>Date of completed of contract</value>
        [DataMember(Name = "date_completed", EmitDefaultValue = false)]
        public DateTime DateCompleted { get; set; }

        /// <summary>
        /// Expiration date of the contract
        /// </summary>
        /// <value>Expiration date of the contract</value>
        [DataMember(Name = "date_expired", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DateExpired { get; set; }

        /// <summary>
        /// Ð¡reation date of the contract
        /// </summary>
        /// <value>Ð¡reation date of the contract</value>
        [DataMember(Name = "date_issued", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DateIssued { get; set; }

        /// <summary>
        /// Number of days to perform the contract
        /// </summary>
        /// <value>Number of days to perform the contract</value>
        [DataMember(Name = "days_to_complete", EmitDefaultValue = false)]
        public long DaysToComplete { get; set; }

        /// <summary>
        /// End location ID (for Couriers contract)
        /// </summary>
        /// <value>End location ID (for Couriers contract)</value>
        [DataMember(Name = "end_location_id", EmitDefaultValue = false)]
        public long EndLocationId { get; set; }

        /// <summary>
        /// true if the contract was issued on behalf of the issuer&#39;s corporation
        /// </summary>
        /// <value>true if the contract was issued on behalf of the issuer&#39;s corporation</value>
        [DataMember(Name = "for_corporation", IsRequired = true, EmitDefaultValue = true)]
        public bool ForCorporation { get; set; }

        /// <summary>
        /// Character&#39;s corporation ID for the issuer
        /// </summary>
        /// <value>Character&#39;s corporation ID for the issuer</value>
        [DataMember(Name = "issuer_corporation_id", IsRequired = true, EmitDefaultValue = true)]
        public long IssuerCorporationId { get; set; }

        /// <summary>
        /// Character ID for the issuer
        /// </summary>
        /// <value>Character ID for the issuer</value>
        [DataMember(Name = "issuer_id", IsRequired = true, EmitDefaultValue = true)]
        public long IssuerId { get; set; }

        /// <summary>
        /// Price of contract (for ItemsExchange and Auctions)
        /// </summary>
        /// <value>Price of contract (for ItemsExchange and Auctions)</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Remuneration for contract (for Couriers only)
        /// </summary>
        /// <value>Remuneration for contract (for Couriers only)</value>
        [DataMember(Name = "reward", EmitDefaultValue = false)]
        public double Reward { get; set; }

        /// <summary>
        /// Start location ID (for Couriers contract)
        /// </summary>
        /// <value>Start location ID (for Couriers contract)</value>
        [DataMember(Name = "start_location_id", EmitDefaultValue = false)]
        public long StartLocationId { get; set; }

        /// <summary>
        /// Title of the contract
        /// </summary>
        /// <value>Title of the contract</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Volume of items in the contract
        /// </summary>
        /// <value>Volume of items in the contract</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdContractsGetInner {\n");
            sb.Append("  AcceptorId: ").Append(AcceptorId).Append("\n");
            sb.Append("  AssigneeId: ").Append(AssigneeId).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Buyout: ").Append(Buyout).Append("\n");
            sb.Append("  Collateral: ").Append(Collateral).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  DateAccepted: ").Append(DateAccepted).Append("\n");
            sb.Append("  DateCompleted: ").Append(DateCompleted).Append("\n");
            sb.Append("  DateExpired: ").Append(DateExpired).Append("\n");
            sb.Append("  DateIssued: ").Append(DateIssued).Append("\n");
            sb.Append("  DaysToComplete: ").Append(DaysToComplete).Append("\n");
            sb.Append("  EndLocationId: ").Append(EndLocationId).Append("\n");
            sb.Append("  ForCorporation: ").Append(ForCorporation).Append("\n");
            sb.Append("  IssuerCorporationId: ").Append(IssuerCorporationId).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  StartLocationId: ").Append(StartLocationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
