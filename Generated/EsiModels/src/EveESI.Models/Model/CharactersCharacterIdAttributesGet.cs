/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdAttributesGet
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdAttributesGet")]
    public partial class CharactersCharacterIdAttributesGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdAttributesGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdAttributesGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdAttributesGet" /> class.
        /// </summary>
        /// <param name="accruedRemapCooldownDate">Neural remapping cooldown after a character uses remap accrued over time.</param>
        /// <param name="bonusRemaps">Number of available bonus character neural remaps.</param>
        /// <param name="charisma">charisma (required).</param>
        /// <param name="intelligence">intelligence (required).</param>
        /// <param name="lastRemapDate">Datetime of last neural remap, including usage of bonus remaps.</param>
        /// <param name="memory">memory (required).</param>
        /// <param name="perception">perception (required).</param>
        /// <param name="willpower">willpower (required).</param>
        public CharactersCharacterIdAttributesGet(DateTime accruedRemapCooldownDate = default(DateTime), long bonusRemaps = default(long), long charisma = default(long), long intelligence = default(long), DateTime lastRemapDate = default(DateTime), long memory = default(long), long perception = default(long), long willpower = default(long))
        {
            this.Charisma = charisma;
            this.Intelligence = intelligence;
            this.Memory = memory;
            this.Perception = perception;
            this.Willpower = willpower;
            this.AccruedRemapCooldownDate = accruedRemapCooldownDate;
            this.BonusRemaps = bonusRemaps;
            this.LastRemapDate = lastRemapDate;
        }

        /// <summary>
        /// Neural remapping cooldown after a character uses remap accrued over time
        /// </summary>
        /// <value>Neural remapping cooldown after a character uses remap accrued over time</value>
        [DataMember(Name = "accrued_remap_cooldown_date", EmitDefaultValue = false)]
        public DateTime AccruedRemapCooldownDate { get; set; }

        /// <summary>
        /// Number of available bonus character neural remaps
        /// </summary>
        /// <value>Number of available bonus character neural remaps</value>
        [DataMember(Name = "bonus_remaps", EmitDefaultValue = false)]
        public long BonusRemaps { get; set; }

        /// <summary>
        /// Gets or Sets Charisma
        /// </summary>
        [DataMember(Name = "charisma", IsRequired = true, EmitDefaultValue = true)]
        public long Charisma { get; set; }

        /// <summary>
        /// Gets or Sets Intelligence
        /// </summary>
        [DataMember(Name = "intelligence", IsRequired = true, EmitDefaultValue = true)]
        public long Intelligence { get; set; }

        /// <summary>
        /// Datetime of last neural remap, including usage of bonus remaps
        /// </summary>
        /// <value>Datetime of last neural remap, including usage of bonus remaps</value>
        [DataMember(Name = "last_remap_date", EmitDefaultValue = false)]
        public DateTime LastRemapDate { get; set; }

        /// <summary>
        /// Gets or Sets Memory
        /// </summary>
        [DataMember(Name = "memory", IsRequired = true, EmitDefaultValue = true)]
        public long Memory { get; set; }

        /// <summary>
        /// Gets or Sets Perception
        /// </summary>
        [DataMember(Name = "perception", IsRequired = true, EmitDefaultValue = true)]
        public long Perception { get; set; }

        /// <summary>
        /// Gets or Sets Willpower
        /// </summary>
        [DataMember(Name = "willpower", IsRequired = true, EmitDefaultValue = true)]
        public long Willpower { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdAttributesGet {\n");
            sb.Append("  AccruedRemapCooldownDate: ").Append(AccruedRemapCooldownDate).Append("\n");
            sb.Append("  BonusRemaps: ").Append(BonusRemaps).Append("\n");
            sb.Append("  Charisma: ").Append(Charisma).Append("\n");
            sb.Append("  Intelligence: ").Append(Intelligence).Append("\n");
            sb.Append("  LastRemapDate: ").Append(LastRemapDate).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Perception: ").Append(Perception).Append("\n");
            sb.Append("  Willpower: ").Append(Willpower).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
