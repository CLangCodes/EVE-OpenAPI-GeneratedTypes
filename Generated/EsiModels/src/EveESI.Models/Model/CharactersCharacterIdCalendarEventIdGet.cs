/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// Full details of a specific event
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdCalendarEventIdGet")]
    public partial class CharactersCharacterIdCalendarEventIdGet
    {
        /// <summary>
        /// Defines OwnerType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OwnerTypeEnum
        {
            /// <summary>
            /// Enum EveServer for value: eve_server
            /// </summary>
            [EnumMember(Value = "eve_server")]
            EveServer = 1,

            /// <summary>
            /// Enum Corporation for value: corporation
            /// </summary>
            [EnumMember(Value = "corporation")]
            Corporation = 2,

            /// <summary>
            /// Enum Faction for value: faction
            /// </summary>
            [EnumMember(Value = "faction")]
            Faction = 3,

            /// <summary>
            /// Enum Character for value: character
            /// </summary>
            [EnumMember(Value = "character")]
            Character = 4,

            /// <summary>
            /// Enum Alliance for value: alliance
            /// </summary>
            [EnumMember(Value = "alliance")]
            Alliance = 5
        }


        /// <summary>
        /// Gets or Sets OwnerType
        /// </summary>
        [DataMember(Name = "owner_type", IsRequired = true, EmitDefaultValue = true)]
        public OwnerTypeEnum OwnerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdCalendarEventIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdCalendarEventIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdCalendarEventIdGet" /> class.
        /// </summary>
        /// <param name="date">date (required).</param>
        /// <param name="duration">Length in minutes (required).</param>
        /// <param name="eventId">eventId (required).</param>
        /// <param name="importance">importance (required).</param>
        /// <param name="ownerId">ownerId (required).</param>
        /// <param name="ownerName">ownerName (required).</param>
        /// <param name="ownerType">ownerType (required).</param>
        /// <param name="response">response (required).</param>
        /// <param name="text">text (required).</param>
        /// <param name="title">title (required).</param>
        public CharactersCharacterIdCalendarEventIdGet(DateTime date = default(DateTime), long duration = default(long), long eventId = default(long), long importance = default(long), long ownerId = default(long), string ownerName = default(string), OwnerTypeEnum ownerType = default(OwnerTypeEnum), string response = default(string), string text = default(string), string title = default(string))
        {
            this.Date = date;
            this.Duration = duration;
            this.EventId = eventId;
            this.Importance = importance;
            this.OwnerId = ownerId;
            // to ensure "ownerName" is required (not null)
            if (ownerName == null)
            {
                throw new ArgumentNullException("ownerName is a required property for CharactersCharacterIdCalendarEventIdGet and cannot be null");
            }
            this.OwnerName = ownerName;
            this.OwnerType = ownerType;
            // to ensure "response" is required (not null)
            if (response == null)
            {
                throw new ArgumentNullException("response is a required property for CharactersCharacterIdCalendarEventIdGet and cannot be null");
            }
            this.Response = response;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for CharactersCharacterIdCalendarEventIdGet and cannot be null");
            }
            this.Text = text;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CharactersCharacterIdCalendarEventIdGet and cannot be null");
            }
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Length in minutes
        /// </summary>
        /// <value>Length in minutes</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public long Duration { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name = "event_id", IsRequired = true, EmitDefaultValue = true)]
        public long EventId { get; set; }

        /// <summary>
        /// Gets or Sets Importance
        /// </summary>
        [DataMember(Name = "importance", IsRequired = true, EmitDefaultValue = true)]
        public long Importance { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = true)]
        public long OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name = "owner_name", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "response", IsRequired = true, EmitDefaultValue = true)]
        public string Response { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdCalendarEventIdGet {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
