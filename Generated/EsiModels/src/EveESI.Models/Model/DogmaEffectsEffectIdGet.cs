/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// DogmaEffectsEffectIdGet
    /// </summary>
    [DataContract(Name = "DogmaEffectsEffectIdGet")]
    public partial class DogmaEffectsEffectIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaEffectsEffectIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DogmaEffectsEffectIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaEffectsEffectIdGet" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="disallowAutoRepeat">disallowAutoRepeat.</param>
        /// <param name="dischargeAttributeId">dischargeAttributeId.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="durationAttributeId">durationAttributeId.</param>
        /// <param name="effectCategory">effectCategory.</param>
        /// <param name="effectId">effectId (required).</param>
        /// <param name="electronicChance">electronicChance.</param>
        /// <param name="falloffAttributeId">falloffAttributeId.</param>
        /// <param name="iconId">iconId.</param>
        /// <param name="isAssistance">isAssistance.</param>
        /// <param name="isOffensive">isOffensive.</param>
        /// <param name="isWarpSafe">isWarpSafe.</param>
        /// <param name="modifiers">modifiers.</param>
        /// <param name="name">name.</param>
        /// <param name="postExpression">postExpression.</param>
        /// <param name="preExpression">preExpression.</param>
        /// <param name="published">published.</param>
        /// <param name="rangeAttributeId">rangeAttributeId.</param>
        /// <param name="rangeChance">rangeChance.</param>
        /// <param name="trackingSpeedAttributeId">trackingSpeedAttributeId.</param>
        public DogmaEffectsEffectIdGet(string description = default(string), bool disallowAutoRepeat = default(bool), long dischargeAttributeId = default(long), string displayName = default(string), long durationAttributeId = default(long), long effectCategory = default(long), long effectId = default(long), bool electronicChance = default(bool), long falloffAttributeId = default(long), long iconId = default(long), bool isAssistance = default(bool), bool isOffensive = default(bool), bool isWarpSafe = default(bool), List<DogmaEffectsEffectIdGetModifiersInner> modifiers = default(List<DogmaEffectsEffectIdGetModifiersInner>), string name = default(string), long postExpression = default(long), long preExpression = default(long), bool published = default(bool), long rangeAttributeId = default(long), bool rangeChance = default(bool), long trackingSpeedAttributeId = default(long))
        {
            this.EffectId = effectId;
            this.Description = description;
            this.DisallowAutoRepeat = disallowAutoRepeat;
            this.DischargeAttributeId = dischargeAttributeId;
            this.DisplayName = displayName;
            this.DurationAttributeId = durationAttributeId;
            this.EffectCategory = effectCategory;
            this.ElectronicChance = electronicChance;
            this.FalloffAttributeId = falloffAttributeId;
            this.IconId = iconId;
            this.IsAssistance = isAssistance;
            this.IsOffensive = isOffensive;
            this.IsWarpSafe = isWarpSafe;
            this.Modifiers = modifiers;
            this.Name = name;
            this.PostExpression = postExpression;
            this.PreExpression = preExpression;
            this.Published = published;
            this.RangeAttributeId = rangeAttributeId;
            this.RangeChance = rangeChance;
            this.TrackingSpeedAttributeId = trackingSpeedAttributeId;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisallowAutoRepeat
        /// </summary>
        [DataMember(Name = "disallow_auto_repeat", EmitDefaultValue = true)]
        public bool DisallowAutoRepeat { get; set; }

        /// <summary>
        /// Gets or Sets DischargeAttributeId
        /// </summary>
        [DataMember(Name = "discharge_attribute_id", EmitDefaultValue = false)]
        public long DischargeAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DurationAttributeId
        /// </summary>
        [DataMember(Name = "duration_attribute_id", EmitDefaultValue = false)]
        public long DurationAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets EffectCategory
        /// </summary>
        [DataMember(Name = "effect_category", EmitDefaultValue = false)]
        public long EffectCategory { get; set; }

        /// <summary>
        /// Gets or Sets EffectId
        /// </summary>
        [DataMember(Name = "effect_id", IsRequired = true, EmitDefaultValue = true)]
        public long EffectId { get; set; }

        /// <summary>
        /// Gets or Sets ElectronicChance
        /// </summary>
        [DataMember(Name = "electronic_chance", EmitDefaultValue = true)]
        public bool ElectronicChance { get; set; }

        /// <summary>
        /// Gets or Sets FalloffAttributeId
        /// </summary>
        [DataMember(Name = "falloff_attribute_id", EmitDefaultValue = false)]
        public long FalloffAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets IconId
        /// </summary>
        [DataMember(Name = "icon_id", EmitDefaultValue = false)]
        public long IconId { get; set; }

        /// <summary>
        /// Gets or Sets IsAssistance
        /// </summary>
        [DataMember(Name = "is_assistance", EmitDefaultValue = true)]
        public bool IsAssistance { get; set; }

        /// <summary>
        /// Gets or Sets IsOffensive
        /// </summary>
        [DataMember(Name = "is_offensive", EmitDefaultValue = true)]
        public bool IsOffensive { get; set; }

        /// <summary>
        /// Gets or Sets IsWarpSafe
        /// </summary>
        [DataMember(Name = "is_warp_safe", EmitDefaultValue = true)]
        public bool IsWarpSafe { get; set; }

        /// <summary>
        /// Gets or Sets Modifiers
        /// </summary>
        [DataMember(Name = "modifiers", EmitDefaultValue = false)]
        public List<DogmaEffectsEffectIdGetModifiersInner> Modifiers { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PostExpression
        /// </summary>
        [DataMember(Name = "post_expression", EmitDefaultValue = false)]
        public long PostExpression { get; set; }

        /// <summary>
        /// Gets or Sets PreExpression
        /// </summary>
        [DataMember(Name = "pre_expression", EmitDefaultValue = false)]
        public long PreExpression { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets RangeAttributeId
        /// </summary>
        [DataMember(Name = "range_attribute_id", EmitDefaultValue = false)]
        public long RangeAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets RangeChance
        /// </summary>
        [DataMember(Name = "range_chance", EmitDefaultValue = true)]
        public bool RangeChance { get; set; }

        /// <summary>
        /// Gets or Sets TrackingSpeedAttributeId
        /// </summary>
        [DataMember(Name = "tracking_speed_attribute_id", EmitDefaultValue = false)]
        public long TrackingSpeedAttributeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DogmaEffectsEffectIdGet {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisallowAutoRepeat: ").Append(DisallowAutoRepeat).Append("\n");
            sb.Append("  DischargeAttributeId: ").Append(DischargeAttributeId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DurationAttributeId: ").Append(DurationAttributeId).Append("\n");
            sb.Append("  EffectCategory: ").Append(EffectCategory).Append("\n");
            sb.Append("  EffectId: ").Append(EffectId).Append("\n");
            sb.Append("  ElectronicChance: ").Append(ElectronicChance).Append("\n");
            sb.Append("  FalloffAttributeId: ").Append(FalloffAttributeId).Append("\n");
            sb.Append("  IconId: ").Append(IconId).Append("\n");
            sb.Append("  IsAssistance: ").Append(IsAssistance).Append("\n");
            sb.Append("  IsOffensive: ").Append(IsOffensive).Append("\n");
            sb.Append("  IsWarpSafe: ").Append(IsWarpSafe).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PostExpression: ").Append(PostExpression).Append("\n");
            sb.Append("  PreExpression: ").Append(PreExpression).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  RangeAttributeId: ").Append(RangeAttributeId).Append("\n");
            sb.Append("  RangeChance: ").Append(RangeChance).Append("\n");
            sb.Append("  TrackingSpeedAttributeId: ").Append(TrackingSpeedAttributeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
