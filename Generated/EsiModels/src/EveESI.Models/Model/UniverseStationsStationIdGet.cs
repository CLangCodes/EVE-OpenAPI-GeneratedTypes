/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseStationsStationIdGet
    /// </summary>
    [DataContract(Name = "UniverseStationsStationIdGet")]
    public partial class UniverseStationsStationIdGet
    {
        /// <summary>
        /// service string
        /// </summary>
        /// <value>service string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServicesEnum
        {
            /// <summary>
            /// Enum BountyMissions for value: bounty-missions
            /// </summary>
            [EnumMember(Value = "bounty-missions")]
            BountyMissions = 1,

            /// <summary>
            /// Enum AssasinationMissions for value: assasination-missions
            /// </summary>
            [EnumMember(Value = "assasination-missions")]
            AssasinationMissions = 2,

            /// <summary>
            /// Enum CourierMissions for value: courier-missions
            /// </summary>
            [EnumMember(Value = "courier-missions")]
            CourierMissions = 3,

            /// <summary>
            /// Enum Interbus for value: interbus
            /// </summary>
            [EnumMember(Value = "interbus")]
            Interbus = 4,

            /// <summary>
            /// Enum ReprocessingPlant for value: reprocessing-plant
            /// </summary>
            [EnumMember(Value = "reprocessing-plant")]
            ReprocessingPlant = 5,

            /// <summary>
            /// Enum Refinery for value: refinery
            /// </summary>
            [EnumMember(Value = "refinery")]
            Refinery = 6,

            /// <summary>
            /// Enum Market for value: market
            /// </summary>
            [EnumMember(Value = "market")]
            Market = 7,

            /// <summary>
            /// Enum BlackMarket for value: black-market
            /// </summary>
            [EnumMember(Value = "black-market")]
            BlackMarket = 8,

            /// <summary>
            /// Enum StockExchange for value: stock-exchange
            /// </summary>
            [EnumMember(Value = "stock-exchange")]
            StockExchange = 9,

            /// <summary>
            /// Enum Cloning for value: cloning
            /// </summary>
            [EnumMember(Value = "cloning")]
            Cloning = 10,

            /// <summary>
            /// Enum Surgery for value: surgery
            /// </summary>
            [EnumMember(Value = "surgery")]
            Surgery = 11,

            /// <summary>
            /// Enum DnaTherapy for value: dna-therapy
            /// </summary>
            [EnumMember(Value = "dna-therapy")]
            DnaTherapy = 12,

            /// <summary>
            /// Enum RepairFacilities for value: repair-facilities
            /// </summary>
            [EnumMember(Value = "repair-facilities")]
            RepairFacilities = 13,

            /// <summary>
            /// Enum Factory for value: factory
            /// </summary>
            [EnumMember(Value = "factory")]
            Factory = 14,

            /// <summary>
            /// Enum Labratory for value: labratory
            /// </summary>
            [EnumMember(Value = "labratory")]
            Labratory = 15,

            /// <summary>
            /// Enum Gambling for value: gambling
            /// </summary>
            [EnumMember(Value = "gambling")]
            Gambling = 16,

            /// <summary>
            /// Enum Fitting for value: fitting
            /// </summary>
            [EnumMember(Value = "fitting")]
            Fitting = 17,

            /// <summary>
            /// Enum Paintshop for value: paintshop
            /// </summary>
            [EnumMember(Value = "paintshop")]
            Paintshop = 18,

            /// <summary>
            /// Enum News for value: news
            /// </summary>
            [EnumMember(Value = "news")]
            News = 19,

            /// <summary>
            /// Enum Storage for value: storage
            /// </summary>
            [EnumMember(Value = "storage")]
            Storage = 20,

            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 21,

            /// <summary>
            /// Enum Docking for value: docking
            /// </summary>
            [EnumMember(Value = "docking")]
            Docking = 22,

            /// <summary>
            /// Enum OfficeRental for value: office-rental
            /// </summary>
            [EnumMember(Value = "office-rental")]
            OfficeRental = 23,

            /// <summary>
            /// Enum JumpCloneFacility for value: jump-clone-facility
            /// </summary>
            [EnumMember(Value = "jump-clone-facility")]
            JumpCloneFacility = 24,

            /// <summary>
            /// Enum LoyaltyPointStore for value: loyalty-point-store
            /// </summary>
            [EnumMember(Value = "loyalty-point-store")]
            LoyaltyPointStore = 25,

            /// <summary>
            /// Enum NavyOffices for value: navy-offices
            /// </summary>
            [EnumMember(Value = "navy-offices")]
            NavyOffices = 26,

            /// <summary>
            /// Enum SecurityOffices for value: security-offices
            /// </summary>
            [EnumMember(Value = "security-offices")]
            SecurityOffices = 27
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseStationsStationIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseStationsStationIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseStationsStationIdGet" /> class.
        /// </summary>
        /// <param name="maxDockableShipVolume">maxDockableShipVolume (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="officeRentalCost">officeRentalCost (required).</param>
        /// <param name="owner">ID of the corporation that controls this station.</param>
        /// <param name="position">position (required).</param>
        /// <param name="raceId">raceId.</param>
        /// <param name="reprocessingEfficiency">reprocessingEfficiency (required).</param>
        /// <param name="reprocessingStationsTake">reprocessingStationsTake (required).</param>
        /// <param name="services">services (required).</param>
        /// <param name="stationId">stationId (required).</param>
        /// <param name="systemId">The solar system this station is in (required).</param>
        /// <param name="typeId">typeId (required).</param>
        public UniverseStationsStationIdGet(double maxDockableShipVolume = default(double), string name = default(string), double officeRentalCost = default(double), long owner = default(long), CharactersCharacterIdAssetsLocationsPostInnerPosition position = default(CharactersCharacterIdAssetsLocationsPostInnerPosition), long raceId = default(long), double reprocessingEfficiency = default(double), double reprocessingStationsTake = default(double), List<ServicesEnum> services = default(List<ServicesEnum>), long stationId = default(long), long systemId = default(long), long typeId = default(long))
        {
            this.MaxDockableShipVolume = maxDockableShipVolume;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseStationsStationIdGet and cannot be null");
            }
            this.Name = name;
            this.OfficeRentalCost = officeRentalCost;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for UniverseStationsStationIdGet and cannot be null");
            }
            this.Position = position;
            this.ReprocessingEfficiency = reprocessingEfficiency;
            this.ReprocessingStationsTake = reprocessingStationsTake;
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new ArgumentNullException("services is a required property for UniverseStationsStationIdGet and cannot be null");
            }
            this.Services = services;
            this.StationId = stationId;
            this.SystemId = systemId;
            this.TypeId = typeId;
            this.Owner = owner;
            this.RaceId = raceId;
        }

        /// <summary>
        /// Gets or Sets MaxDockableShipVolume
        /// </summary>
        [DataMember(Name = "max_dockable_ship_volume", IsRequired = true, EmitDefaultValue = true)]
        public double MaxDockableShipVolume { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OfficeRentalCost
        /// </summary>
        [DataMember(Name = "office_rental_cost", IsRequired = true, EmitDefaultValue = true)]
        public double OfficeRentalCost { get; set; }

        /// <summary>
        /// ID of the corporation that controls this station
        /// </summary>
        /// <value>ID of the corporation that controls this station</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public long Owner { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public CharactersCharacterIdAssetsLocationsPostInnerPosition Position { get; set; }

        /// <summary>
        /// Gets or Sets RaceId
        /// </summary>
        [DataMember(Name = "race_id", EmitDefaultValue = false)]
        public long RaceId { get; set; }

        /// <summary>
        /// Gets or Sets ReprocessingEfficiency
        /// </summary>
        [DataMember(Name = "reprocessing_efficiency", IsRequired = true, EmitDefaultValue = true)]
        public double ReprocessingEfficiency { get; set; }

        /// <summary>
        /// Gets or Sets ReprocessingStationsTake
        /// </summary>
        [DataMember(Name = "reprocessing_stations_take", IsRequired = true, EmitDefaultValue = true)]
        public double ReprocessingStationsTake { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", IsRequired = true, EmitDefaultValue = true)]
        public List<UniverseStationsStationIdGet.ServicesEnum> Services { get; set; }

        /// <summary>
        /// Gets or Sets StationId
        /// </summary>
        [DataMember(Name = "station_id", IsRequired = true, EmitDefaultValue = true)]
        public long StationId { get; set; }

        /// <summary>
        /// The solar system this station is in
        /// </summary>
        /// <value>The solar system this station is in</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SystemId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseStationsStationIdGet {\n");
            sb.Append("  MaxDockableShipVolume: ").Append(MaxDockableShipVolume).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfficeRentalCost: ").Append(OfficeRentalCost).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  RaceId: ").Append(RaceId).Append("\n");
            sb.Append("  ReprocessingEfficiency: ").Append(ReprocessingEfficiency).Append("\n");
            sb.Append("  ReprocessingStationsTake: ").Append(ReprocessingStationsTake).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
