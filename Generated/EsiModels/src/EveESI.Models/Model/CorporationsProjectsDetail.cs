/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsProjectsDetail
    /// </summary>
    [DataContract(Name = "CorporationsProjectsDetail")]
    public partial class CorporationsProjectsDetail
    {
        /// <summary>
        /// Project&#39;s current state
        /// </summary>
        /// <value>Project&#39;s current state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 2,

            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 3,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 4,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 5,

            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 6
        }


        /// <summary>
        /// Project&#39;s current state
        /// </summary>
        /// <value>Project&#39;s current state</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsProjectsDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetail" /> class.
        /// </summary>
        /// <param name="varConfiguration">varConfiguration (required).</param>
        /// <param name="contribution">Project&#39;s contribution settings.</param>
        /// <param name="creator">Project&#39;s creator (required).</param>
        /// <param name="details">Project&#39;s details (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="lastModified">Moment this project was last modified. Project contributions also count as a modification (required).</param>
        /// <param name="name">Project&#39;s name (required).</param>
        /// <param name="progress">Project&#39;s progress (required).</param>
        /// <param name="reward">Project&#39;s reward.</param>
        /// <param name="state">Project&#39;s current state (required).</param>
        public CorporationsProjectsDetail(CorporationsProjectsDetailConfiguration varConfiguration = default(CorporationsProjectsDetailConfiguration), CorporationsProjectsDetailContribution contribution = default(CorporationsProjectsDetailContribution), CorporationsProjectsDetailCreator creator = default(CorporationsProjectsDetailCreator), CorporationsProjectsDetailDetails details = default(CorporationsProjectsDetailDetails), Guid id = default(Guid), DateTime lastModified = default(DateTime), string name = default(string), CorporationsProjectsDetailProgress progress = default(CorporationsProjectsDetailProgress), CorporationsProjectsDetailReward reward = default(CorporationsProjectsDetailReward), StateEnum state = default(StateEnum))
        {
            // to ensure "varConfiguration" is required (not null)
            if (varConfiguration == null)
            {
                throw new ArgumentNullException("varConfiguration is a required property for CorporationsProjectsDetail and cannot be null");
            }
            this.VarConfiguration = varConfiguration;
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new ArgumentNullException("creator is a required property for CorporationsProjectsDetail and cannot be null");
            }
            this.Creator = creator;
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new ArgumentNullException("details is a required property for CorporationsProjectsDetail and cannot be null");
            }
            this.Details = details;
            this.Id = id;
            this.LastModified = lastModified;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CorporationsProjectsDetail and cannot be null");
            }
            this.Name = name;
            // to ensure "progress" is required (not null)
            if (progress == null)
            {
                throw new ArgumentNullException("progress is a required property for CorporationsProjectsDetail and cannot be null");
            }
            this.Progress = progress;
            this.State = state;
            this.Contribution = contribution;
            this.Reward = reward;
        }

        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name = "configuration", IsRequired = true, EmitDefaultValue = true)]
        public CorporationsProjectsDetailConfiguration VarConfiguration { get; set; }

        /// <summary>
        /// Project&#39;s contribution settings
        /// </summary>
        /// <value>Project&#39;s contribution settings</value>
        [DataMember(Name = "contribution", EmitDefaultValue = false)]
        public CorporationsProjectsDetailContribution Contribution { get; set; }

        /// <summary>
        /// Project&#39;s creator
        /// </summary>
        /// <value>Project&#39;s creator</value>
        [DataMember(Name = "creator", IsRequired = true, EmitDefaultValue = true)]
        public CorporationsProjectsDetailCreator Creator { get; set; }

        /// <summary>
        /// Project&#39;s details
        /// </summary>
        /// <value>Project&#39;s details</value>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = true)]
        public CorporationsProjectsDetailDetails Details { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Moment this project was last modified. Project contributions also count as a modification
        /// </summary>
        /// <value>Moment this project was last modified. Project contributions also count as a modification</value>
        [DataMember(Name = "last_modified", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Project&#39;s name
        /// </summary>
        /// <value>Project&#39;s name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Project&#39;s progress
        /// </summary>
        /// <value>Project&#39;s progress</value>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = true)]
        public CorporationsProjectsDetailProgress Progress { get; set; }

        /// <summary>
        /// Project&#39;s reward
        /// </summary>
        /// <value>Project&#39;s reward</value>
        [DataMember(Name = "reward", EmitDefaultValue = false)]
        public CorporationsProjectsDetailReward Reward { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsProjectsDetail {\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  Contribution: ").Append(Contribution).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
