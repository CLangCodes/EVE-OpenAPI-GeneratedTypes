/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdWalletJournalGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdWalletJournalGet_inner")]
    public partial class CharactersCharacterIdWalletJournalGetInner
    {
        /// <summary>
        /// The type of the given context_id if present
        /// </summary>
        /// <value>The type of the given context_id if present</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContextIdTypeEnum
        {
            /// <summary>
            /// Enum StructureId for value: structure_id
            /// </summary>
            [EnumMember(Value = "structure_id")]
            StructureId = 1,

            /// <summary>
            /// Enum StationId for value: station_id
            /// </summary>
            [EnumMember(Value = "station_id")]
            StationId = 2,

            /// <summary>
            /// Enum MarketTransactionId for value: market_transaction_id
            /// </summary>
            [EnumMember(Value = "market_transaction_id")]
            MarketTransactionId = 3,

            /// <summary>
            /// Enum CharacterId for value: character_id
            /// </summary>
            [EnumMember(Value = "character_id")]
            CharacterId = 4,

            /// <summary>
            /// Enum CorporationId for value: corporation_id
            /// </summary>
            [EnumMember(Value = "corporation_id")]
            CorporationId = 5,

            /// <summary>
            /// Enum AllianceId for value: alliance_id
            /// </summary>
            [EnumMember(Value = "alliance_id")]
            AllianceId = 6,

            /// <summary>
            /// Enum EveSystem for value: eve_system
            /// </summary>
            [EnumMember(Value = "eve_system")]
            EveSystem = 7,

            /// <summary>
            /// Enum IndustryJobId for value: industry_job_id
            /// </summary>
            [EnumMember(Value = "industry_job_id")]
            IndustryJobId = 8,

            /// <summary>
            /// Enum ContractId for value: contract_id
            /// </summary>
            [EnumMember(Value = "contract_id")]
            ContractId = 9,

            /// <summary>
            /// Enum PlanetId for value: planet_id
            /// </summary>
            [EnumMember(Value = "planet_id")]
            PlanetId = 10,

            /// <summary>
            /// Enum SystemId for value: system_id
            /// </summary>
            [EnumMember(Value = "system_id")]
            SystemId = 11,

            /// <summary>
            /// Enum TypeId for value: type_id
            /// </summary>
            [EnumMember(Value = "type_id")]
            TypeId = 12
        }


        /// <summary>
        /// The type of the given context_id if present
        /// </summary>
        /// <value>The type of the given context_id if present</value>
        [DataMember(Name = "context_id_type", EmitDefaultValue = false)]
        public ContextIdTypeEnum? ContextIdType { get; set; }
        /// <summary>
        /// \&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes.\&quot;
        /// </summary>
        /// <value>\&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes.\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefTypeEnum
        {
            /// <summary>
            /// Enum AccelerationGateFee for value: acceleration_gate_fee
            /// </summary>
            [EnumMember(Value = "acceleration_gate_fee")]
            AccelerationGateFee = 1,

            /// <summary>
            /// Enum AdvertisementListingFee for value: advertisement_listing_fee
            /// </summary>
            [EnumMember(Value = "advertisement_listing_fee")]
            AdvertisementListingFee = 2,

            /// <summary>
            /// Enum AgentDonation for value: agent_donation
            /// </summary>
            [EnumMember(Value = "agent_donation")]
            AgentDonation = 3,

            /// <summary>
            /// Enum AgentLocationServices for value: agent_location_services
            /// </summary>
            [EnumMember(Value = "agent_location_services")]
            AgentLocationServices = 4,

            /// <summary>
            /// Enum AgentMiscellaneous for value: agent_miscellaneous
            /// </summary>
            [EnumMember(Value = "agent_miscellaneous")]
            AgentMiscellaneous = 5,

            /// <summary>
            /// Enum AgentMissionCollateralPaid for value: agent_mission_collateral_paid
            /// </summary>
            [EnumMember(Value = "agent_mission_collateral_paid")]
            AgentMissionCollateralPaid = 6,

            /// <summary>
            /// Enum AgentMissionCollateralRefunded for value: agent_mission_collateral_refunded
            /// </summary>
            [EnumMember(Value = "agent_mission_collateral_refunded")]
            AgentMissionCollateralRefunded = 7,

            /// <summary>
            /// Enum AgentMissionReward for value: agent_mission_reward
            /// </summary>
            [EnumMember(Value = "agent_mission_reward")]
            AgentMissionReward = 8,

            /// <summary>
            /// Enum AgentMissionRewardCorporationTax for value: agent_mission_reward_corporation_tax
            /// </summary>
            [EnumMember(Value = "agent_mission_reward_corporation_tax")]
            AgentMissionRewardCorporationTax = 9,

            /// <summary>
            /// Enum AgentMissionTimeBonusReward for value: agent_mission_time_bonus_reward
            /// </summary>
            [EnumMember(Value = "agent_mission_time_bonus_reward")]
            AgentMissionTimeBonusReward = 10,

            /// <summary>
            /// Enum AgentMissionTimeBonusRewardCorporationTax for value: agent_mission_time_bonus_reward_corporation_tax
            /// </summary>
            [EnumMember(Value = "agent_mission_time_bonus_reward_corporation_tax")]
            AgentMissionTimeBonusRewardCorporationTax = 11,

            /// <summary>
            /// Enum AgentSecurityServices for value: agent_security_services
            /// </summary>
            [EnumMember(Value = "agent_security_services")]
            AgentSecurityServices = 12,

            /// <summary>
            /// Enum AgentServicesRendered for value: agent_services_rendered
            /// </summary>
            [EnumMember(Value = "agent_services_rendered")]
            AgentServicesRendered = 13,

            /// <summary>
            /// Enum AgentsPreward for value: agents_preward
            /// </summary>
            [EnumMember(Value = "agents_preward")]
            AgentsPreward = 14,

            /// <summary>
            /// Enum AirCareerProgramReward for value: air_career_program_reward
            /// </summary>
            [EnumMember(Value = "air_career_program_reward")]
            AirCareerProgramReward = 15,

            /// <summary>
            /// Enum AllianceMaintainanceFee for value: alliance_maintainance_fee
            /// </summary>
            [EnumMember(Value = "alliance_maintainance_fee")]
            AllianceMaintainanceFee = 16,

            /// <summary>
            /// Enum AllianceRegistrationFee for value: alliance_registration_fee
            /// </summary>
            [EnumMember(Value = "alliance_registration_fee")]
            AllianceRegistrationFee = 17,

            /// <summary>
            /// Enum AllignmentBasedGateToll for value: allignment_based_gate_toll
            /// </summary>
            [EnumMember(Value = "allignment_based_gate_toll")]
            AllignmentBasedGateToll = 18,

            /// <summary>
            /// Enum AssetSafetyRecoveryTax for value: asset_safety_recovery_tax
            /// </summary>
            [EnumMember(Value = "asset_safety_recovery_tax")]
            AssetSafetyRecoveryTax = 19,

            /// <summary>
            /// Enum Bounty for value: bounty
            /// </summary>
            [EnumMember(Value = "bounty")]
            Bounty = 20,

            /// <summary>
            /// Enum BountyPrize for value: bounty_prize
            /// </summary>
            [EnumMember(Value = "bounty_prize")]
            BountyPrize = 21,

            /// <summary>
            /// Enum BountyPrizeCorporationTax for value: bounty_prize_corporation_tax
            /// </summary>
            [EnumMember(Value = "bounty_prize_corporation_tax")]
            BountyPrizeCorporationTax = 22,

            /// <summary>
            /// Enum BountyPrizes for value: bounty_prizes
            /// </summary>
            [EnumMember(Value = "bounty_prizes")]
            BountyPrizes = 23,

            /// <summary>
            /// Enum BountyReimbursement for value: bounty_reimbursement
            /// </summary>
            [EnumMember(Value = "bounty_reimbursement")]
            BountyReimbursement = 24,

            /// <summary>
            /// Enum BountySurcharge for value: bounty_surcharge
            /// </summary>
            [EnumMember(Value = "bounty_surcharge")]
            BountySurcharge = 25,

            /// <summary>
            /// Enum BrokersFee for value: brokers_fee
            /// </summary>
            [EnumMember(Value = "brokers_fee")]
            BrokersFee = 26,

            /// <summary>
            /// Enum CloneActivation for value: clone_activation
            /// </summary>
            [EnumMember(Value = "clone_activation")]
            CloneActivation = 27,

            /// <summary>
            /// Enum CloneTransfer for value: clone_transfer
            /// </summary>
            [EnumMember(Value = "clone_transfer")]
            CloneTransfer = 28,

            /// <summary>
            /// Enum ContrabandFine for value: contraband_fine
            /// </summary>
            [EnumMember(Value = "contraband_fine")]
            ContrabandFine = 29,

            /// <summary>
            /// Enum ContractAuctionBid for value: contract_auction_bid
            /// </summary>
            [EnumMember(Value = "contract_auction_bid")]
            ContractAuctionBid = 30,

            /// <summary>
            /// Enum ContractAuctionBidCorp for value: contract_auction_bid_corp
            /// </summary>
            [EnumMember(Value = "contract_auction_bid_corp")]
            ContractAuctionBidCorp = 31,

            /// <summary>
            /// Enum ContractAuctionBidRefund for value: contract_auction_bid_refund
            /// </summary>
            [EnumMember(Value = "contract_auction_bid_refund")]
            ContractAuctionBidRefund = 32,

            /// <summary>
            /// Enum ContractAuctionSold for value: contract_auction_sold
            /// </summary>
            [EnumMember(Value = "contract_auction_sold")]
            ContractAuctionSold = 33,

            /// <summary>
            /// Enum ContractBrokersFee for value: contract_brokers_fee
            /// </summary>
            [EnumMember(Value = "contract_brokers_fee")]
            ContractBrokersFee = 34,

            /// <summary>
            /// Enum ContractBrokersFeeCorp for value: contract_brokers_fee_corp
            /// </summary>
            [EnumMember(Value = "contract_brokers_fee_corp")]
            ContractBrokersFeeCorp = 35,

            /// <summary>
            /// Enum ContractCollateral for value: contract_collateral
            /// </summary>
            [EnumMember(Value = "contract_collateral")]
            ContractCollateral = 36,

            /// <summary>
            /// Enum ContractCollateralDepositedCorp for value: contract_collateral_deposited_corp
            /// </summary>
            [EnumMember(Value = "contract_collateral_deposited_corp")]
            ContractCollateralDepositedCorp = 37,

            /// <summary>
            /// Enum ContractCollateralPayout for value: contract_collateral_payout
            /// </summary>
            [EnumMember(Value = "contract_collateral_payout")]
            ContractCollateralPayout = 38,

            /// <summary>
            /// Enum ContractCollateralRefund for value: contract_collateral_refund
            /// </summary>
            [EnumMember(Value = "contract_collateral_refund")]
            ContractCollateralRefund = 39,

            /// <summary>
            /// Enum ContractDeposit for value: contract_deposit
            /// </summary>
            [EnumMember(Value = "contract_deposit")]
            ContractDeposit = 40,

            /// <summary>
            /// Enum ContractDepositCorp for value: contract_deposit_corp
            /// </summary>
            [EnumMember(Value = "contract_deposit_corp")]
            ContractDepositCorp = 41,

            /// <summary>
            /// Enum ContractDepositRefund for value: contract_deposit_refund
            /// </summary>
            [EnumMember(Value = "contract_deposit_refund")]
            ContractDepositRefund = 42,

            /// <summary>
            /// Enum ContractDepositSalesTax for value: contract_deposit_sales_tax
            /// </summary>
            [EnumMember(Value = "contract_deposit_sales_tax")]
            ContractDepositSalesTax = 43,

            /// <summary>
            /// Enum ContractPrice for value: contract_price
            /// </summary>
            [EnumMember(Value = "contract_price")]
            ContractPrice = 44,

            /// <summary>
            /// Enum ContractPricePaymentCorp for value: contract_price_payment_corp
            /// </summary>
            [EnumMember(Value = "contract_price_payment_corp")]
            ContractPricePaymentCorp = 45,

            /// <summary>
            /// Enum ContractReversal for value: contract_reversal
            /// </summary>
            [EnumMember(Value = "contract_reversal")]
            ContractReversal = 46,

            /// <summary>
            /// Enum ContractReward for value: contract_reward
            /// </summary>
            [EnumMember(Value = "contract_reward")]
            ContractReward = 47,

            /// <summary>
            /// Enum ContractRewardDeposited for value: contract_reward_deposited
            /// </summary>
            [EnumMember(Value = "contract_reward_deposited")]
            ContractRewardDeposited = 48,

            /// <summary>
            /// Enum ContractRewardDepositedCorp for value: contract_reward_deposited_corp
            /// </summary>
            [EnumMember(Value = "contract_reward_deposited_corp")]
            ContractRewardDepositedCorp = 49,

            /// <summary>
            /// Enum ContractRewardRefund for value: contract_reward_refund
            /// </summary>
            [EnumMember(Value = "contract_reward_refund")]
            ContractRewardRefund = 50,

            /// <summary>
            /// Enum ContractSalesTax for value: contract_sales_tax
            /// </summary>
            [EnumMember(Value = "contract_sales_tax")]
            ContractSalesTax = 51,

            /// <summary>
            /// Enum Copying for value: copying
            /// </summary>
            [EnumMember(Value = "copying")]
            Copying = 52,

            /// <summary>
            /// Enum CorporateRewardPayout for value: corporate_reward_payout
            /// </summary>
            [EnumMember(Value = "corporate_reward_payout")]
            CorporateRewardPayout = 53,

            /// <summary>
            /// Enum CorporateRewardTax for value: corporate_reward_tax
            /// </summary>
            [EnumMember(Value = "corporate_reward_tax")]
            CorporateRewardTax = 54,

            /// <summary>
            /// Enum CorporationAccountWithdrawal for value: corporation_account_withdrawal
            /// </summary>
            [EnumMember(Value = "corporation_account_withdrawal")]
            CorporationAccountWithdrawal = 55,

            /// <summary>
            /// Enum CorporationBulkPayment for value: corporation_bulk_payment
            /// </summary>
            [EnumMember(Value = "corporation_bulk_payment")]
            CorporationBulkPayment = 56,

            /// <summary>
            /// Enum CorporationDividendPayment for value: corporation_dividend_payment
            /// </summary>
            [EnumMember(Value = "corporation_dividend_payment")]
            CorporationDividendPayment = 57,

            /// <summary>
            /// Enum CorporationLiquidation for value: corporation_liquidation
            /// </summary>
            [EnumMember(Value = "corporation_liquidation")]
            CorporationLiquidation = 58,

            /// <summary>
            /// Enum CorporationLogoChangeCost for value: corporation_logo_change_cost
            /// </summary>
            [EnumMember(Value = "corporation_logo_change_cost")]
            CorporationLogoChangeCost = 59,

            /// <summary>
            /// Enum CorporationPayment for value: corporation_payment
            /// </summary>
            [EnumMember(Value = "corporation_payment")]
            CorporationPayment = 60,

            /// <summary>
            /// Enum CorporationRegistrationFee for value: corporation_registration_fee
            /// </summary>
            [EnumMember(Value = "corporation_registration_fee")]
            CorporationRegistrationFee = 61,

            /// <summary>
            /// Enum CosmeticMarketComponentItemPurchase for value: cosmetic_market_component_item_purchase
            /// </summary>
            [EnumMember(Value = "cosmetic_market_component_item_purchase")]
            CosmeticMarketComponentItemPurchase = 62,

            /// <summary>
            /// Enum CosmeticMarketSkinPurchase for value: cosmetic_market_skin_purchase
            /// </summary>
            [EnumMember(Value = "cosmetic_market_skin_purchase")]
            CosmeticMarketSkinPurchase = 63,

            /// <summary>
            /// Enum CosmeticMarketSkinSale for value: cosmetic_market_skin_sale
            /// </summary>
            [EnumMember(Value = "cosmetic_market_skin_sale")]
            CosmeticMarketSkinSale = 64,

            /// <summary>
            /// Enum CosmeticMarketSkinSaleBrokerFee for value: cosmetic_market_skin_sale_broker_fee
            /// </summary>
            [EnumMember(Value = "cosmetic_market_skin_sale_broker_fee")]
            CosmeticMarketSkinSaleBrokerFee = 65,

            /// <summary>
            /// Enum CosmeticMarketSkinSaleTax for value: cosmetic_market_skin_sale_tax
            /// </summary>
            [EnumMember(Value = "cosmetic_market_skin_sale_tax")]
            CosmeticMarketSkinSaleTax = 66,

            /// <summary>
            /// Enum CosmeticMarketSkinTransaction for value: cosmetic_market_skin_transaction
            /// </summary>
            [EnumMember(Value = "cosmetic_market_skin_transaction")]
            CosmeticMarketSkinTransaction = 67,

            /// <summary>
            /// Enum CourierMissionEscrow for value: courier_mission_escrow
            /// </summary>
            [EnumMember(Value = "courier_mission_escrow")]
            CourierMissionEscrow = 68,

            /// <summary>
            /// Enum Cspa for value: cspa
            /// </summary>
            [EnumMember(Value = "cspa")]
            Cspa = 69,

            /// <summary>
            /// Enum Cspaofflinerefund for value: cspaofflinerefund
            /// </summary>
            [EnumMember(Value = "cspaofflinerefund")]
            Cspaofflinerefund = 70,

            /// <summary>
            /// Enum DailyChallengeReward for value: daily_challenge_reward
            /// </summary>
            [EnumMember(Value = "daily_challenge_reward")]
            DailyChallengeReward = 71,

            /// <summary>
            /// Enum DailyGoalPayouts for value: daily_goal_payouts
            /// </summary>
            [EnumMember(Value = "daily_goal_payouts")]
            DailyGoalPayouts = 72,

            /// <summary>
            /// Enum DailyGoalPayoutsTax for value: daily_goal_payouts_tax
            /// </summary>
            [EnumMember(Value = "daily_goal_payouts_tax")]
            DailyGoalPayoutsTax = 73,

            /// <summary>
            /// Enum DatacoreFee for value: datacore_fee
            /// </summary>
            [EnumMember(Value = "datacore_fee")]
            DatacoreFee = 74,

            /// <summary>
            /// Enum DnaModificationFee for value: dna_modification_fee
            /// </summary>
            [EnumMember(Value = "dna_modification_fee")]
            DnaModificationFee = 75,

            /// <summary>
            /// Enum DockingFee for value: docking_fee
            /// </summary>
            [EnumMember(Value = "docking_fee")]
            DockingFee = 76,

            /// <summary>
            /// Enum DuelWagerEscrow for value: duel_wager_escrow
            /// </summary>
            [EnumMember(Value = "duel_wager_escrow")]
            DuelWagerEscrow = 77,

            /// <summary>
            /// Enum DuelWagerPayment for value: duel_wager_payment
            /// </summary>
            [EnumMember(Value = "duel_wager_payment")]
            DuelWagerPayment = 78,

            /// <summary>
            /// Enum DuelWagerRefund for value: duel_wager_refund
            /// </summary>
            [EnumMember(Value = "duel_wager_refund")]
            DuelWagerRefund = 79,

            /// <summary>
            /// Enum EssEscrowTransfer for value: ess_escrow_transfer
            /// </summary>
            [EnumMember(Value = "ess_escrow_transfer")]
            EssEscrowTransfer = 80,

            /// <summary>
            /// Enum ExternalTradeDelivery for value: external_trade_delivery
            /// </summary>
            [EnumMember(Value = "external_trade_delivery")]
            ExternalTradeDelivery = 81,

            /// <summary>
            /// Enum ExternalTradeFreeze for value: external_trade_freeze
            /// </summary>
            [EnumMember(Value = "external_trade_freeze")]
            ExternalTradeFreeze = 82,

            /// <summary>
            /// Enum ExternalTradeThaw for value: external_trade_thaw
            /// </summary>
            [EnumMember(Value = "external_trade_thaw")]
            ExternalTradeThaw = 83,

            /// <summary>
            /// Enum FactorySlotRentalFee for value: factory_slot_rental_fee
            /// </summary>
            [EnumMember(Value = "factory_slot_rental_fee")]
            FactorySlotRentalFee = 84,

            /// <summary>
            /// Enum FluxPayout for value: flux_payout
            /// </summary>
            [EnumMember(Value = "flux_payout")]
            FluxPayout = 85,

            /// <summary>
            /// Enum FluxTax for value: flux_tax
            /// </summary>
            [EnumMember(Value = "flux_tax")]
            FluxTax = 86,

            /// <summary>
            /// Enum FluxTicketRepayment for value: flux_ticket_repayment
            /// </summary>
            [EnumMember(Value = "flux_ticket_repayment")]
            FluxTicketRepayment = 87,

            /// <summary>
            /// Enum FluxTicketSale for value: flux_ticket_sale
            /// </summary>
            [EnumMember(Value = "flux_ticket_sale")]
            FluxTicketSale = 88,

            /// <summary>
            /// Enum FreelanceJobsBroadcastingFee for value: freelance_jobs_broadcasting_fee
            /// </summary>
            [EnumMember(Value = "freelance_jobs_broadcasting_fee")]
            FreelanceJobsBroadcastingFee = 89,

            /// <summary>
            /// Enum FreelanceJobsDurationFee for value: freelance_jobs_duration_fee
            /// </summary>
            [EnumMember(Value = "freelance_jobs_duration_fee")]
            FreelanceJobsDurationFee = 90,

            /// <summary>
            /// Enum FreelanceJobsEscrowRefund for value: freelance_jobs_escrow_refund
            /// </summary>
            [EnumMember(Value = "freelance_jobs_escrow_refund")]
            FreelanceJobsEscrowRefund = 91,

            /// <summary>
            /// Enum FreelanceJobsReward for value: freelance_jobs_reward
            /// </summary>
            [EnumMember(Value = "freelance_jobs_reward")]
            FreelanceJobsReward = 92,

            /// <summary>
            /// Enum FreelanceJobsRewardCorporationTax for value: freelance_jobs_reward_corporation_tax
            /// </summary>
            [EnumMember(Value = "freelance_jobs_reward_corporation_tax")]
            FreelanceJobsRewardCorporationTax = 93,

            /// <summary>
            /// Enum FreelanceJobsRewardEscrow for value: freelance_jobs_reward_escrow
            /// </summary>
            [EnumMember(Value = "freelance_jobs_reward_escrow")]
            FreelanceJobsRewardEscrow = 94,

            /// <summary>
            /// Enum GmCashTransfer for value: gm_cash_transfer
            /// </summary>
            [EnumMember(Value = "gm_cash_transfer")]
            GmCashTransfer = 95,

            /// <summary>
            /// Enum GmPlexFeeRefund for value: gm_plex_fee_refund
            /// </summary>
            [EnumMember(Value = "gm_plex_fee_refund")]
            GmPlexFeeRefund = 96,

            /// <summary>
            /// Enum IndustryJobTax for value: industry_job_tax
            /// </summary>
            [EnumMember(Value = "industry_job_tax")]
            IndustryJobTax = 97,

            /// <summary>
            /// Enum InfrastructureHubMaintenance for value: infrastructure_hub_maintenance
            /// </summary>
            [EnumMember(Value = "infrastructure_hub_maintenance")]
            InfrastructureHubMaintenance = 98,

            /// <summary>
            /// Enum Inheritance for value: inheritance
            /// </summary>
            [EnumMember(Value = "inheritance")]
            Inheritance = 99,

            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 100,

            /// <summary>
            /// Enum InsurgencyCorruptionContributionReward for value: insurgency_corruption_contribution_reward
            /// </summary>
            [EnumMember(Value = "insurgency_corruption_contribution_reward")]
            InsurgencyCorruptionContributionReward = 101,

            /// <summary>
            /// Enum InsurgencySuppressionContributionReward for value: insurgency_suppression_contribution_reward
            /// </summary>
            [EnumMember(Value = "insurgency_suppression_contribution_reward")]
            InsurgencySuppressionContributionReward = 102,

            /// <summary>
            /// Enum ItemTraderPayment for value: item_trader_payment
            /// </summary>
            [EnumMember(Value = "item_trader_payment")]
            ItemTraderPayment = 103,

            /// <summary>
            /// Enum JumpCloneActivationFee for value: jump_clone_activation_fee
            /// </summary>
            [EnumMember(Value = "jump_clone_activation_fee")]
            JumpCloneActivationFee = 104,

            /// <summary>
            /// Enum JumpCloneInstallationFee for value: jump_clone_installation_fee
            /// </summary>
            [EnumMember(Value = "jump_clone_installation_fee")]
            JumpCloneInstallationFee = 105,

            /// <summary>
            /// Enum KillRightFee for value: kill_right_fee
            /// </summary>
            [EnumMember(Value = "kill_right_fee")]
            KillRightFee = 106,

            /// <summary>
            /// Enum LpStore for value: lp_store
            /// </summary>
            [EnumMember(Value = "lp_store")]
            LpStore = 107,

            /// <summary>
            /// Enum Manufacturing for value: manufacturing
            /// </summary>
            [EnumMember(Value = "manufacturing")]
            Manufacturing = 108,

            /// <summary>
            /// Enum MarketEscrow for value: market_escrow
            /// </summary>
            [EnumMember(Value = "market_escrow")]
            MarketEscrow = 109,

            /// <summary>
            /// Enum MarketFinePaid for value: market_fine_paid
            /// </summary>
            [EnumMember(Value = "market_fine_paid")]
            MarketFinePaid = 110,

            /// <summary>
            /// Enum MarketProviderTax for value: market_provider_tax
            /// </summary>
            [EnumMember(Value = "market_provider_tax")]
            MarketProviderTax = 111,

            /// <summary>
            /// Enum MarketTransaction for value: market_transaction
            /// </summary>
            [EnumMember(Value = "market_transaction")]
            MarketTransaction = 112,

            /// <summary>
            /// Enum MedalCreation for value: medal_creation
            /// </summary>
            [EnumMember(Value = "medal_creation")]
            MedalCreation = 113,

            /// <summary>
            /// Enum MedalIssued for value: medal_issued
            /// </summary>
            [EnumMember(Value = "medal_issued")]
            MedalIssued = 114,

            /// <summary>
            /// Enum MilestoneRewardPayment for value: milestone_reward_payment
            /// </summary>
            [EnumMember(Value = "milestone_reward_payment")]
            MilestoneRewardPayment = 115,

            /// <summary>
            /// Enum MissionCompletion for value: mission_completion
            /// </summary>
            [EnumMember(Value = "mission_completion")]
            MissionCompletion = 116,

            /// <summary>
            /// Enum MissionCost for value: mission_cost
            /// </summary>
            [EnumMember(Value = "mission_cost")]
            MissionCost = 117,

            /// <summary>
            /// Enum MissionExpiration for value: mission_expiration
            /// </summary>
            [EnumMember(Value = "mission_expiration")]
            MissionExpiration = 118,

            /// <summary>
            /// Enum MissionReward for value: mission_reward
            /// </summary>
            [EnumMember(Value = "mission_reward")]
            MissionReward = 119,

            /// <summary>
            /// Enum OfficeRentalFee for value: office_rental_fee
            /// </summary>
            [EnumMember(Value = "office_rental_fee")]
            OfficeRentalFee = 120,

            /// <summary>
            /// Enum OperationBonus for value: operation_bonus
            /// </summary>
            [EnumMember(Value = "operation_bonus")]
            OperationBonus = 121,

            /// <summary>
            /// Enum OpportunityReward for value: opportunity_reward
            /// </summary>
            [EnumMember(Value = "opportunity_reward")]
            OpportunityReward = 122,

            /// <summary>
            /// Enum PlanetaryConstruction for value: planetary_construction
            /// </summary>
            [EnumMember(Value = "planetary_construction")]
            PlanetaryConstruction = 123,

            /// <summary>
            /// Enum PlanetaryExportTax for value: planetary_export_tax
            /// </summary>
            [EnumMember(Value = "planetary_export_tax")]
            PlanetaryExportTax = 124,

            /// <summary>
            /// Enum PlanetaryImportTax for value: planetary_import_tax
            /// </summary>
            [EnumMember(Value = "planetary_import_tax")]
            PlanetaryImportTax = 125,

            /// <summary>
            /// Enum PlayerDonation for value: player_donation
            /// </summary>
            [EnumMember(Value = "player_donation")]
            PlayerDonation = 126,

            /// <summary>
            /// Enum PlayerTrading for value: player_trading
            /// </summary>
            [EnumMember(Value = "player_trading")]
            PlayerTrading = 127,

            /// <summary>
            /// Enum ProjectDiscoveryReward for value: project_discovery_reward
            /// </summary>
            [EnumMember(Value = "project_discovery_reward")]
            ProjectDiscoveryReward = 128,

            /// <summary>
            /// Enum ProjectDiscoveryTax for value: project_discovery_tax
            /// </summary>
            [EnumMember(Value = "project_discovery_tax")]
            ProjectDiscoveryTax = 129,

            /// <summary>
            /// Enum ProjectPayouts for value: project_payouts
            /// </summary>
            [EnumMember(Value = "project_payouts")]
            ProjectPayouts = 130,

            /// <summary>
            /// Enum Reaction for value: reaction
            /// </summary>
            [EnumMember(Value = "reaction")]
            Reaction = 131,

            /// <summary>
            /// Enum RedeemedIskToken for value: redeemed_isk_token
            /// </summary>
            [EnumMember(Value = "redeemed_isk_token")]
            RedeemedIskToken = 132,

            /// <summary>
            /// Enum ReleaseOfImpoundedProperty for value: release_of_impounded_property
            /// </summary>
            [EnumMember(Value = "release_of_impounded_property")]
            ReleaseOfImpoundedProperty = 133,

            /// <summary>
            /// Enum RepairBill for value: repair_bill
            /// </summary>
            [EnumMember(Value = "repair_bill")]
            RepairBill = 134,

            /// <summary>
            /// Enum ReprocessingTax for value: reprocessing_tax
            /// </summary>
            [EnumMember(Value = "reprocessing_tax")]
            ReprocessingTax = 135,

            /// <summary>
            /// Enum ResearchingMaterialProductivity for value: researching_material_productivity
            /// </summary>
            [EnumMember(Value = "researching_material_productivity")]
            ResearchingMaterialProductivity = 136,

            /// <summary>
            /// Enum ResearchingTechnology for value: researching_technology
            /// </summary>
            [EnumMember(Value = "researching_technology")]
            ResearchingTechnology = 137,

            /// <summary>
            /// Enum ResearchingTimeProductivity for value: researching_time_productivity
            /// </summary>
            [EnumMember(Value = "researching_time_productivity")]
            ResearchingTimeProductivity = 138,

            /// <summary>
            /// Enum ResourceWarsReward for value: resource_wars_reward
            /// </summary>
            [EnumMember(Value = "resource_wars_reward")]
            ResourceWarsReward = 139,

            /// <summary>
            /// Enum ReverseEngineering for value: reverse_engineering
            /// </summary>
            [EnumMember(Value = "reverse_engineering")]
            ReverseEngineering = 140,

            /// <summary>
            /// Enum SeasonChallengeReward for value: season_challenge_reward
            /// </summary>
            [EnumMember(Value = "season_challenge_reward")]
            SeasonChallengeReward = 141,

            /// <summary>
            /// Enum SecurityProcessingFee for value: security_processing_fee
            /// </summary>
            [EnumMember(Value = "security_processing_fee")]
            SecurityProcessingFee = 142,

            /// <summary>
            /// Enum Shares for value: shares
            /// </summary>
            [EnumMember(Value = "shares")]
            Shares = 143,

            /// <summary>
            /// Enum SkillPurchase for value: skill_purchase
            /// </summary>
            [EnumMember(Value = "skill_purchase")]
            SkillPurchase = 144,

            /// <summary>
            /// Enum SkyhookClaimFee for value: skyhook_claim_fee
            /// </summary>
            [EnumMember(Value = "skyhook_claim_fee")]
            SkyhookClaimFee = 145,

            /// <summary>
            /// Enum SovereignityBill for value: sovereignity_bill
            /// </summary>
            [EnumMember(Value = "sovereignity_bill")]
            SovereignityBill = 146,

            /// <summary>
            /// Enum StorePurchase for value: store_purchase
            /// </summary>
            [EnumMember(Value = "store_purchase")]
            StorePurchase = 147,

            /// <summary>
            /// Enum StorePurchaseRefund for value: store_purchase_refund
            /// </summary>
            [EnumMember(Value = "store_purchase_refund")]
            StorePurchaseRefund = 148,

            /// <summary>
            /// Enum StructureGateJump for value: structure_gate_jump
            /// </summary>
            [EnumMember(Value = "structure_gate_jump")]
            StructureGateJump = 149,

            /// <summary>
            /// Enum TransactionTax for value: transaction_tax
            /// </summary>
            [EnumMember(Value = "transaction_tax")]
            TransactionTax = 150,

            /// <summary>
            /// Enum UnderConstruction for value: under_construction
            /// </summary>
            [EnumMember(Value = "under_construction")]
            UnderConstruction = 151,

            /// <summary>
            /// Enum UpkeepAdjustmentFee for value: upkeep_adjustment_fee
            /// </summary>
            [EnumMember(Value = "upkeep_adjustment_fee")]
            UpkeepAdjustmentFee = 152,

            /// <summary>
            /// Enum WarAllyContract for value: war_ally_contract
            /// </summary>
            [EnumMember(Value = "war_ally_contract")]
            WarAllyContract = 153,

            /// <summary>
            /// Enum WarFee for value: war_fee
            /// </summary>
            [EnumMember(Value = "war_fee")]
            WarFee = 154,

            /// <summary>
            /// Enum WarFeeSurrender for value: war_fee_surrender
            /// </summary>
            [EnumMember(Value = "war_fee_surrender")]
            WarFeeSurrender = 155
        }


        /// <summary>
        /// \&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes.\&quot;
        /// </summary>
        /// <value>\&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes.\&quot;</value>
        [DataMember(Name = "ref_type", IsRequired = true, EmitDefaultValue = true)]
        public RefTypeEnum RefType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdWalletJournalGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdWalletJournalGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdWalletJournalGetInner" /> class.
        /// </summary>
        /// <param name="amount">The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn.</param>
        /// <param name="balance">Wallet balance after transaction occurred.</param>
        /// <param name="contextId">An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id.</param>
        /// <param name="contextIdType">The type of the given context_id if present.</param>
        /// <param name="date">Date and time of transaction (required).</param>
        /// <param name="description">The reason for the transaction, mirrors what is seen in the client (required).</param>
        /// <param name="firstPartyId">The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name.</param>
        /// <param name="id">Unique journal reference ID (required).</param>
        /// <param name="reason">The user stated reason for the transaction. Only applies to some ref_types.</param>
        /// <param name="refType">\&quot;The transaction type for the given. transaction. Different transaction types will populate different attributes.\&quot; (required).</param>
        /// <param name="secondPartyId">The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name.</param>
        /// <param name="tax">Tax amount received. Only applies to tax related transactions.</param>
        /// <param name="taxReceiverId">The corporation ID receiving any tax paid. Only applies to tax related transactions.</param>
        public CharactersCharacterIdWalletJournalGetInner(double amount = default(double), double balance = default(double), long contextId = default(long), ContextIdTypeEnum? contextIdType = default(ContextIdTypeEnum?), DateTime date = default(DateTime), string description = default(string), long firstPartyId = default(long), long id = default(long), string reason = default(string), RefTypeEnum refType = default(RefTypeEnum), long secondPartyId = default(long), double tax = default(double), long taxReceiverId = default(long))
        {
            this.Date = date;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CharactersCharacterIdWalletJournalGetInner and cannot be null");
            }
            this.Description = description;
            this.Id = id;
            this.RefType = refType;
            this.Amount = amount;
            this.Balance = balance;
            this.ContextId = contextId;
            this.ContextIdType = contextIdType;
            this.FirstPartyId = firstPartyId;
            this.Reason = reason;
            this.SecondPartyId = secondPartyId;
            this.Tax = tax;
            this.TaxReceiverId = taxReceiverId;
        }

        /// <summary>
        /// The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
        /// </summary>
        /// <value>The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Wallet balance after transaction occurred
        /// </summary>
        /// <value>Wallet balance after transaction occurred</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public double Balance { get; set; }

        /// <summary>
        /// An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
        /// </summary>
        /// <value>An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id</value>
        [DataMember(Name = "context_id", EmitDefaultValue = false)]
        public long ContextId { get; set; }

        /// <summary>
        /// Date and time of transaction
        /// </summary>
        /// <value>Date and time of transaction</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// The reason for the transaction, mirrors what is seen in the client
        /// </summary>
        /// <value>The reason for the transaction, mirrors what is seen in the client</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
        /// </summary>
        /// <value>The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name</value>
        [DataMember(Name = "first_party_id", EmitDefaultValue = false)]
        public long FirstPartyId { get; set; }

        /// <summary>
        /// Unique journal reference ID
        /// </summary>
        /// <value>Unique journal reference ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// The user stated reason for the transaction. Only applies to some ref_types
        /// </summary>
        /// <value>The user stated reason for the transaction. Only applies to some ref_types</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
        /// </summary>
        /// <value>The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name</value>
        [DataMember(Name = "second_party_id", EmitDefaultValue = false)]
        public long SecondPartyId { get; set; }

        /// <summary>
        /// Tax amount received. Only applies to tax related transactions
        /// </summary>
        /// <value>Tax amount received. Only applies to tax related transactions</value>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public double Tax { get; set; }

        /// <summary>
        /// The corporation ID receiving any tax paid. Only applies to tax related transactions
        /// </summary>
        /// <value>The corporation ID receiving any tax paid. Only applies to tax related transactions</value>
        [DataMember(Name = "tax_receiver_id", EmitDefaultValue = false)]
        public long TaxReceiverId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdWalletJournalGetInner {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  ContextIdType: ").Append(ContextIdType).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FirstPartyId: ").Append(FirstPartyId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RefType: ").Append(RefType).Append("\n");
            sb.Append("  SecondPartyId: ").Append(SecondPartyId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxReceiverId: ").Append(TaxReceiverId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
