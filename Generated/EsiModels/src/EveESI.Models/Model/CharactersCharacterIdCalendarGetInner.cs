/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// event
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdCalendarGet_inner")]
    public partial class CharactersCharacterIdCalendarGetInner
    {
        /// <summary>
        /// Defines EventResponse
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventResponseEnum
        {
            /// <summary>
            /// Enum Declined for value: declined
            /// </summary>
            [EnumMember(Value = "declined")]
            Declined = 1,

            /// <summary>
            /// Enum NotResponded for value: not_responded
            /// </summary>
            [EnumMember(Value = "not_responded")]
            NotResponded = 2,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 3,

            /// <summary>
            /// Enum Tentative for value: tentative
            /// </summary>
            [EnumMember(Value = "tentative")]
            Tentative = 4
        }


        /// <summary>
        /// Gets or Sets EventResponse
        /// </summary>
        [DataMember(Name = "event_response", EmitDefaultValue = false)]
        public EventResponseEnum? EventResponse { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdCalendarGetInner" /> class.
        /// </summary>
        /// <param name="eventDate">eventDate.</param>
        /// <param name="eventId">eventId.</param>
        /// <param name="eventResponse">eventResponse.</param>
        /// <param name="importance">importance.</param>
        /// <param name="title">title.</param>
        public CharactersCharacterIdCalendarGetInner(DateTime eventDate = default(DateTime), long eventId = default(long), EventResponseEnum? eventResponse = default(EventResponseEnum?), long importance = default(long), string title = default(string))
        {
            this.EventDate = eventDate;
            this.EventId = eventId;
            this.EventResponse = eventResponse;
            this.Importance = importance;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name = "event_date", EmitDefaultValue = false)]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name = "event_id", EmitDefaultValue = false)]
        public long EventId { get; set; }

        /// <summary>
        /// Gets or Sets Importance
        /// </summary>
        [DataMember(Name = "importance", EmitDefaultValue = false)]
        public long Importance { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdCalendarGetInner {\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventResponse: ").Append(EventResponse).Append("\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
