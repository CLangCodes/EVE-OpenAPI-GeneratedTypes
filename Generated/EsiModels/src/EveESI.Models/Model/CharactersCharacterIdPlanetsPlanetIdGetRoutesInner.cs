/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// route object
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdPlanetsPlanetIdGet_routes_inner")]
    public partial class CharactersCharacterIdPlanetsPlanetIdGetRoutesInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsPlanetIdGetRoutesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdPlanetsPlanetIdGetRoutesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsPlanetIdGetRoutesInner" /> class.
        /// </summary>
        /// <param name="contentTypeId">contentTypeId (required).</param>
        /// <param name="destinationPinId">destinationPinId (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="routeId">routeId (required).</param>
        /// <param name="sourcePinId">sourcePinId (required).</param>
        /// <param name="waypoints">list of pin ID waypoints.</param>
        public CharactersCharacterIdPlanetsPlanetIdGetRoutesInner(long contentTypeId = default(long), long destinationPinId = default(long), double quantity = default(double), long routeId = default(long), long sourcePinId = default(long), List<long> waypoints = default(List<long>))
        {
            this.ContentTypeId = contentTypeId;
            this.DestinationPinId = destinationPinId;
            this.Quantity = quantity;
            this.RouteId = routeId;
            this.SourcePinId = sourcePinId;
            this.Waypoints = waypoints;
        }

        /// <summary>
        /// Gets or Sets ContentTypeId
        /// </summary>
        [DataMember(Name = "content_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long ContentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationPinId
        /// </summary>
        [DataMember(Name = "destination_pin_id", IsRequired = true, EmitDefaultValue = true)]
        public long DestinationPinId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public double Quantity { get; set; }

        /// <summary>
        /// Gets or Sets RouteId
        /// </summary>
        [DataMember(Name = "route_id", IsRequired = true, EmitDefaultValue = true)]
        public long RouteId { get; set; }

        /// <summary>
        /// Gets or Sets SourcePinId
        /// </summary>
        [DataMember(Name = "source_pin_id", IsRequired = true, EmitDefaultValue = true)]
        public long SourcePinId { get; set; }

        /// <summary>
        /// list of pin ID waypoints
        /// </summary>
        /// <value>list of pin ID waypoints</value>
        [DataMember(Name = "waypoints", EmitDefaultValue = false)]
        public List<long> Waypoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdPlanetsPlanetIdGetRoutesInner {\n");
            sb.Append("  ContentTypeId: ").Append(ContentTypeId).Append("\n");
            sb.Append("  DestinationPinId: ").Append(DestinationPinId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  SourcePinId: ").Append(SourcePinId).Append("\n");
            sb.Append("  Waypoints: ").Append(Waypoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
