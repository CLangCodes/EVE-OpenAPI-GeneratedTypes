/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// DogmaAttributesAttributeIdGet
    /// </summary>
    [DataContract(Name = "DogmaAttributesAttributeIdGet")]
    public partial class DogmaAttributesAttributeIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaAttributesAttributeIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DogmaAttributesAttributeIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaAttributesAttributeIdGet" /> class.
        /// </summary>
        /// <param name="attributeId">attributeId (required).</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="highIsGood">highIsGood.</param>
        /// <param name="iconId">iconId.</param>
        /// <param name="name">name.</param>
        /// <param name="published">published.</param>
        /// <param name="stackable">stackable.</param>
        /// <param name="unitId">unitId.</param>
        public DogmaAttributesAttributeIdGet(long attributeId = default(long), double defaultValue = default(double), string description = default(string), string displayName = default(string), bool highIsGood = default(bool), long iconId = default(long), string name = default(string), bool published = default(bool), bool stackable = default(bool), long unitId = default(long))
        {
            this.AttributeId = attributeId;
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.DisplayName = displayName;
            this.HighIsGood = highIsGood;
            this.IconId = iconId;
            this.Name = name;
            this.Published = published;
            this.Stackable = stackable;
            this.UnitId = unitId;
        }

        /// <summary>
        /// Gets or Sets AttributeId
        /// </summary>
        [DataMember(Name = "attribute_id", IsRequired = true, EmitDefaultValue = true)]
        public long AttributeId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "default_value", EmitDefaultValue = false)]
        public double DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets HighIsGood
        /// </summary>
        [DataMember(Name = "high_is_good", EmitDefaultValue = true)]
        public bool HighIsGood { get; set; }

        /// <summary>
        /// Gets or Sets IconId
        /// </summary>
        [DataMember(Name = "icon_id", EmitDefaultValue = false)]
        public long IconId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Stackable
        /// </summary>
        [DataMember(Name = "stackable", EmitDefaultValue = true)]
        public bool Stackable { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name = "unit_id", EmitDefaultValue = false)]
        public long UnitId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DogmaAttributesAttributeIdGet {\n");
            sb.Append("  AttributeId: ").Append(AttributeId).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  HighIsGood: ").Append(HighIsGood).Append("\n");
            sb.Append("  IconId: ").Append(IconId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Stackable: ").Append(Stackable).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
