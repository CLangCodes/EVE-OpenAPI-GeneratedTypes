/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseTypesTypeIdGet
    /// </summary>
    [DataContract(Name = "UniverseTypesTypeIdGet")]
    public partial class UniverseTypesTypeIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseTypesTypeIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseTypesTypeIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseTypesTypeIdGet" /> class.
        /// </summary>
        /// <param name="capacity">capacity.</param>
        /// <param name="description">description (required).</param>
        /// <param name="dogmaAttributes">dogmaAttributes.</param>
        /// <param name="dogmaEffects">dogmaEffects.</param>
        /// <param name="graphicId">graphicId.</param>
        /// <param name="groupId">groupId (required).</param>
        /// <param name="iconId">iconId.</param>
        /// <param name="marketGroupId">This only exists for types that can be put on the market.</param>
        /// <param name="mass">mass.</param>
        /// <param name="name">name (required).</param>
        /// <param name="packagedVolume">packagedVolume.</param>
        /// <param name="portionSize">portionSize.</param>
        /// <param name="published">published (required).</param>
        /// <param name="radius">radius.</param>
        /// <param name="typeId">typeId (required).</param>
        /// <param name="volume">volume.</param>
        public UniverseTypesTypeIdGet(double capacity = default(double), string description = default(string), List<DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner> dogmaAttributes = default(List<DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner>), List<DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner> dogmaEffects = default(List<DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner>), long graphicId = default(long), long groupId = default(long), long iconId = default(long), long marketGroupId = default(long), double mass = default(double), string name = default(string), double packagedVolume = default(double), long portionSize = default(long), bool published = default(bool), double radius = default(double), long typeId = default(long), double volume = default(double))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for UniverseTypesTypeIdGet and cannot be null");
            }
            this.Description = description;
            this.GroupId = groupId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseTypesTypeIdGet and cannot be null");
            }
            this.Name = name;
            this.Published = published;
            this.TypeId = typeId;
            this.Capacity = capacity;
            this.DogmaAttributes = dogmaAttributes;
            this.DogmaEffects = dogmaEffects;
            this.GraphicId = graphicId;
            this.IconId = iconId;
            this.MarketGroupId = marketGroupId;
            this.Mass = mass;
            this.PackagedVolume = packagedVolume;
            this.PortionSize = portionSize;
            this.Radius = radius;
            this.Volume = volume;
        }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "capacity", EmitDefaultValue = false)]
        public double Capacity { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DogmaAttributes
        /// </summary>
        [DataMember(Name = "dogma_attributes", EmitDefaultValue = false)]
        public List<DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner> DogmaAttributes { get; set; }

        /// <summary>
        /// Gets or Sets DogmaEffects
        /// </summary>
        [DataMember(Name = "dogma_effects", EmitDefaultValue = false)]
        public List<DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner> DogmaEffects { get; set; }

        /// <summary>
        /// Gets or Sets GraphicId
        /// </summary>
        [DataMember(Name = "graphic_id", EmitDefaultValue = false)]
        public long GraphicId { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "group_id", IsRequired = true, EmitDefaultValue = true)]
        public long GroupId { get; set; }

        /// <summary>
        /// Gets or Sets IconId
        /// </summary>
        [DataMember(Name = "icon_id", EmitDefaultValue = false)]
        public long IconId { get; set; }

        /// <summary>
        /// This only exists for types that can be put on the market
        /// </summary>
        /// <value>This only exists for types that can be put on the market</value>
        [DataMember(Name = "market_group_id", EmitDefaultValue = false)]
        public long MarketGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Mass
        /// </summary>
        [DataMember(Name = "mass", EmitDefaultValue = false)]
        public double Mass { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PackagedVolume
        /// </summary>
        [DataMember(Name = "packaged_volume", EmitDefaultValue = false)]
        public double PackagedVolume { get; set; }

        /// <summary>
        /// Gets or Sets PortionSize
        /// </summary>
        [DataMember(Name = "portion_size", EmitDefaultValue = false)]
        public long PortionSize { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", IsRequired = true, EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Radius
        /// </summary>
        [DataMember(Name = "radius", EmitDefaultValue = false)]
        public double Radius { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseTypesTypeIdGet {\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DogmaAttributes: ").Append(DogmaAttributes).Append("\n");
            sb.Append("  DogmaEffects: ").Append(DogmaEffects).Append("\n");
            sb.Append("  GraphicId: ").Append(GraphicId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  IconId: ").Append(IconId).Append("\n");
            sb.Append("  MarketGroupId: ").Append(MarketGroupId).Append("\n");
            sb.Append("  Mass: ").Append(Mass).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PackagedVolume: ").Append(PackagedVolume).Append("\n");
            sb.Append("  PortionSize: ").Append(PortionSize).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
