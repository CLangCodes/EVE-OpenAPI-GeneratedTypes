/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdGet
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdGet")]
    public partial class CharactersCharacterIdGet
    {
        /// <summary>
        /// Defines Gender
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum Female for value: female
            /// </summary>
            [EnumMember(Value = "female")]
            Female = 1,

            /// <summary>
            /// Enum Male for value: male
            /// </summary>
            [EnumMember(Value = "male")]
            Male = 2
        }


        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", IsRequired = true, EmitDefaultValue = true)]
        public GenderEnum Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdGet" /> class.
        /// </summary>
        /// <param name="allianceId">The character&#39;s alliance ID.</param>
        /// <param name="birthday">Creation date of the character (required).</param>
        /// <param name="bloodlineId">bloodlineId (required).</param>
        /// <param name="corporationId">The character&#39;s corporation ID (required).</param>
        /// <param name="description">description.</param>
        /// <param name="factionId">ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare.</param>
        /// <param name="gender">gender (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="raceId">raceId (required).</param>
        /// <param name="securityStatus">securityStatus.</param>
        /// <param name="title">The individual title of the character.</param>
        public CharactersCharacterIdGet(long allianceId = default(long), DateTime birthday = default(DateTime), long bloodlineId = default(long), long corporationId = default(long), string description = default(string), long factionId = default(long), GenderEnum gender = default(GenderEnum), string name = default(string), long raceId = default(long), double securityStatus = default(double), string title = default(string))
        {
            this.Birthday = birthday;
            this.BloodlineId = bloodlineId;
            this.CorporationId = corporationId;
            this.Gender = gender;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CharactersCharacterIdGet and cannot be null");
            }
            this.Name = name;
            this.RaceId = raceId;
            this.AllianceId = allianceId;
            this.Description = description;
            this.FactionId = factionId;
            this.SecurityStatus = securityStatus;
            this.Title = title;
        }

        /// <summary>
        /// The character&#39;s alliance ID
        /// </summary>
        /// <value>The character&#39;s alliance ID</value>
        [DataMember(Name = "alliance_id", EmitDefaultValue = false)]
        public long AllianceId { get; set; }

        /// <summary>
        /// Creation date of the character
        /// </summary>
        /// <value>Creation date of the character</value>
        [DataMember(Name = "birthday", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Birthday { get; set; }

        /// <summary>
        /// Gets or Sets BloodlineId
        /// </summary>
        [DataMember(Name = "bloodline_id", IsRequired = true, EmitDefaultValue = true)]
        public long BloodlineId { get; set; }

        /// <summary>
        /// The character&#39;s corporation ID
        /// </summary>
        /// <value>The character&#39;s corporation ID</value>
        [DataMember(Name = "corporation_id", IsRequired = true, EmitDefaultValue = true)]
        public long CorporationId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
        /// </summary>
        /// <value>ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare</value>
        [DataMember(Name = "faction_id", EmitDefaultValue = false)]
        public long FactionId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RaceId
        /// </summary>
        [DataMember(Name = "race_id", IsRequired = true, EmitDefaultValue = true)]
        public long RaceId { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStatus
        /// </summary>
        [DataMember(Name = "security_status", EmitDefaultValue = false)]
        public double SecurityStatus { get; set; }

        /// <summary>
        /// The individual title of the character
        /// </summary>
        /// <value>The individual title of the character</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdGet {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  BloodlineId: ").Append(BloodlineId).Append("\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RaceId: ").Append(RaceId).Append("\n");
            sb.Append("  SecurityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
