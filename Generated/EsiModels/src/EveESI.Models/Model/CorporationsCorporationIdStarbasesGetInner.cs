/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdStarbasesGetInner
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdStarbasesGet_inner")]
    public partial class CorporationsCorporationIdStarbasesGetInner
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Offline for value: offline
            /// </summary>
            [EnumMember(Value = "offline")]
            Offline = 1,

            /// <summary>
            /// Enum Online for value: online
            /// </summary>
            [EnumMember(Value = "online")]
            Online = 2,

            /// <summary>
            /// Enum Onlining for value: onlining
            /// </summary>
            [EnumMember(Value = "onlining")]
            Onlining = 3,

            /// <summary>
            /// Enum Reinforced for value: reinforced
            /// </summary>
            [EnumMember(Value = "reinforced")]
            Reinforced = 4,

            /// <summary>
            /// Enum Unanchoring for value: unanchoring
            /// </summary>
            [EnumMember(Value = "unanchoring")]
            Unanchoring = 5
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdStarbasesGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdStarbasesGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdStarbasesGetInner" /> class.
        /// </summary>
        /// <param name="moonId">The moon this starbase (POS) is anchored on, unanchored POSes do not have this information.</param>
        /// <param name="onlinedSince">When the POS onlined, for starbases (POSes) in online state.</param>
        /// <param name="reinforcedUntil">When the POS will be out of reinforcement, for starbases (POSes) in reinforced state.</param>
        /// <param name="starbaseId">Unique ID for this starbase (POS) (required).</param>
        /// <param name="state">state.</param>
        /// <param name="systemId">The solar system this starbase (POS) is in, unanchored POSes have this information (required).</param>
        /// <param name="typeId">Starbase (POS) type (required).</param>
        /// <param name="unanchorAt">When the POS started unanchoring, for starbases (POSes) in unanchoring state.</param>
        public CorporationsCorporationIdStarbasesGetInner(long moonId = default(long), DateTime onlinedSince = default(DateTime), DateTime reinforcedUntil = default(DateTime), long starbaseId = default(long), StateEnum? state = default(StateEnum?), long systemId = default(long), long typeId = default(long), DateTime unanchorAt = default(DateTime))
        {
            this.StarbaseId = starbaseId;
            this.SystemId = systemId;
            this.TypeId = typeId;
            this.MoonId = moonId;
            this.OnlinedSince = onlinedSince;
            this.ReinforcedUntil = reinforcedUntil;
            this.State = state;
            this.UnanchorAt = unanchorAt;
        }

        /// <summary>
        /// The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
        /// </summary>
        /// <value>The moon this starbase (POS) is anchored on, unanchored POSes do not have this information</value>
        [DataMember(Name = "moon_id", EmitDefaultValue = false)]
        public long MoonId { get; set; }

        /// <summary>
        /// When the POS onlined, for starbases (POSes) in online state
        /// </summary>
        /// <value>When the POS onlined, for starbases (POSes) in online state</value>
        [DataMember(Name = "onlined_since", EmitDefaultValue = false)]
        public DateTime OnlinedSince { get; set; }

        /// <summary>
        /// When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
        /// </summary>
        /// <value>When the POS will be out of reinforcement, for starbases (POSes) in reinforced state</value>
        [DataMember(Name = "reinforced_until", EmitDefaultValue = false)]
        public DateTime ReinforcedUntil { get; set; }

        /// <summary>
        /// Unique ID for this starbase (POS)
        /// </summary>
        /// <value>Unique ID for this starbase (POS)</value>
        [DataMember(Name = "starbase_id", IsRequired = true, EmitDefaultValue = true)]
        public long StarbaseId { get; set; }

        /// <summary>
        /// The solar system this starbase (POS) is in, unanchored POSes have this information
        /// </summary>
        /// <value>The solar system this starbase (POS) is in, unanchored POSes have this information</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SystemId { get; set; }

        /// <summary>
        /// Starbase (POS) type
        /// </summary>
        /// <value>Starbase (POS) type</value>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// When the POS started unanchoring, for starbases (POSes) in unanchoring state
        /// </summary>
        /// <value>When the POS started unanchoring, for starbases (POSes) in unanchoring state</value>
        [DataMember(Name = "unanchor_at", EmitDefaultValue = false)]
        public DateTime UnanchorAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdStarbasesGetInner {\n");
            sb.Append("  MoonId: ").Append(MoonId).Append("\n");
            sb.Append("  OnlinedSince: ").Append(OnlinedSince).Append("\n");
            sb.Append("  ReinforcedUntil: ").Append(ReinforcedUntil).Append("\n");
            sb.Append("  StarbaseId: ").Append(StarbaseId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  UnanchorAt: ").Append(UnanchorAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
