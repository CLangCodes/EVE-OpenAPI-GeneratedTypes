/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// MarketsStructuresStructureIdGetInner
    /// </summary>
    [DataContract(Name = "MarketsStructuresStructureIdGet_inner")]
    public partial class MarketsStructuresStructureIdGetInner
    {
        /// <summary>
        /// Defines Range
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RangeEnum
        {
            /// <summary>
            /// Enum Station for value: station
            /// </summary>
            [EnumMember(Value = "station")]
            Station = 1,

            /// <summary>
            /// Enum Region for value: region
            /// </summary>
            [EnumMember(Value = "region")]
            Region = 2,

            /// <summary>
            /// Enum Solarsystem for value: solarsystem
            /// </summary>
            [EnumMember(Value = "solarsystem")]
            Solarsystem = 3,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 4,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 5,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 6,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 7,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 8,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 9,

            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 10,

            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 11,

            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 12
        }


        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", IsRequired = true, EmitDefaultValue = true)]
        public RangeEnum Range { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketsStructuresStructureIdGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketsStructuresStructureIdGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketsStructuresStructureIdGetInner" /> class.
        /// </summary>
        /// <param name="duration">duration (required).</param>
        /// <param name="isBuyOrder">isBuyOrder (required).</param>
        /// <param name="issued">issued (required).</param>
        /// <param name="locationId">locationId (required).</param>
        /// <param name="minVolume">minVolume (required).</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="range">range (required).</param>
        /// <param name="typeId">typeId (required).</param>
        /// <param name="volumeRemain">volumeRemain (required).</param>
        /// <param name="volumeTotal">volumeTotal (required).</param>
        public MarketsStructuresStructureIdGetInner(long duration = default(long), bool isBuyOrder = default(bool), DateTime issued = default(DateTime), long locationId = default(long), long minVolume = default(long), long orderId = default(long), double price = default(double), RangeEnum range = default(RangeEnum), long typeId = default(long), long volumeRemain = default(long), long volumeTotal = default(long))
        {
            this.Duration = duration;
            this.IsBuyOrder = isBuyOrder;
            this.Issued = issued;
            this.LocationId = locationId;
            this.MinVolume = minVolume;
            this.OrderId = orderId;
            this.Price = price;
            this.Range = range;
            this.TypeId = typeId;
            this.VolumeRemain = volumeRemain;
            this.VolumeTotal = volumeTotal;
        }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public long Duration { get; set; }

        /// <summary>
        /// Gets or Sets IsBuyOrder
        /// </summary>
        [DataMember(Name = "is_buy_order", IsRequired = true, EmitDefaultValue = true)]
        public bool IsBuyOrder { get; set; }

        /// <summary>
        /// Gets or Sets Issued
        /// </summary>
        [DataMember(Name = "issued", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Issued { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "location_id", IsRequired = true, EmitDefaultValue = true)]
        public long LocationId { get; set; }

        /// <summary>
        /// Gets or Sets MinVolume
        /// </summary>
        [DataMember(Name = "min_volume", IsRequired = true, EmitDefaultValue = true)]
        public long MinVolume { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public long OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public double Price { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Gets or Sets VolumeRemain
        /// </summary>
        [DataMember(Name = "volume_remain", IsRequired = true, EmitDefaultValue = true)]
        public long VolumeRemain { get; set; }

        /// <summary>
        /// Gets or Sets VolumeTotal
        /// </summary>
        [DataMember(Name = "volume_total", IsRequired = true, EmitDefaultValue = true)]
        public long VolumeTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketsStructuresStructureIdGetInner {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IsBuyOrder: ").Append(IsBuyOrder).Append("\n");
            sb.Append("  Issued: ").Append(Issued).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MinVolume: ").Append(MinVolume).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  VolumeRemain: ").Append(VolumeRemain).Append("\n");
            sb.Append("  VolumeTotal: ").Append(VolumeTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
