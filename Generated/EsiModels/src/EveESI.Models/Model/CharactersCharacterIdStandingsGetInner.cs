/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdStandingsGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdStandingsGet_inner")]
    public partial class CharactersCharacterIdStandingsGetInner
    {
        /// <summary>
        /// Defines FromType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FromTypeEnum
        {
            /// <summary>
            /// Enum Agent for value: agent
            /// </summary>
            [EnumMember(Value = "agent")]
            Agent = 1,

            /// <summary>
            /// Enum NpcCorp for value: npc_corp
            /// </summary>
            [EnumMember(Value = "npc_corp")]
            NpcCorp = 2,

            /// <summary>
            /// Enum Faction for value: faction
            /// </summary>
            [EnumMember(Value = "faction")]
            Faction = 3
        }


        /// <summary>
        /// Gets or Sets FromType
        /// </summary>
        [DataMember(Name = "from_type", IsRequired = true, EmitDefaultValue = true)]
        public FromTypeEnum FromType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdStandingsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdStandingsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdStandingsGetInner" /> class.
        /// </summary>
        /// <param name="fromId">fromId (required).</param>
        /// <param name="fromType">fromType (required).</param>
        /// <param name="standing">standing (required).</param>
        public CharactersCharacterIdStandingsGetInner(long fromId = default(long), FromTypeEnum fromType = default(FromTypeEnum), double standing = default(double))
        {
            this.FromId = fromId;
            this.FromType = fromType;
            this.Standing = standing;
        }

        /// <summary>
        /// Gets or Sets FromId
        /// </summary>
        [DataMember(Name = "from_id", IsRequired = true, EmitDefaultValue = true)]
        public long FromId { get; set; }

        /// <summary>
        /// Gets or Sets Standing
        /// </summary>
        [DataMember(Name = "standing", IsRequired = true, EmitDefaultValue = true)]
        public double Standing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdStandingsGetInner {\n");
            sb.Append("  FromId: ").Append(FromId).Append("\n");
            sb.Append("  FromType: ").Append(FromType).Append("\n");
            sb.Append("  Standing: ").Append(Standing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
