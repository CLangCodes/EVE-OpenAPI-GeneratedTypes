/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdSkillqueueGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdSkillqueueGet_inner")]
    public partial class CharactersCharacterIdSkillqueueGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdSkillqueueGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdSkillqueueGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdSkillqueueGetInner" /> class.
        /// </summary>
        /// <param name="finishDate">Date on which training of the skill will complete. Omitted if the skill queue is paused..</param>
        /// <param name="finishedLevel">finishedLevel (required).</param>
        /// <param name="levelEndSp">levelEndSp.</param>
        /// <param name="levelStartSp">Amount of SP that was in the skill when it started training it&#39;s current level. Used to calculate % of current level complete..</param>
        /// <param name="queuePosition">queuePosition (required).</param>
        /// <param name="skillId">skillId (required).</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="trainingStartSp">trainingStartSp.</param>
        public CharactersCharacterIdSkillqueueGetInner(DateTime finishDate = default(DateTime), long finishedLevel = default(long), long levelEndSp = default(long), long levelStartSp = default(long), long queuePosition = default(long), long skillId = default(long), DateTime startDate = default(DateTime), long trainingStartSp = default(long))
        {
            this.FinishedLevel = finishedLevel;
            this.QueuePosition = queuePosition;
            this.SkillId = skillId;
            this.FinishDate = finishDate;
            this.LevelEndSp = levelEndSp;
            this.LevelStartSp = levelStartSp;
            this.StartDate = startDate;
            this.TrainingStartSp = trainingStartSp;
        }

        /// <summary>
        /// Date on which training of the skill will complete. Omitted if the skill queue is paused.
        /// </summary>
        /// <value>Date on which training of the skill will complete. Omitted if the skill queue is paused.</value>
        [DataMember(Name = "finish_date", EmitDefaultValue = false)]
        public DateTime FinishDate { get; set; }

        /// <summary>
        /// Gets or Sets FinishedLevel
        /// </summary>
        [DataMember(Name = "finished_level", IsRequired = true, EmitDefaultValue = true)]
        public long FinishedLevel { get; set; }

        /// <summary>
        /// Gets or Sets LevelEndSp
        /// </summary>
        [DataMember(Name = "level_end_sp", EmitDefaultValue = false)]
        public long LevelEndSp { get; set; }

        /// <summary>
        /// Amount of SP that was in the skill when it started training it&#39;s current level. Used to calculate % of current level complete.
        /// </summary>
        /// <value>Amount of SP that was in the skill when it started training it&#39;s current level. Used to calculate % of current level complete.</value>
        [DataMember(Name = "level_start_sp", EmitDefaultValue = false)]
        public long LevelStartSp { get; set; }

        /// <summary>
        /// Gets or Sets QueuePosition
        /// </summary>
        [DataMember(Name = "queue_position", IsRequired = true, EmitDefaultValue = true)]
        public long QueuePosition { get; set; }

        /// <summary>
        /// Gets or Sets SkillId
        /// </summary>
        [DataMember(Name = "skill_id", IsRequired = true, EmitDefaultValue = true)]
        public long SkillId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TrainingStartSp
        /// </summary>
        [DataMember(Name = "training_start_sp", EmitDefaultValue = false)]
        public long TrainingStartSp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdSkillqueueGetInner {\n");
            sb.Append("  FinishDate: ").Append(FinishDate).Append("\n");
            sb.Append("  FinishedLevel: ").Append(FinishedLevel).Append("\n");
            sb.Append("  LevelEndSp: ").Append(LevelEndSp).Append("\n");
            sb.Append("  LevelStartSp: ").Append(LevelStartSp).Append("\n");
            sb.Append("  QueuePosition: ").Append(QueuePosition).Append("\n");
            sb.Append("  SkillId: ").Append(SkillId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TrainingStartSp: ").Append(TrainingStartSp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
