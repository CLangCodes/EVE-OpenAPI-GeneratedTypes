/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdStarbasesStarbaseIdGet
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdStarbasesStarbaseIdGet")]
    public partial class CorporationsCorporationIdStarbasesStarbaseIdGet
    {
        /// <summary>
        /// Who can anchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can anchor starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnchorEnum
        {
            /// <summary>
            /// Enum AllianceMember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            AllianceMember = 1,

            /// <summary>
            /// Enum ConfigStarbaseEquipmentRole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            ConfigStarbaseEquipmentRole = 2,

            /// <summary>
            /// Enum CorporationMember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            CorporationMember = 3,

            /// <summary>
            /// Enum StarbaseFuelTechnicianRole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            StarbaseFuelTechnicianRole = 4
        }


        /// <summary>
        /// Who can anchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can anchor starbase (POS) and its structures</value>
        [DataMember(Name = "anchor", IsRequired = true, EmitDefaultValue = true)]
        public AnchorEnum Anchor { get; set; }
        /// <summary>
        /// Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay
        /// </summary>
        /// <value>Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FuelBayTakeEnum
        {
            /// <summary>
            /// Enum AllianceMember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            AllianceMember = 1,

            /// <summary>
            /// Enum ConfigStarbaseEquipmentRole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            ConfigStarbaseEquipmentRole = 2,

            /// <summary>
            /// Enum CorporationMember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            CorporationMember = 3,

            /// <summary>
            /// Enum StarbaseFuelTechnicianRole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            StarbaseFuelTechnicianRole = 4
        }


        /// <summary>
        /// Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay
        /// </summary>
        /// <value>Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay</value>
        [DataMember(Name = "fuel_bay_take", IsRequired = true, EmitDefaultValue = true)]
        public FuelBayTakeEnum FuelBayTake { get; set; }
        /// <summary>
        /// Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme
        /// </summary>
        /// <value>Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FuelBayViewEnum
        {
            /// <summary>
            /// Enum AllianceMember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            AllianceMember = 1,

            /// <summary>
            /// Enum ConfigStarbaseEquipmentRole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            ConfigStarbaseEquipmentRole = 2,

            /// <summary>
            /// Enum CorporationMember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            CorporationMember = 3,

            /// <summary>
            /// Enum StarbaseFuelTechnicianRole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            StarbaseFuelTechnicianRole = 4
        }


        /// <summary>
        /// Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme
        /// </summary>
        /// <value>Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme</value>
        [DataMember(Name = "fuel_bay_view", IsRequired = true, EmitDefaultValue = true)]
        public FuelBayViewEnum FuelBayView { get; set; }
        /// <summary>
        /// Who can offline starbase (POS) and its structures
        /// </summary>
        /// <value>Who can offline starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OfflineEnum
        {
            /// <summary>
            /// Enum AllianceMember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            AllianceMember = 1,

            /// <summary>
            /// Enum ConfigStarbaseEquipmentRole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            ConfigStarbaseEquipmentRole = 2,

            /// <summary>
            /// Enum CorporationMember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            CorporationMember = 3,

            /// <summary>
            /// Enum StarbaseFuelTechnicianRole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            StarbaseFuelTechnicianRole = 4
        }


        /// <summary>
        /// Who can offline starbase (POS) and its structures
        /// </summary>
        /// <value>Who can offline starbase (POS) and its structures</value>
        [DataMember(Name = "offline", IsRequired = true, EmitDefaultValue = true)]
        public OfflineEnum Offline { get; set; }
        /// <summary>
        /// Who can online starbase (POS) and its structures
        /// </summary>
        /// <value>Who can online starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnlineEnum
        {
            /// <summary>
            /// Enum AllianceMember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            AllianceMember = 1,

            /// <summary>
            /// Enum ConfigStarbaseEquipmentRole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            ConfigStarbaseEquipmentRole = 2,

            /// <summary>
            /// Enum CorporationMember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            CorporationMember = 3,

            /// <summary>
            /// Enum StarbaseFuelTechnicianRole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            StarbaseFuelTechnicianRole = 4
        }


        /// <summary>
        /// Who can online starbase (POS) and its structures
        /// </summary>
        /// <value>Who can online starbase (POS) and its structures</value>
        [DataMember(Name = "online", IsRequired = true, EmitDefaultValue = true)]
        public OnlineEnum Online { get; set; }
        /// <summary>
        /// Who can unanchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can unanchor starbase (POS) and its structures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnanchorEnum
        {
            /// <summary>
            /// Enum AllianceMember for value: alliance_member
            /// </summary>
            [EnumMember(Value = "alliance_member")]
            AllianceMember = 1,

            /// <summary>
            /// Enum ConfigStarbaseEquipmentRole for value: config_starbase_equipment_role
            /// </summary>
            [EnumMember(Value = "config_starbase_equipment_role")]
            ConfigStarbaseEquipmentRole = 2,

            /// <summary>
            /// Enum CorporationMember for value: corporation_member
            /// </summary>
            [EnumMember(Value = "corporation_member")]
            CorporationMember = 3,

            /// <summary>
            /// Enum StarbaseFuelTechnicianRole for value: starbase_fuel_technician_role
            /// </summary>
            [EnumMember(Value = "starbase_fuel_technician_role")]
            StarbaseFuelTechnicianRole = 4
        }


        /// <summary>
        /// Who can unanchor starbase (POS) and its structures
        /// </summary>
        /// <value>Who can unanchor starbase (POS) and its structures</value>
        [DataMember(Name = "unanchor", IsRequired = true, EmitDefaultValue = true)]
        public UnanchorEnum Unanchor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdStarbasesStarbaseIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdStarbasesStarbaseIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdStarbasesStarbaseIdGet" /> class.
        /// </summary>
        /// <param name="allowAllianceMembers">allowAllianceMembers (required).</param>
        /// <param name="allowCorporationMembers">allowCorporationMembers (required).</param>
        /// <param name="anchor">Who can anchor starbase (POS) and its structures (required).</param>
        /// <param name="attackIfAtWar">attackIfAtWar (required).</param>
        /// <param name="attackIfOtherSecurityStatusDropping">attackIfOtherSecurityStatusDropping (required).</param>
        /// <param name="attackSecurityStatusThreshold">Starbase (POS) will attack if target&#39;s security standing is lower than this value.</param>
        /// <param name="attackStandingThreshold">Starbase (POS) will attack if target&#39;s standing is lower than this value.</param>
        /// <param name="fuelBayTake">Who can take fuel blocks out of the starbase (POS)&#39;s fuel bay (required).</param>
        /// <param name="fuelBayView">Who can view the starbase (POS)&#39;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#39;s corporation or alliance, as described by the enum, all other access settings follows the same scheme (required).</param>
        /// <param name="fuels">Fuel blocks and other things that will be consumed when operating a starbase (POS).</param>
        /// <param name="offline">Who can offline starbase (POS) and its structures (required).</param>
        /// <param name="online">Who can online starbase (POS) and its structures (required).</param>
        /// <param name="unanchor">Who can unanchor starbase (POS) and its structures (required).</param>
        /// <param name="useAllianceStandings">True if the starbase (POS) is using alliance standings, otherwise using corporation&#39;s (required).</param>
        public CorporationsCorporationIdStarbasesStarbaseIdGet(bool allowAllianceMembers = default(bool), bool allowCorporationMembers = default(bool), AnchorEnum anchor = default(AnchorEnum), bool attackIfAtWar = default(bool), bool attackIfOtherSecurityStatusDropping = default(bool), double attackSecurityStatusThreshold = default(double), double attackStandingThreshold = default(double), FuelBayTakeEnum fuelBayTake = default(FuelBayTakeEnum), FuelBayViewEnum fuelBayView = default(FuelBayViewEnum), List<CorporationsCorporationIdStarbasesStarbaseIdGetFuelsInner> fuels = default(List<CorporationsCorporationIdStarbasesStarbaseIdGetFuelsInner>), OfflineEnum offline = default(OfflineEnum), OnlineEnum online = default(OnlineEnum), UnanchorEnum unanchor = default(UnanchorEnum), bool useAllianceStandings = default(bool))
        {
            this.AllowAllianceMembers = allowAllianceMembers;
            this.AllowCorporationMembers = allowCorporationMembers;
            this.Anchor = anchor;
            this.AttackIfAtWar = attackIfAtWar;
            this.AttackIfOtherSecurityStatusDropping = attackIfOtherSecurityStatusDropping;
            this.FuelBayTake = fuelBayTake;
            this.FuelBayView = fuelBayView;
            this.Offline = offline;
            this.Online = online;
            this.Unanchor = unanchor;
            this.UseAllianceStandings = useAllianceStandings;
            this.AttackSecurityStatusThreshold = attackSecurityStatusThreshold;
            this.AttackStandingThreshold = attackStandingThreshold;
            this.Fuels = fuels;
        }

        /// <summary>
        /// Gets or Sets AllowAllianceMembers
        /// </summary>
        [DataMember(Name = "allow_alliance_members", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAllianceMembers { get; set; }

        /// <summary>
        /// Gets or Sets AllowCorporationMembers
        /// </summary>
        [DataMember(Name = "allow_corporation_members", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowCorporationMembers { get; set; }

        /// <summary>
        /// Gets or Sets AttackIfAtWar
        /// </summary>
        [DataMember(Name = "attack_if_at_war", IsRequired = true, EmitDefaultValue = true)]
        public bool AttackIfAtWar { get; set; }

        /// <summary>
        /// Gets or Sets AttackIfOtherSecurityStatusDropping
        /// </summary>
        [DataMember(Name = "attack_if_other_security_status_dropping", IsRequired = true, EmitDefaultValue = true)]
        public bool AttackIfOtherSecurityStatusDropping { get; set; }

        /// <summary>
        /// Starbase (POS) will attack if target&#39;s security standing is lower than this value
        /// </summary>
        /// <value>Starbase (POS) will attack if target&#39;s security standing is lower than this value</value>
        [DataMember(Name = "attack_security_status_threshold", EmitDefaultValue = false)]
        public double AttackSecurityStatusThreshold { get; set; }

        /// <summary>
        /// Starbase (POS) will attack if target&#39;s standing is lower than this value
        /// </summary>
        /// <value>Starbase (POS) will attack if target&#39;s standing is lower than this value</value>
        [DataMember(Name = "attack_standing_threshold", EmitDefaultValue = false)]
        public double AttackStandingThreshold { get; set; }

        /// <summary>
        /// Fuel blocks and other things that will be consumed when operating a starbase (POS)
        /// </summary>
        /// <value>Fuel blocks and other things that will be consumed when operating a starbase (POS)</value>
        [DataMember(Name = "fuels", EmitDefaultValue = false)]
        public List<CorporationsCorporationIdStarbasesStarbaseIdGetFuelsInner> Fuels { get; set; }

        /// <summary>
        /// True if the starbase (POS) is using alliance standings, otherwise using corporation&#39;s
        /// </summary>
        /// <value>True if the starbase (POS) is using alliance standings, otherwise using corporation&#39;s</value>
        [DataMember(Name = "use_alliance_standings", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAllianceStandings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdStarbasesStarbaseIdGet {\n");
            sb.Append("  AllowAllianceMembers: ").Append(AllowAllianceMembers).Append("\n");
            sb.Append("  AllowCorporationMembers: ").Append(AllowCorporationMembers).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  AttackIfAtWar: ").Append(AttackIfAtWar).Append("\n");
            sb.Append("  AttackIfOtherSecurityStatusDropping: ").Append(AttackIfOtherSecurityStatusDropping).Append("\n");
            sb.Append("  AttackSecurityStatusThreshold: ").Append(AttackSecurityStatusThreshold).Append("\n");
            sb.Append("  AttackStandingThreshold: ").Append(AttackStandingThreshold).Append("\n");
            sb.Append("  FuelBayTake: ").Append(FuelBayTake).Append("\n");
            sb.Append("  FuelBayView: ").Append(FuelBayView).Append("\n");
            sb.Append("  Fuels: ").Append(Fuels).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  Unanchor: ").Append(Unanchor).Append("\n");
            sb.Append("  UseAllianceStandings: ").Append(UseAllianceStandings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
