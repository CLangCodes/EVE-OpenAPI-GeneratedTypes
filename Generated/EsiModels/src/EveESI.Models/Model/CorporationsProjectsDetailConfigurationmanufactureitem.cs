/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsProjectsDetailConfigurationmanufactureitem
    /// </summary>
    [DataContract(Name = "CorporationsProjectsDetailConfigurationmanufactureitem")]
    public partial class CorporationsProjectsDetailConfigurationmanufactureitem
    {
        /// <summary>
        /// Manufacture for
        /// </summary>
        /// <value>Manufacture for</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OwnerEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 1,

            /// <summary>
            /// Enum Corporation for value: Corporation
            /// </summary>
            [EnumMember(Value = "Corporation")]
            Corporation = 2,

            /// <summary>
            /// Enum Character for value: Character
            /// </summary>
            [EnumMember(Value = "Character")]
            Character = 3
        }


        /// <summary>
        /// Manufacture for
        /// </summary>
        /// <value>Manufacture for</value>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public OwnerEnum Owner { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfigurationmanufactureitem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsProjectsDetailConfigurationmanufactureitem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfigurationmanufactureitem" /> class.
        /// </summary>
        /// <param name="dockingLocations">Station / structure to manufacture in.</param>
        /// <param name="items">Item to manufacture.</param>
        /// <param name="owner">Manufacture for (required).</param>
        public CorporationsProjectsDetailConfigurationmanufactureitem(List<CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner> dockingLocations = default(List<CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner>), List<CorporationsProjectsDetailConfigurationdeliveritemItemsInner> items = default(List<CorporationsProjectsDetailConfigurationdeliveritemItemsInner>), OwnerEnum owner = default(OwnerEnum))
        {
            this.Owner = owner;
            this.DockingLocations = dockingLocations;
            this.Items = items;
        }

        /// <summary>
        /// Station / structure to manufacture in
        /// </summary>
        /// <value>Station / structure to manufacture in</value>
        [DataMember(Name = "docking_locations", EmitDefaultValue = false)]
        public List<CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner> DockingLocations { get; set; }

        /// <summary>
        /// Item to manufacture
        /// </summary>
        /// <value>Item to manufacture</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<CorporationsProjectsDetailConfigurationdeliveritemItemsInner> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsProjectsDetailConfigurationmanufactureitem {\n");
            sb.Append("  DockingLocations: ").Append(DockingLocations).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
