/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseFactionsGetInner
    /// </summary>
    [DataContract(Name = "UniverseFactionsGet_inner")]
    public partial class UniverseFactionsGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseFactionsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseFactionsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseFactionsGetInner" /> class.
        /// </summary>
        /// <param name="corporationId">corporationId.</param>
        /// <param name="description">description (required).</param>
        /// <param name="factionId">factionId (required).</param>
        /// <param name="isUnique">isUnique (required).</param>
        /// <param name="militiaCorporationId">militiaCorporationId.</param>
        /// <param name="name">name (required).</param>
        /// <param name="sizeFactor">sizeFactor (required).</param>
        /// <param name="solarSystemId">solarSystemId.</param>
        /// <param name="stationCount">stationCount (required).</param>
        /// <param name="stationSystemCount">stationSystemCount (required).</param>
        public UniverseFactionsGetInner(long corporationId = default(long), string description = default(string), long factionId = default(long), bool isUnique = default(bool), long militiaCorporationId = default(long), string name = default(string), double sizeFactor = default(double), long solarSystemId = default(long), long stationCount = default(long), long stationSystemCount = default(long))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for UniverseFactionsGetInner and cannot be null");
            }
            this.Description = description;
            this.FactionId = factionId;
            this.IsUnique = isUnique;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseFactionsGetInner and cannot be null");
            }
            this.Name = name;
            this.SizeFactor = sizeFactor;
            this.StationCount = stationCount;
            this.StationSystemCount = stationSystemCount;
            this.CorporationId = corporationId;
            this.MilitiaCorporationId = militiaCorporationId;
            this.SolarSystemId = solarSystemId;
        }

        /// <summary>
        /// Gets or Sets CorporationId
        /// </summary>
        [DataMember(Name = "corporation_id", EmitDefaultValue = false)]
        public long CorporationId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FactionId
        /// </summary>
        [DataMember(Name = "faction_id", IsRequired = true, EmitDefaultValue = true)]
        public long FactionId { get; set; }

        /// <summary>
        /// Gets or Sets IsUnique
        /// </summary>
        [DataMember(Name = "is_unique", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUnique { get; set; }

        /// <summary>
        /// Gets or Sets MilitiaCorporationId
        /// </summary>
        [DataMember(Name = "militia_corporation_id", EmitDefaultValue = false)]
        public long MilitiaCorporationId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SizeFactor
        /// </summary>
        [DataMember(Name = "size_factor", IsRequired = true, EmitDefaultValue = true)]
        public double SizeFactor { get; set; }

        /// <summary>
        /// Gets or Sets SolarSystemId
        /// </summary>
        [DataMember(Name = "solar_system_id", EmitDefaultValue = false)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Gets or Sets StationCount
        /// </summary>
        [DataMember(Name = "station_count", IsRequired = true, EmitDefaultValue = true)]
        public long StationCount { get; set; }

        /// <summary>
        /// Gets or Sets StationSystemCount
        /// </summary>
        [DataMember(Name = "station_system_count", IsRequired = true, EmitDefaultValue = true)]
        public long StationSystemCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseFactionsGetInner {\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  IsUnique: ").Append(IsUnique).Append("\n");
            sb.Append("  MilitiaCorporationId: ").Append(MilitiaCorporationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SizeFactor: ").Append(SizeFactor).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  StationCount: ").Append(StationCount).Append("\n");
            sb.Append("  StationSystemCount: ").Append(StationSystemCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
