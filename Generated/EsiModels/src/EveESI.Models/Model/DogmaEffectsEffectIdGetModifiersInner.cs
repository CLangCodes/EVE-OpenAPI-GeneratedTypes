/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// modifier object
    /// </summary>
    [DataContract(Name = "DogmaEffectsEffectIdGet_modifiers_inner")]
    public partial class DogmaEffectsEffectIdGetModifiersInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaEffectsEffectIdGetModifiersInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DogmaEffectsEffectIdGetModifiersInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaEffectsEffectIdGetModifiersInner" /> class.
        /// </summary>
        /// <param name="domain">domain.</param>
        /// <param name="effectId">effectId.</param>
        /// <param name="func">func (required).</param>
        /// <param name="modifiedAttributeId">modifiedAttributeId.</param>
        /// <param name="modifyingAttributeId">modifyingAttributeId.</param>
        /// <param name="varOperator">varOperator.</param>
        public DogmaEffectsEffectIdGetModifiersInner(string domain = default(string), long effectId = default(long), string func = default(string), long modifiedAttributeId = default(long), long modifyingAttributeId = default(long), long varOperator = default(long))
        {
            // to ensure "func" is required (not null)
            if (func == null)
            {
                throw new ArgumentNullException("func is a required property for DogmaEffectsEffectIdGetModifiersInner and cannot be null");
            }
            this.Func = func;
            this.Domain = domain;
            this.EffectId = effectId;
            this.ModifiedAttributeId = modifiedAttributeId;
            this.ModifyingAttributeId = modifyingAttributeId;
            this.VarOperator = varOperator;
        }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets EffectId
        /// </summary>
        [DataMember(Name = "effect_id", EmitDefaultValue = false)]
        public long EffectId { get; set; }

        /// <summary>
        /// Gets or Sets Func
        /// </summary>
        [DataMember(Name = "func", IsRequired = true, EmitDefaultValue = true)]
        public string Func { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAttributeId
        /// </summary>
        [DataMember(Name = "modified_attribute_id", EmitDefaultValue = false)]
        public long ModifiedAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets ModifyingAttributeId
        /// </summary>
        [DataMember(Name = "modifying_attribute_id", EmitDefaultValue = false)]
        public long ModifyingAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets VarOperator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public long VarOperator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DogmaEffectsEffectIdGetModifiersInner {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  EffectId: ").Append(EffectId).Append("\n");
            sb.Append("  Func: ").Append(Func).Append("\n");
            sb.Append("  ModifiedAttributeId: ").Append(ModifiedAttributeId).Append("\n");
            sb.Append("  ModifyingAttributeId: ").Append(ModifyingAttributeId).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
