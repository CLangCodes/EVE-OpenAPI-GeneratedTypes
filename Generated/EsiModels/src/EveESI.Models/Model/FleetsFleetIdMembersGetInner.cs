/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// FleetsFleetIdMembersGetInner
    /// </summary>
    [DataContract(Name = "FleetsFleetIdMembersGet_inner")]
    public partial class FleetsFleetIdMembersGetInner
    {
        /// <summary>
        /// Member’s role in fleet
        /// </summary>
        /// <value>Member’s role in fleet</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum FleetCommander for value: fleet_commander
            /// </summary>
            [EnumMember(Value = "fleet_commander")]
            FleetCommander = 1,

            /// <summary>
            /// Enum WingCommander for value: wing_commander
            /// </summary>
            [EnumMember(Value = "wing_commander")]
            WingCommander = 2,

            /// <summary>
            /// Enum SquadCommander for value: squad_commander
            /// </summary>
            [EnumMember(Value = "squad_commander")]
            SquadCommander = 3,

            /// <summary>
            /// Enum SquadMember for value: squad_member
            /// </summary>
            [EnumMember(Value = "squad_member")]
            SquadMember = 4
        }


        /// <summary>
        /// Member’s role in fleet
        /// </summary>
        /// <value>Member’s role in fleet</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FleetsFleetIdMembersGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FleetsFleetIdMembersGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FleetsFleetIdMembersGetInner" /> class.
        /// </summary>
        /// <param name="characterId">characterId (required).</param>
        /// <param name="joinTime">joinTime (required).</param>
        /// <param name="role">Member’s role in fleet (required).</param>
        /// <param name="roleName">Localized role names (required).</param>
        /// <param name="shipTypeId">shipTypeId (required).</param>
        /// <param name="solarSystemId">Solar system the member is located in (required).</param>
        /// <param name="squadId">ID of the squad the member is in. If not applicable, will be set to -1 (required).</param>
        /// <param name="stationId">Station in which the member is docked in, if applicable.</param>
        /// <param name="takesFleetWarp">Whether the member take fleet warps (required).</param>
        /// <param name="wingId">ID of the wing the member is in. If not applicable, will be set to -1 (required).</param>
        public FleetsFleetIdMembersGetInner(long characterId = default(long), DateTime joinTime = default(DateTime), RoleEnum role = default(RoleEnum), string roleName = default(string), long shipTypeId = default(long), long solarSystemId = default(long), long squadId = default(long), long stationId = default(long), bool takesFleetWarp = default(bool), long wingId = default(long))
        {
            this.CharacterId = characterId;
            this.JoinTime = joinTime;
            this.Role = role;
            // to ensure "roleName" is required (not null)
            if (roleName == null)
            {
                throw new ArgumentNullException("roleName is a required property for FleetsFleetIdMembersGetInner and cannot be null");
            }
            this.RoleName = roleName;
            this.ShipTypeId = shipTypeId;
            this.SolarSystemId = solarSystemId;
            this.SquadId = squadId;
            this.TakesFleetWarp = takesFleetWarp;
            this.WingId = wingId;
            this.StationId = stationId;
        }

        /// <summary>
        /// Gets or Sets CharacterId
        /// </summary>
        [DataMember(Name = "character_id", IsRequired = true, EmitDefaultValue = true)]
        public long CharacterId { get; set; }

        /// <summary>
        /// Gets or Sets JoinTime
        /// </summary>
        [DataMember(Name = "join_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime JoinTime { get; set; }

        /// <summary>
        /// Localized role names
        /// </summary>
        /// <value>Localized role names</value>
        [DataMember(Name = "role_name", IsRequired = true, EmitDefaultValue = true)]
        public string RoleName { get; set; }

        /// <summary>
        /// Gets or Sets ShipTypeId
        /// </summary>
        [DataMember(Name = "ship_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long ShipTypeId { get; set; }

        /// <summary>
        /// Solar system the member is located in
        /// </summary>
        /// <value>Solar system the member is located in</value>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// ID of the squad the member is in. If not applicable, will be set to -1
        /// </summary>
        /// <value>ID of the squad the member is in. If not applicable, will be set to -1</value>
        [DataMember(Name = "squad_id", IsRequired = true, EmitDefaultValue = true)]
        public long SquadId { get; set; }

        /// <summary>
        /// Station in which the member is docked in, if applicable
        /// </summary>
        /// <value>Station in which the member is docked in, if applicable</value>
        [DataMember(Name = "station_id", EmitDefaultValue = false)]
        public long StationId { get; set; }

        /// <summary>
        /// Whether the member take fleet warps
        /// </summary>
        /// <value>Whether the member take fleet warps</value>
        [DataMember(Name = "takes_fleet_warp", IsRequired = true, EmitDefaultValue = true)]
        public bool TakesFleetWarp { get; set; }

        /// <summary>
        /// ID of the wing the member is in. If not applicable, will be set to -1
        /// </summary>
        /// <value>ID of the wing the member is in. If not applicable, will be set to -1</value>
        [DataMember(Name = "wing_id", IsRequired = true, EmitDefaultValue = true)]
        public long WingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FleetsFleetIdMembersGetInner {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  JoinTime: ").Append(JoinTime).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  SquadId: ").Append(SquadId).Append("\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  TakesFleetWarp: ").Append(TakesFleetWarp).Append("\n");
            sb.Append("  WingId: ").Append(WingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
