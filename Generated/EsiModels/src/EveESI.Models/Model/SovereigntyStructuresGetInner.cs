/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// SovereigntyStructuresGetInner
    /// </summary>
    [DataContract(Name = "SovereigntyStructuresGet_inner")]
    public partial class SovereigntyStructuresGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SovereigntyStructuresGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SovereigntyStructuresGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SovereigntyStructuresGetInner" /> class.
        /// </summary>
        /// <param name="allianceId">The alliance that owns the structure.  (required).</param>
        /// <param name="solarSystemId">Solar system in which the structure is located.  (required).</param>
        /// <param name="structureId">Unique item ID for this structure. (required).</param>
        /// <param name="structureTypeId">A reference to the type of structure this is.  (required).</param>
        /// <param name="vulnerabilityOccupancyLevel">The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure. .</param>
        /// <param name="vulnerableEndTime">The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to &#39;overtime&#39; and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated. .</param>
        /// <param name="vulnerableStartTime">The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime. .</param>
        public SovereigntyStructuresGetInner(long allianceId = default(long), long solarSystemId = default(long), long structureId = default(long), long structureTypeId = default(long), double vulnerabilityOccupancyLevel = default(double), DateTime vulnerableEndTime = default(DateTime), DateTime vulnerableStartTime = default(DateTime))
        {
            this.AllianceId = allianceId;
            this.SolarSystemId = solarSystemId;
            this.StructureId = structureId;
            this.StructureTypeId = structureTypeId;
            this.VulnerabilityOccupancyLevel = vulnerabilityOccupancyLevel;
            this.VulnerableEndTime = vulnerableEndTime;
            this.VulnerableStartTime = vulnerableStartTime;
        }

        /// <summary>
        /// The alliance that owns the structure. 
        /// </summary>
        /// <value>The alliance that owns the structure. </value>
        [DataMember(Name = "alliance_id", IsRequired = true, EmitDefaultValue = true)]
        public long AllianceId { get; set; }

        /// <summary>
        /// Solar system in which the structure is located. 
        /// </summary>
        /// <value>Solar system in which the structure is located. </value>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Unique item ID for this structure.
        /// </summary>
        /// <value>Unique item ID for this structure.</value>
        [DataMember(Name = "structure_id", IsRequired = true, EmitDefaultValue = true)]
        public long StructureId { get; set; }

        /// <summary>
        /// A reference to the type of structure this is. 
        /// </summary>
        /// <value>A reference to the type of structure this is. </value>
        [DataMember(Name = "structure_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long StructureTypeId { get; set; }

        /// <summary>
        /// The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure. 
        /// </summary>
        /// <value>The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure. </value>
        [DataMember(Name = "vulnerability_occupancy_level", EmitDefaultValue = false)]
        public double VulnerabilityOccupancyLevel { get; set; }

        /// <summary>
        /// The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to &#39;overtime&#39; and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated. 
        /// </summary>
        /// <value>The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to &#39;overtime&#39; and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated. </value>
        [DataMember(Name = "vulnerable_end_time", EmitDefaultValue = false)]
        public DateTime VulnerableEndTime { get; set; }

        /// <summary>
        /// The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime. 
        /// </summary>
        /// <value>The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime. </value>
        [DataMember(Name = "vulnerable_start_time", EmitDefaultValue = false)]
        public DateTime VulnerableStartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SovereigntyStructuresGetInner {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  StructureId: ").Append(StructureId).Append("\n");
            sb.Append("  StructureTypeId: ").Append(StructureTypeId).Append("\n");
            sb.Append("  VulnerabilityOccupancyLevel: ").Append(VulnerabilityOccupancyLevel).Append("\n");
            sb.Append("  VulnerableEndTime: ").Append(VulnerableEndTime).Append("\n");
            sb.Append("  VulnerableStartTime: ").Append(VulnerableStartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
