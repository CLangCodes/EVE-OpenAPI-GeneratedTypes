/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdSearchGet
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdSearchGet")]
    public partial class CharactersCharacterIdSearchGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdSearchGet" /> class.
        /// </summary>
        /// <param name="agent">agent.</param>
        /// <param name="alliance">alliance.</param>
        /// <param name="character">character.</param>
        /// <param name="constellation">constellation.</param>
        /// <param name="corporation">corporation.</param>
        /// <param name="faction">faction.</param>
        /// <param name="inventoryType">inventoryType.</param>
        /// <param name="region">region.</param>
        /// <param name="solarSystem">solarSystem.</param>
        /// <param name="station">station.</param>
        /// <param name="structure">structure.</param>
        public CharactersCharacterIdSearchGet(List<long> agent = default(List<long>), List<long> alliance = default(List<long>), List<long> character = default(List<long>), List<long> constellation = default(List<long>), List<long> corporation = default(List<long>), List<long> faction = default(List<long>), List<long> inventoryType = default(List<long>), List<long> region = default(List<long>), List<long> solarSystem = default(List<long>), List<long> station = default(List<long>), List<long> structure = default(List<long>))
        {
            this.Agent = agent;
            this.Alliance = alliance;
            this.Character = character;
            this.Constellation = constellation;
            this.Corporation = corporation;
            this.Faction = faction;
            this.InventoryType = inventoryType;
            this.Region = region;
            this.SolarSystem = solarSystem;
            this.Station = station;
            this.Structure = structure;
        }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name = "agent", EmitDefaultValue = false)]
        public List<long> Agent { get; set; }

        /// <summary>
        /// Gets or Sets Alliance
        /// </summary>
        [DataMember(Name = "alliance", EmitDefaultValue = false)]
        public List<long> Alliance { get; set; }

        /// <summary>
        /// Gets or Sets Character
        /// </summary>
        [DataMember(Name = "character", EmitDefaultValue = false)]
        public List<long> Character { get; set; }

        /// <summary>
        /// Gets or Sets Constellation
        /// </summary>
        [DataMember(Name = "constellation", EmitDefaultValue = false)]
        public List<long> Constellation { get; set; }

        /// <summary>
        /// Gets or Sets Corporation
        /// </summary>
        [DataMember(Name = "corporation", EmitDefaultValue = false)]
        public List<long> Corporation { get; set; }

        /// <summary>
        /// Gets or Sets Faction
        /// </summary>
        [DataMember(Name = "faction", EmitDefaultValue = false)]
        public List<long> Faction { get; set; }

        /// <summary>
        /// Gets or Sets InventoryType
        /// </summary>
        [DataMember(Name = "inventory_type", EmitDefaultValue = false)]
        public List<long> InventoryType { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public List<long> Region { get; set; }

        /// <summary>
        /// Gets or Sets SolarSystem
        /// </summary>
        [DataMember(Name = "solar_system", EmitDefaultValue = false)]
        public List<long> SolarSystem { get; set; }

        /// <summary>
        /// Gets or Sets Station
        /// </summary>
        [DataMember(Name = "station", EmitDefaultValue = false)]
        public List<long> Station { get; set; }

        /// <summary>
        /// Gets or Sets Structure
        /// </summary>
        [DataMember(Name = "structure", EmitDefaultValue = false)]
        public List<long> Structure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdSearchGet {\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Alliance: ").Append(Alliance).Append("\n");
            sb.Append("  Character: ").Append(Character).Append("\n");
            sb.Append("  Constellation: ").Append(Constellation).Append("\n");
            sb.Append("  Corporation: ").Append(Corporation).Append("\n");
            sb.Append("  Faction: ").Append(Faction).Append("\n");
            sb.Append("  InventoryType: ").Append(InventoryType).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  SolarSystem: ").Append(SolarSystem).Append("\n");
            sb.Append("  Station: ").Append(Station).Append("\n");
            sb.Append("  Structure: ").Append(Structure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
