/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdContainersLogsGetInner
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdContainersLogsGet_inner")]
    public partial class CorporationsCorporationIdContainersLogsGetInner
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Add for value: add
            /// </summary>
            [EnumMember(Value = "add")]
            Add = 1,

            /// <summary>
            /// Enum Assemble for value: assemble
            /// </summary>
            [EnumMember(Value = "assemble")]
            Assemble = 2,

            /// <summary>
            /// Enum Configure for value: configure
            /// </summary>
            [EnumMember(Value = "configure")]
            Configure = 3,

            /// <summary>
            /// Enum EnterPassword for value: enter_password
            /// </summary>
            [EnumMember(Value = "enter_password")]
            EnterPassword = 4,

            /// <summary>
            /// Enum Lock for value: lock
            /// </summary>
            [EnumMember(Value = "lock")]
            Lock = 5,

            /// <summary>
            /// Enum Move for value: move
            /// </summary>
            [EnumMember(Value = "move")]
            Move = 6,

            /// <summary>
            /// Enum Repackage for value: repackage
            /// </summary>
            [EnumMember(Value = "repackage")]
            Repackage = 7,

            /// <summary>
            /// Enum SetName for value: set_name
            /// </summary>
            [EnumMember(Value = "set_name")]
            SetName = 8,

            /// <summary>
            /// Enum SetPassword for value: set_password
            /// </summary>
            [EnumMember(Value = "set_password")]
            SetPassword = 9,

            /// <summary>
            /// Enum Unlock for value: unlock
            /// </summary>
            [EnumMember(Value = "unlock")]
            Unlock = 10
        }


        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Defines LocationFlag
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationFlagEnum
        {
            /// <summary>
            /// Enum AssetSafety for value: AssetSafety
            /// </summary>
            [EnumMember(Value = "AssetSafety")]
            AssetSafety = 1,

            /// <summary>
            /// Enum AutoFit for value: AutoFit
            /// </summary>
            [EnumMember(Value = "AutoFit")]
            AutoFit = 2,

            /// <summary>
            /// Enum Bonus for value: Bonus
            /// </summary>
            [EnumMember(Value = "Bonus")]
            Bonus = 3,

            /// <summary>
            /// Enum Booster for value: Booster
            /// </summary>
            [EnumMember(Value = "Booster")]
            Booster = 4,

            /// <summary>
            /// Enum BoosterBay for value: BoosterBay
            /// </summary>
            [EnumMember(Value = "BoosterBay")]
            BoosterBay = 5,

            /// <summary>
            /// Enum Capsule for value: Capsule
            /// </summary>
            [EnumMember(Value = "Capsule")]
            Capsule = 6,

            /// <summary>
            /// Enum CapsuleerDeliveries for value: CapsuleerDeliveries
            /// </summary>
            [EnumMember(Value = "CapsuleerDeliveries")]
            CapsuleerDeliveries = 7,

            /// <summary>
            /// Enum Cargo for value: Cargo
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo = 8,

            /// <summary>
            /// Enum CorpDeliveries for value: CorpDeliveries
            /// </summary>
            [EnumMember(Value = "CorpDeliveries")]
            CorpDeliveries = 9,

            /// <summary>
            /// Enum CorpSAG1 for value: CorpSAG1
            /// </summary>
            [EnumMember(Value = "CorpSAG1")]
            CorpSAG1 = 10,

            /// <summary>
            /// Enum CorpSAG2 for value: CorpSAG2
            /// </summary>
            [EnumMember(Value = "CorpSAG2")]
            CorpSAG2 = 11,

            /// <summary>
            /// Enum CorpSAG3 for value: CorpSAG3
            /// </summary>
            [EnumMember(Value = "CorpSAG3")]
            CorpSAG3 = 12,

            /// <summary>
            /// Enum CorpSAG4 for value: CorpSAG4
            /// </summary>
            [EnumMember(Value = "CorpSAG4")]
            CorpSAG4 = 13,

            /// <summary>
            /// Enum CorpSAG5 for value: CorpSAG5
            /// </summary>
            [EnumMember(Value = "CorpSAG5")]
            CorpSAG5 = 14,

            /// <summary>
            /// Enum CorpSAG6 for value: CorpSAG6
            /// </summary>
            [EnumMember(Value = "CorpSAG6")]
            CorpSAG6 = 15,

            /// <summary>
            /// Enum CorpSAG7 for value: CorpSAG7
            /// </summary>
            [EnumMember(Value = "CorpSAG7")]
            CorpSAG7 = 16,

            /// <summary>
            /// Enum CorporationGoalDeliveries for value: CorporationGoalDeliveries
            /// </summary>
            [EnumMember(Value = "CorporationGoalDeliveries")]
            CorporationGoalDeliveries = 17,

            /// <summary>
            /// Enum CrateLoot for value: CrateLoot
            /// </summary>
            [EnumMember(Value = "CrateLoot")]
            CrateLoot = 18,

            /// <summary>
            /// Enum Deliveries for value: Deliveries
            /// </summary>
            [EnumMember(Value = "Deliveries")]
            Deliveries = 19,

            /// <summary>
            /// Enum DroneBay for value: DroneBay
            /// </summary>
            [EnumMember(Value = "DroneBay")]
            DroneBay = 20,

            /// <summary>
            /// Enum DustBattle for value: DustBattle
            /// </summary>
            [EnumMember(Value = "DustBattle")]
            DustBattle = 21,

            /// <summary>
            /// Enum DustDatabank for value: DustDatabank
            /// </summary>
            [EnumMember(Value = "DustDatabank")]
            DustDatabank = 22,

            /// <summary>
            /// Enum FighterBay for value: FighterBay
            /// </summary>
            [EnumMember(Value = "FighterBay")]
            FighterBay = 23,

            /// <summary>
            /// Enum FighterTube0 for value: FighterTube0
            /// </summary>
            [EnumMember(Value = "FighterTube0")]
            FighterTube0 = 24,

            /// <summary>
            /// Enum FighterTube1 for value: FighterTube1
            /// </summary>
            [EnumMember(Value = "FighterTube1")]
            FighterTube1 = 25,

            /// <summary>
            /// Enum FighterTube2 for value: FighterTube2
            /// </summary>
            [EnumMember(Value = "FighterTube2")]
            FighterTube2 = 26,

            /// <summary>
            /// Enum FighterTube3 for value: FighterTube3
            /// </summary>
            [EnumMember(Value = "FighterTube3")]
            FighterTube3 = 27,

            /// <summary>
            /// Enum FighterTube4 for value: FighterTube4
            /// </summary>
            [EnumMember(Value = "FighterTube4")]
            FighterTube4 = 28,

            /// <summary>
            /// Enum FleetHangar for value: FleetHangar
            /// </summary>
            [EnumMember(Value = "FleetHangar")]
            FleetHangar = 29,

            /// <summary>
            /// Enum FrigateEscapeBay for value: FrigateEscapeBay
            /// </summary>
            [EnumMember(Value = "FrigateEscapeBay")]
            FrigateEscapeBay = 30,

            /// <summary>
            /// Enum Hangar for value: Hangar
            /// </summary>
            [EnumMember(Value = "Hangar")]
            Hangar = 31,

            /// <summary>
            /// Enum HangarAll for value: HangarAll
            /// </summary>
            [EnumMember(Value = "HangarAll")]
            HangarAll = 32,

            /// <summary>
            /// Enum HiSlot0 for value: HiSlot0
            /// </summary>
            [EnumMember(Value = "HiSlot0")]
            HiSlot0 = 33,

            /// <summary>
            /// Enum HiSlot1 for value: HiSlot1
            /// </summary>
            [EnumMember(Value = "HiSlot1")]
            HiSlot1 = 34,

            /// <summary>
            /// Enum HiSlot2 for value: HiSlot2
            /// </summary>
            [EnumMember(Value = "HiSlot2")]
            HiSlot2 = 35,

            /// <summary>
            /// Enum HiSlot3 for value: HiSlot3
            /// </summary>
            [EnumMember(Value = "HiSlot3")]
            HiSlot3 = 36,

            /// <summary>
            /// Enum HiSlot4 for value: HiSlot4
            /// </summary>
            [EnumMember(Value = "HiSlot4")]
            HiSlot4 = 37,

            /// <summary>
            /// Enum HiSlot5 for value: HiSlot5
            /// </summary>
            [EnumMember(Value = "HiSlot5")]
            HiSlot5 = 38,

            /// <summary>
            /// Enum HiSlot6 for value: HiSlot6
            /// </summary>
            [EnumMember(Value = "HiSlot6")]
            HiSlot6 = 39,

            /// <summary>
            /// Enum HiSlot7 for value: HiSlot7
            /// </summary>
            [EnumMember(Value = "HiSlot7")]
            HiSlot7 = 40,

            /// <summary>
            /// Enum HiddenModifiers for value: HiddenModifiers
            /// </summary>
            [EnumMember(Value = "HiddenModifiers")]
            HiddenModifiers = 41,

            /// <summary>
            /// Enum Implant for value: Implant
            /// </summary>
            [EnumMember(Value = "Implant")]
            Implant = 42,

            /// <summary>
            /// Enum Impounded for value: Impounded
            /// </summary>
            [EnumMember(Value = "Impounded")]
            Impounded = 43,

            /// <summary>
            /// Enum InfrastructureHangar for value: InfrastructureHangar
            /// </summary>
            [EnumMember(Value = "InfrastructureHangar")]
            InfrastructureHangar = 44,

            /// <summary>
            /// Enum JunkyardReprocessed for value: JunkyardReprocessed
            /// </summary>
            [EnumMember(Value = "JunkyardReprocessed")]
            JunkyardReprocessed = 45,

            /// <summary>
            /// Enum JunkyardTrashed for value: JunkyardTrashed
            /// </summary>
            [EnumMember(Value = "JunkyardTrashed")]
            JunkyardTrashed = 46,

            /// <summary>
            /// Enum LoSlot0 for value: LoSlot0
            /// </summary>
            [EnumMember(Value = "LoSlot0")]
            LoSlot0 = 47,

            /// <summary>
            /// Enum LoSlot1 for value: LoSlot1
            /// </summary>
            [EnumMember(Value = "LoSlot1")]
            LoSlot1 = 48,

            /// <summary>
            /// Enum LoSlot2 for value: LoSlot2
            /// </summary>
            [EnumMember(Value = "LoSlot2")]
            LoSlot2 = 49,

            /// <summary>
            /// Enum LoSlot3 for value: LoSlot3
            /// </summary>
            [EnumMember(Value = "LoSlot3")]
            LoSlot3 = 50,

            /// <summary>
            /// Enum LoSlot4 for value: LoSlot4
            /// </summary>
            [EnumMember(Value = "LoSlot4")]
            LoSlot4 = 51,

            /// <summary>
            /// Enum LoSlot5 for value: LoSlot5
            /// </summary>
            [EnumMember(Value = "LoSlot5")]
            LoSlot5 = 52,

            /// <summary>
            /// Enum LoSlot6 for value: LoSlot6
            /// </summary>
            [EnumMember(Value = "LoSlot6")]
            LoSlot6 = 53,

            /// <summary>
            /// Enum LoSlot7 for value: LoSlot7
            /// </summary>
            [EnumMember(Value = "LoSlot7")]
            LoSlot7 = 54,

            /// <summary>
            /// Enum Locked for value: Locked
            /// </summary>
            [EnumMember(Value = "Locked")]
            Locked = 55,

            /// <summary>
            /// Enum MedSlot0 for value: MedSlot0
            /// </summary>
            [EnumMember(Value = "MedSlot0")]
            MedSlot0 = 56,

            /// <summary>
            /// Enum MedSlot1 for value: MedSlot1
            /// </summary>
            [EnumMember(Value = "MedSlot1")]
            MedSlot1 = 57,

            /// <summary>
            /// Enum MedSlot2 for value: MedSlot2
            /// </summary>
            [EnumMember(Value = "MedSlot2")]
            MedSlot2 = 58,

            /// <summary>
            /// Enum MedSlot3 for value: MedSlot3
            /// </summary>
            [EnumMember(Value = "MedSlot3")]
            MedSlot3 = 59,

            /// <summary>
            /// Enum MedSlot4 for value: MedSlot4
            /// </summary>
            [EnumMember(Value = "MedSlot4")]
            MedSlot4 = 60,

            /// <summary>
            /// Enum MedSlot5 for value: MedSlot5
            /// </summary>
            [EnumMember(Value = "MedSlot5")]
            MedSlot5 = 61,

            /// <summary>
            /// Enum MedSlot6 for value: MedSlot6
            /// </summary>
            [EnumMember(Value = "MedSlot6")]
            MedSlot6 = 62,

            /// <summary>
            /// Enum MedSlot7 for value: MedSlot7
            /// </summary>
            [EnumMember(Value = "MedSlot7")]
            MedSlot7 = 63,

            /// <summary>
            /// Enum MobileDepotHold for value: MobileDepotHold
            /// </summary>
            [EnumMember(Value = "MobileDepotHold")]
            MobileDepotHold = 64,

            /// <summary>
            /// Enum MoonMaterialBay for value: MoonMaterialBay
            /// </summary>
            [EnumMember(Value = "MoonMaterialBay")]
            MoonMaterialBay = 65,

            /// <summary>
            /// Enum OfficeFolder for value: OfficeFolder
            /// </summary>
            [EnumMember(Value = "OfficeFolder")]
            OfficeFolder = 66,

            /// <summary>
            /// Enum Pilot for value: Pilot
            /// </summary>
            [EnumMember(Value = "Pilot")]
            Pilot = 67,

            /// <summary>
            /// Enum PlanetSurface for value: PlanetSurface
            /// </summary>
            [EnumMember(Value = "PlanetSurface")]
            PlanetSurface = 68,

            /// <summary>
            /// Enum QuafeBay for value: QuafeBay
            /// </summary>
            [EnumMember(Value = "QuafeBay")]
            QuafeBay = 69,

            /// <summary>
            /// Enum QuantumCoreRoom for value: QuantumCoreRoom
            /// </summary>
            [EnumMember(Value = "QuantumCoreRoom")]
            QuantumCoreRoom = 70,

            /// <summary>
            /// Enum Reward for value: Reward
            /// </summary>
            [EnumMember(Value = "Reward")]
            Reward = 71,

            /// <summary>
            /// Enum RigSlot0 for value: RigSlot0
            /// </summary>
            [EnumMember(Value = "RigSlot0")]
            RigSlot0 = 72,

            /// <summary>
            /// Enum RigSlot1 for value: RigSlot1
            /// </summary>
            [EnumMember(Value = "RigSlot1")]
            RigSlot1 = 73,

            /// <summary>
            /// Enum RigSlot2 for value: RigSlot2
            /// </summary>
            [EnumMember(Value = "RigSlot2")]
            RigSlot2 = 74,

            /// <summary>
            /// Enum RigSlot3 for value: RigSlot3
            /// </summary>
            [EnumMember(Value = "RigSlot3")]
            RigSlot3 = 75,

            /// <summary>
            /// Enum RigSlot4 for value: RigSlot4
            /// </summary>
            [EnumMember(Value = "RigSlot4")]
            RigSlot4 = 76,

            /// <summary>
            /// Enum RigSlot5 for value: RigSlot5
            /// </summary>
            [EnumMember(Value = "RigSlot5")]
            RigSlot5 = 77,

            /// <summary>
            /// Enum RigSlot6 for value: RigSlot6
            /// </summary>
            [EnumMember(Value = "RigSlot6")]
            RigSlot6 = 78,

            /// <summary>
            /// Enum RigSlot7 for value: RigSlot7
            /// </summary>
            [EnumMember(Value = "RigSlot7")]
            RigSlot7 = 79,

            /// <summary>
            /// Enum SecondaryStorage for value: SecondaryStorage
            /// </summary>
            [EnumMember(Value = "SecondaryStorage")]
            SecondaryStorage = 80,

            /// <summary>
            /// Enum ServiceSlot0 for value: ServiceSlot0
            /// </summary>
            [EnumMember(Value = "ServiceSlot0")]
            ServiceSlot0 = 81,

            /// <summary>
            /// Enum ServiceSlot1 for value: ServiceSlot1
            /// </summary>
            [EnumMember(Value = "ServiceSlot1")]
            ServiceSlot1 = 82,

            /// <summary>
            /// Enum ServiceSlot2 for value: ServiceSlot2
            /// </summary>
            [EnumMember(Value = "ServiceSlot2")]
            ServiceSlot2 = 83,

            /// <summary>
            /// Enum ServiceSlot3 for value: ServiceSlot3
            /// </summary>
            [EnumMember(Value = "ServiceSlot3")]
            ServiceSlot3 = 84,

            /// <summary>
            /// Enum ServiceSlot4 for value: ServiceSlot4
            /// </summary>
            [EnumMember(Value = "ServiceSlot4")]
            ServiceSlot4 = 85,

            /// <summary>
            /// Enum ServiceSlot5 for value: ServiceSlot5
            /// </summary>
            [EnumMember(Value = "ServiceSlot5")]
            ServiceSlot5 = 86,

            /// <summary>
            /// Enum ServiceSlot6 for value: ServiceSlot6
            /// </summary>
            [EnumMember(Value = "ServiceSlot6")]
            ServiceSlot6 = 87,

            /// <summary>
            /// Enum ServiceSlot7 for value: ServiceSlot7
            /// </summary>
            [EnumMember(Value = "ServiceSlot7")]
            ServiceSlot7 = 88,

            /// <summary>
            /// Enum ShipHangar for value: ShipHangar
            /// </summary>
            [EnumMember(Value = "ShipHangar")]
            ShipHangar = 89,

            /// <summary>
            /// Enum ShipOffline for value: ShipOffline
            /// </summary>
            [EnumMember(Value = "ShipOffline")]
            ShipOffline = 90,

            /// <summary>
            /// Enum Skill for value: Skill
            /// </summary>
            [EnumMember(Value = "Skill")]
            Skill = 91,

            /// <summary>
            /// Enum SkillInTraining for value: SkillInTraining
            /// </summary>
            [EnumMember(Value = "SkillInTraining")]
            SkillInTraining = 92,

            /// <summary>
            /// Enum SpecializedAmmoHold for value: SpecializedAmmoHold
            /// </summary>
            [EnumMember(Value = "SpecializedAmmoHold")]
            SpecializedAmmoHold = 93,

            /// <summary>
            /// Enum SpecializedAsteroidHold for value: SpecializedAsteroidHold
            /// </summary>
            [EnumMember(Value = "SpecializedAsteroidHold")]
            SpecializedAsteroidHold = 94,

            /// <summary>
            /// Enum SpecializedCommandCenterHold for value: SpecializedCommandCenterHold
            /// </summary>
            [EnumMember(Value = "SpecializedCommandCenterHold")]
            SpecializedCommandCenterHold = 95,

            /// <summary>
            /// Enum SpecializedFuelBay for value: SpecializedFuelBay
            /// </summary>
            [EnumMember(Value = "SpecializedFuelBay")]
            SpecializedFuelBay = 96,

            /// <summary>
            /// Enum SpecializedGasHold for value: SpecializedGasHold
            /// </summary>
            [EnumMember(Value = "SpecializedGasHold")]
            SpecializedGasHold = 97,

            /// <summary>
            /// Enum SpecializedIceHold for value: SpecializedIceHold
            /// </summary>
            [EnumMember(Value = "SpecializedIceHold")]
            SpecializedIceHold = 98,

            /// <summary>
            /// Enum SpecializedIndustrialShipHold for value: SpecializedIndustrialShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedIndustrialShipHold")]
            SpecializedIndustrialShipHold = 99,

            /// <summary>
            /// Enum SpecializedLargeShipHold for value: SpecializedLargeShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedLargeShipHold")]
            SpecializedLargeShipHold = 100,

            /// <summary>
            /// Enum SpecializedMaterialBay for value: SpecializedMaterialBay
            /// </summary>
            [EnumMember(Value = "SpecializedMaterialBay")]
            SpecializedMaterialBay = 101,

            /// <summary>
            /// Enum SpecializedMediumShipHold for value: SpecializedMediumShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedMediumShipHold")]
            SpecializedMediumShipHold = 102,

            /// <summary>
            /// Enum SpecializedMineralHold for value: SpecializedMineralHold
            /// </summary>
            [EnumMember(Value = "SpecializedMineralHold")]
            SpecializedMineralHold = 103,

            /// <summary>
            /// Enum SpecializedOreHold for value: SpecializedOreHold
            /// </summary>
            [EnumMember(Value = "SpecializedOreHold")]
            SpecializedOreHold = 104,

            /// <summary>
            /// Enum SpecializedPlanetaryCommoditiesHold for value: SpecializedPlanetaryCommoditiesHold
            /// </summary>
            [EnumMember(Value = "SpecializedPlanetaryCommoditiesHold")]
            SpecializedPlanetaryCommoditiesHold = 105,

            /// <summary>
            /// Enum SpecializedSalvageHold for value: SpecializedSalvageHold
            /// </summary>
            [EnumMember(Value = "SpecializedSalvageHold")]
            SpecializedSalvageHold = 106,

            /// <summary>
            /// Enum SpecializedShipHold for value: SpecializedShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedShipHold")]
            SpecializedShipHold = 107,

            /// <summary>
            /// Enum SpecializedSmallShipHold for value: SpecializedSmallShipHold
            /// </summary>
            [EnumMember(Value = "SpecializedSmallShipHold")]
            SpecializedSmallShipHold = 108,

            /// <summary>
            /// Enum StructureActive for value: StructureActive
            /// </summary>
            [EnumMember(Value = "StructureActive")]
            StructureActive = 109,

            /// <summary>
            /// Enum StructureFuel for value: StructureFuel
            /// </summary>
            [EnumMember(Value = "StructureFuel")]
            StructureFuel = 110,

            /// <summary>
            /// Enum StructureInactive for value: StructureInactive
            /// </summary>
            [EnumMember(Value = "StructureInactive")]
            StructureInactive = 111,

            /// <summary>
            /// Enum StructureOffline for value: StructureOffline
            /// </summary>
            [EnumMember(Value = "StructureOffline")]
            StructureOffline = 112,

            /// <summary>
            /// Enum SubSystemBay for value: SubSystemBay
            /// </summary>
            [EnumMember(Value = "SubSystemBay")]
            SubSystemBay = 113,

            /// <summary>
            /// Enum SubSystemSlot0 for value: SubSystemSlot0
            /// </summary>
            [EnumMember(Value = "SubSystemSlot0")]
            SubSystemSlot0 = 114,

            /// <summary>
            /// Enum SubSystemSlot1 for value: SubSystemSlot1
            /// </summary>
            [EnumMember(Value = "SubSystemSlot1")]
            SubSystemSlot1 = 115,

            /// <summary>
            /// Enum SubSystemSlot2 for value: SubSystemSlot2
            /// </summary>
            [EnumMember(Value = "SubSystemSlot2")]
            SubSystemSlot2 = 116,

            /// <summary>
            /// Enum SubSystemSlot3 for value: SubSystemSlot3
            /// </summary>
            [EnumMember(Value = "SubSystemSlot3")]
            SubSystemSlot3 = 117,

            /// <summary>
            /// Enum SubSystemSlot4 for value: SubSystemSlot4
            /// </summary>
            [EnumMember(Value = "SubSystemSlot4")]
            SubSystemSlot4 = 118,

            /// <summary>
            /// Enum SubSystemSlot5 for value: SubSystemSlot5
            /// </summary>
            [EnumMember(Value = "SubSystemSlot5")]
            SubSystemSlot5 = 119,

            /// <summary>
            /// Enum SubSystemSlot6 for value: SubSystemSlot6
            /// </summary>
            [EnumMember(Value = "SubSystemSlot6")]
            SubSystemSlot6 = 120,

            /// <summary>
            /// Enum SubSystemSlot7 for value: SubSystemSlot7
            /// </summary>
            [EnumMember(Value = "SubSystemSlot7")]
            SubSystemSlot7 = 121,

            /// <summary>
            /// Enum Unlocked for value: Unlocked
            /// </summary>
            [EnumMember(Value = "Unlocked")]
            Unlocked = 122,

            /// <summary>
            /// Enum Wallet for value: Wallet
            /// </summary>
            [EnumMember(Value = "Wallet")]
            Wallet = 123,

            /// <summary>
            /// Enum Wardrobe for value: Wardrobe
            /// </summary>
            [EnumMember(Value = "Wardrobe")]
            Wardrobe = 124
        }


        /// <summary>
        /// Gets or Sets LocationFlag
        /// </summary>
        [DataMember(Name = "location_flag", IsRequired = true, EmitDefaultValue = true)]
        public LocationFlagEnum LocationFlag { get; set; }
        /// <summary>
        /// Type of password set if action is of type SetPassword or EnterPassword
        /// </summary>
        /// <value>Type of password set if action is of type SetPassword or EnterPassword</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PasswordTypeEnum
        {
            /// <summary>
            /// Enum Config for value: config
            /// </summary>
            [EnumMember(Value = "config")]
            Config = 1,

            /// <summary>
            /// Enum General for value: general
            /// </summary>
            [EnumMember(Value = "general")]
            General = 2
        }


        /// <summary>
        /// Type of password set if action is of type SetPassword or EnterPassword
        /// </summary>
        /// <value>Type of password set if action is of type SetPassword or EnterPassword</value>
        [DataMember(Name = "password_type", EmitDefaultValue = false)]
        public PasswordTypeEnum? PasswordType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdContainersLogsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdContainersLogsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdContainersLogsGetInner" /> class.
        /// </summary>
        /// <param name="action">action (required).</param>
        /// <param name="characterId">ID of the character who performed the action. (required).</param>
        /// <param name="containerId">ID of the container (required).</param>
        /// <param name="containerTypeId">Type ID of the container (required).</param>
        /// <param name="locationFlag">locationFlag (required).</param>
        /// <param name="locationId">locationId (required).</param>
        /// <param name="loggedAt">Timestamp when this log was created (required).</param>
        /// <param name="newConfigBitmask">newConfigBitmask.</param>
        /// <param name="oldConfigBitmask">oldConfigBitmask.</param>
        /// <param name="passwordType">Type of password set if action is of type SetPassword or EnterPassword.</param>
        /// <param name="quantity">Quantity of the item being acted upon.</param>
        /// <param name="typeId">Type ID of the item being acted upon.</param>
        public CorporationsCorporationIdContainersLogsGetInner(ActionEnum action = default(ActionEnum), long characterId = default(long), long containerId = default(long), long containerTypeId = default(long), LocationFlagEnum locationFlag = default(LocationFlagEnum), long locationId = default(long), DateTime loggedAt = default(DateTime), long newConfigBitmask = default(long), long oldConfigBitmask = default(long), PasswordTypeEnum? passwordType = default(PasswordTypeEnum?), long quantity = default(long), long typeId = default(long))
        {
            this.Action = action;
            this.CharacterId = characterId;
            this.ContainerId = containerId;
            this.ContainerTypeId = containerTypeId;
            this.LocationFlag = locationFlag;
            this.LocationId = locationId;
            this.LoggedAt = loggedAt;
            this.NewConfigBitmask = newConfigBitmask;
            this.OldConfigBitmask = oldConfigBitmask;
            this.PasswordType = passwordType;
            this.Quantity = quantity;
            this.TypeId = typeId;
        }

        /// <summary>
        /// ID of the character who performed the action.
        /// </summary>
        /// <value>ID of the character who performed the action.</value>
        [DataMember(Name = "character_id", IsRequired = true, EmitDefaultValue = true)]
        public long CharacterId { get; set; }

        /// <summary>
        /// ID of the container
        /// </summary>
        /// <value>ID of the container</value>
        [DataMember(Name = "container_id", IsRequired = true, EmitDefaultValue = true)]
        public long ContainerId { get; set; }

        /// <summary>
        /// Type ID of the container
        /// </summary>
        /// <value>Type ID of the container</value>
        [DataMember(Name = "container_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long ContainerTypeId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "location_id", IsRequired = true, EmitDefaultValue = true)]
        public long LocationId { get; set; }

        /// <summary>
        /// Timestamp when this log was created
        /// </summary>
        /// <value>Timestamp when this log was created</value>
        [DataMember(Name = "logged_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LoggedAt { get; set; }

        /// <summary>
        /// Gets or Sets NewConfigBitmask
        /// </summary>
        [DataMember(Name = "new_config_bitmask", EmitDefaultValue = false)]
        public long NewConfigBitmask { get; set; }

        /// <summary>
        /// Gets or Sets OldConfigBitmask
        /// </summary>
        [DataMember(Name = "old_config_bitmask", EmitDefaultValue = false)]
        public long OldConfigBitmask { get; set; }

        /// <summary>
        /// Quantity of the item being acted upon
        /// </summary>
        /// <value>Quantity of the item being acted upon</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public long Quantity { get; set; }

        /// <summary>
        /// Type ID of the item being acted upon
        /// </summary>
        /// <value>Type ID of the item being acted upon</value>
        [DataMember(Name = "type_id", EmitDefaultValue = false)]
        public long TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdContainersLogsGetInner {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  ContainerTypeId: ").Append(ContainerTypeId).Append("\n");
            sb.Append("  LocationFlag: ").Append(LocationFlag).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LoggedAt: ").Append(LoggedAt).Append("\n");
            sb.Append("  NewConfigBitmask: ").Append(NewConfigBitmask).Append("\n");
            sb.Append("  OldConfigBitmask: ").Append(OldConfigBitmask).Append("\n");
            sb.Append("  PasswordType: ").Append(PasswordType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
