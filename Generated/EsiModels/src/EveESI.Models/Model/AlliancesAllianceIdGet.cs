/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// AlliancesAllianceIdGet
    /// </summary>
    [DataContract(Name = "AlliancesAllianceIdGet")]
    public partial class AlliancesAllianceIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlliancesAllianceIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AlliancesAllianceIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlliancesAllianceIdGet" /> class.
        /// </summary>
        /// <param name="creatorCorporationId">ID of the corporation that created the alliance (required).</param>
        /// <param name="creatorId">ID of the character that created the alliance (required).</param>
        /// <param name="dateFounded">dateFounded (required).</param>
        /// <param name="executorCorporationId">the executor corporation ID, if this alliance is not closed.</param>
        /// <param name="factionId">Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare.</param>
        /// <param name="name">the full name of the alliance (required).</param>
        /// <param name="ticker">the short name of the alliance (required).</param>
        public AlliancesAllianceIdGet(long creatorCorporationId = default(long), long creatorId = default(long), DateTime dateFounded = default(DateTime), long executorCorporationId = default(long), long factionId = default(long), string name = default(string), string ticker = default(string))
        {
            this.CreatorCorporationId = creatorCorporationId;
            this.CreatorId = creatorId;
            this.DateFounded = dateFounded;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AlliancesAllianceIdGet and cannot be null");
            }
            this.Name = name;
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new ArgumentNullException("ticker is a required property for AlliancesAllianceIdGet and cannot be null");
            }
            this.Ticker = ticker;
            this.ExecutorCorporationId = executorCorporationId;
            this.FactionId = factionId;
        }

        /// <summary>
        /// ID of the corporation that created the alliance
        /// </summary>
        /// <value>ID of the corporation that created the alliance</value>
        [DataMember(Name = "creator_corporation_id", IsRequired = true, EmitDefaultValue = true)]
        public long CreatorCorporationId { get; set; }

        /// <summary>
        /// ID of the character that created the alliance
        /// </summary>
        /// <value>ID of the character that created the alliance</value>
        [DataMember(Name = "creator_id", IsRequired = true, EmitDefaultValue = true)]
        public long CreatorId { get; set; }

        /// <summary>
        /// Gets or Sets DateFounded
        /// </summary>
        [DataMember(Name = "date_founded", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DateFounded { get; set; }

        /// <summary>
        /// the executor corporation ID, if this alliance is not closed
        /// </summary>
        /// <value>the executor corporation ID, if this alliance is not closed</value>
        [DataMember(Name = "executor_corporation_id", EmitDefaultValue = false)]
        public long ExecutorCorporationId { get; set; }

        /// <summary>
        /// Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
        /// </summary>
        /// <value>Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare</value>
        [DataMember(Name = "faction_id", EmitDefaultValue = false)]
        public long FactionId { get; set; }

        /// <summary>
        /// the full name of the alliance
        /// </summary>
        /// <value>the full name of the alliance</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// the short name of the alliance
        /// </summary>
        /// <value>the short name of the alliance</value>
        [DataMember(Name = "ticker", IsRequired = true, EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlliancesAllianceIdGet {\n");
            sb.Append("  CreatorCorporationId: ").Append(CreatorCorporationId).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  DateFounded: ").Append(DateFounded).Append("\n");
            sb.Append("  ExecutorCorporationId: ").Append(ExecutorCorporationId).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
