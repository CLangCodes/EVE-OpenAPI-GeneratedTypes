/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdShipGet
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdShipGet")]
    public partial class CharactersCharacterIdShipGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdShipGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdShipGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdShipGet" /> class.
        /// </summary>
        /// <param name="shipItemId">Item id&#39;s are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type. (required).</param>
        /// <param name="shipName">shipName (required).</param>
        /// <param name="shipTypeId">shipTypeId (required).</param>
        public CharactersCharacterIdShipGet(long shipItemId = default(long), string shipName = default(string), long shipTypeId = default(long))
        {
            this.ShipItemId = shipItemId;
            // to ensure "shipName" is required (not null)
            if (shipName == null)
            {
                throw new ArgumentNullException("shipName is a required property for CharactersCharacterIdShipGet and cannot be null");
            }
            this.ShipName = shipName;
            this.ShipTypeId = shipTypeId;
        }

        /// <summary>
        /// Item id&#39;s are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
        /// </summary>
        /// <value>Item id&#39;s are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.</value>
        [DataMember(Name = "ship_item_id", IsRequired = true, EmitDefaultValue = true)]
        public long ShipItemId { get; set; }

        /// <summary>
        /// Gets or Sets ShipName
        /// </summary>
        [DataMember(Name = "ship_name", IsRequired = true, EmitDefaultValue = true)]
        public string ShipName { get; set; }

        /// <summary>
        /// Gets or Sets ShipTypeId
        /// </summary>
        [DataMember(Name = "ship_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long ShipTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdShipGet {\n");
            sb.Append("  ShipItemId: ").Append(ShipItemId).Append("\n");
            sb.Append("  ShipName: ").Append(ShipName).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
