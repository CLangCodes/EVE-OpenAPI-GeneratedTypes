/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// ContractsPublicItemsContractIdGetInner
    /// </summary>
    [DataContract(Name = "ContractsPublicItemsContractIdGet_inner")]
    public partial class ContractsPublicItemsContractIdGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsPublicItemsContractIdGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContractsPublicItemsContractIdGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsPublicItemsContractIdGetInner" /> class.
        /// </summary>
        /// <param name="isBlueprintCopy">isBlueprintCopy.</param>
        /// <param name="isIncluded">true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract (required).</param>
        /// <param name="itemId">Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract.</param>
        /// <param name="materialEfficiency">Material Efficiency Level of the blueprint.</param>
        /// <param name="quantity">Number of items in the stack (required).</param>
        /// <param name="recordId">Unique ID for the item, used by the contract system (required).</param>
        /// <param name="runs">Number of runs remaining if the blueprint is a copy, -1 if it is an original.</param>
        /// <param name="timeEfficiency">Time Efficiency Level of the blueprint.</param>
        /// <param name="typeId">Type ID for item (required).</param>
        public ContractsPublicItemsContractIdGetInner(bool isBlueprintCopy = default(bool), bool isIncluded = default(bool), long itemId = default(long), long materialEfficiency = default(long), long quantity = default(long), long recordId = default(long), long runs = default(long), long timeEfficiency = default(long), long typeId = default(long))
        {
            this.IsIncluded = isIncluded;
            this.Quantity = quantity;
            this.RecordId = recordId;
            this.TypeId = typeId;
            this.IsBlueprintCopy = isBlueprintCopy;
            this.ItemId = itemId;
            this.MaterialEfficiency = materialEfficiency;
            this.Runs = runs;
            this.TimeEfficiency = timeEfficiency;
        }

        /// <summary>
        /// Gets or Sets IsBlueprintCopy
        /// </summary>
        [DataMember(Name = "is_blueprint_copy", EmitDefaultValue = true)]
        public bool IsBlueprintCopy { get; set; }

        /// <summary>
        /// true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
        /// </summary>
        /// <value>true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract</value>
        [DataMember(Name = "is_included", IsRequired = true, EmitDefaultValue = true)]
        public bool IsIncluded { get; set; }

        /// <summary>
        /// Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract
        /// </summary>
        /// <value>Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract</value>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public long ItemId { get; set; }

        /// <summary>
        /// Material Efficiency Level of the blueprint
        /// </summary>
        /// <value>Material Efficiency Level of the blueprint</value>
        [DataMember(Name = "material_efficiency", EmitDefaultValue = false)]
        public long MaterialEfficiency { get; set; }

        /// <summary>
        /// Number of items in the stack
        /// </summary>
        /// <value>Number of items in the stack</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public long Quantity { get; set; }

        /// <summary>
        /// Unique ID for the item, used by the contract system
        /// </summary>
        /// <value>Unique ID for the item, used by the contract system</value>
        [DataMember(Name = "record_id", IsRequired = true, EmitDefaultValue = true)]
        public long RecordId { get; set; }

        /// <summary>
        /// Number of runs remaining if the blueprint is a copy, -1 if it is an original
        /// </summary>
        /// <value>Number of runs remaining if the blueprint is a copy, -1 if it is an original</value>
        [DataMember(Name = "runs", EmitDefaultValue = false)]
        public long Runs { get; set; }

        /// <summary>
        /// Time Efficiency Level of the blueprint
        /// </summary>
        /// <value>Time Efficiency Level of the blueprint</value>
        [DataMember(Name = "time_efficiency", EmitDefaultValue = false)]
        public long TimeEfficiency { get; set; }

        /// <summary>
        /// Type ID for item
        /// </summary>
        /// <value>Type ID for item</value>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractsPublicItemsContractIdGetInner {\n");
            sb.Append("  IsBlueprintCopy: ").Append(IsBlueprintCopy).Append("\n");
            sb.Append("  IsIncluded: ").Append(IsIncluded).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  MaterialEfficiency: ").Append(MaterialEfficiency).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Runs: ").Append(Runs).Append("\n");
            sb.Append("  TimeEfficiency: ").Append(TimeEfficiency).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
