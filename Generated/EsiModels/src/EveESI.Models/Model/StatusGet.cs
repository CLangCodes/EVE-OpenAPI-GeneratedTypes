/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// StatusGet
    /// </summary>
    [DataContract(Name = "StatusGet")]
    public partial class StatusGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusGet" /> class.
        /// </summary>
        /// <param name="players">Current online player count (required).</param>
        /// <param name="serverVersion">Running version as string (required).</param>
        /// <param name="startTime">Server start timestamp (required).</param>
        /// <param name="vip">If the server is in VIP mode.</param>
        public StatusGet(int players = default(int), string serverVersion = default(string), DateTime startTime = default(DateTime), bool vip = default(bool))
        {
            this.Players = players;
            // to ensure "serverVersion" is required (not null)
            if (serverVersion == null)
            {
                throw new ArgumentNullException("serverVersion is a required property for StatusGet and cannot be null");
            }
            this.ServerVersion = serverVersion;
            this.StartTime = startTime;
            this.Vip = vip;
        }

        /// <summary>
        /// Current online player count
        /// </summary>
        /// <value>Current online player count</value>
        [DataMember(Name = "players", IsRequired = true, EmitDefaultValue = true)]
        public int Players { get; set; }

        /// <summary>
        /// Running version as string
        /// </summary>
        /// <value>Running version as string</value>
        [DataMember(Name = "server_version", IsRequired = true, EmitDefaultValue = true)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Server start timestamp
        /// </summary>
        /// <value>Server start timestamp</value>
        [DataMember(Name = "start_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// If the server is in VIP mode
        /// </summary>
        /// <value>If the server is in VIP mode</value>
        [DataMember(Name = "vip", EmitDefaultValue = true)]
        public bool Vip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusGet {\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Vip: ").Append(Vip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
