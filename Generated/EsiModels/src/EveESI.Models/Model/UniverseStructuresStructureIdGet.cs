/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseStructuresStructureIdGet
    /// </summary>
    [DataContract(Name = "UniverseStructuresStructureIdGet")]
    public partial class UniverseStructuresStructureIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseStructuresStructureIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseStructuresStructureIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseStructuresStructureIdGet" /> class.
        /// </summary>
        /// <param name="name">The full name of the structure (required).</param>
        /// <param name="ownerId">The ID of the corporation who owns this particular structure (required).</param>
        /// <param name="position">position.</param>
        /// <param name="solarSystemId">solarSystemId (required).</param>
        /// <param name="typeId">typeId.</param>
        public UniverseStructuresStructureIdGet(string name = default(string), long ownerId = default(long), UniverseStructuresStructureIdGetPosition position = default(UniverseStructuresStructureIdGetPosition), long solarSystemId = default(long), long typeId = default(long))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseStructuresStructureIdGet and cannot be null");
            }
            this.Name = name;
            this.OwnerId = ownerId;
            this.SolarSystemId = solarSystemId;
            this.Position = position;
            this.TypeId = typeId;
        }

        /// <summary>
        /// The full name of the structure
        /// </summary>
        /// <value>The full name of the structure</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the corporation who owns this particular structure
        /// </summary>
        /// <value>The ID of the corporation who owns this particular structure</value>
        [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = true)]
        public long OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public UniverseStructuresStructureIdGetPosition Position { get; set; }

        /// <summary>
        /// Gets or Sets SolarSystemId
        /// </summary>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", EmitDefaultValue = false)]
        public long TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseStructuresStructureIdGet {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
