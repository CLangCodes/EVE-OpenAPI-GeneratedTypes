/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdIndustryJobsGetInner
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdIndustryJobsGet_inner")]
    public partial class CorporationsCorporationIdIndustryJobsGetInner
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 2,

            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 3,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 4,

            /// <summary>
            /// Enum Ready for value: ready
            /// </summary>
            [EnumMember(Value = "ready")]
            Ready = 5,

            /// <summary>
            /// Enum Reverted for value: reverted
            /// </summary>
            [EnumMember(Value = "reverted")]
            Reverted = 6
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdIndustryJobsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdIndustryJobsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdIndustryJobsGetInner" /> class.
        /// </summary>
        /// <param name="activityId">Job activity ID (required).</param>
        /// <param name="blueprintId">blueprintId (required).</param>
        /// <param name="blueprintLocationId">Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility (required).</param>
        /// <param name="blueprintTypeId">blueprintTypeId (required).</param>
        /// <param name="completedCharacterId">ID of the character which completed this job.</param>
        /// <param name="completedDate">Date and time when this job was completed.</param>
        /// <param name="cost">The sume of job installation fee and industry facility tax.</param>
        /// <param name="duration">Job duration in seconds (required).</param>
        /// <param name="endDate">Date and time when this job finished (required).</param>
        /// <param name="facilityId">ID of the facility where this job is running (required).</param>
        /// <param name="installerId">ID of the character which installed this job (required).</param>
        /// <param name="jobId">Unique job ID (required).</param>
        /// <param name="licensedRuns">Number of runs blueprint is licensed for.</param>
        /// <param name="locationId">ID of the location for the industry facility (required).</param>
        /// <param name="outputLocationId">Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility (required).</param>
        /// <param name="pauseDate">Date and time when this job was paused (i.e. time when the facility where this job was installed went offline).</param>
        /// <param name="probability">Chance of success for invention.</param>
        /// <param name="productTypeId">Type ID of product (manufactured, copied or invented).</param>
        /// <param name="runs">Number of runs for a manufacturing job, or number of copies to make for a blueprint copy (required).</param>
        /// <param name="startDate">Date and time when this job started (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="successfulRuns">Number of successful runs for this job. Equal to runs unless this is an invention job.</param>
        public CorporationsCorporationIdIndustryJobsGetInner(long activityId = default(long), long blueprintId = default(long), long blueprintLocationId = default(long), long blueprintTypeId = default(long), long completedCharacterId = default(long), DateTime completedDate = default(DateTime), double cost = default(double), long duration = default(long), DateTime endDate = default(DateTime), long facilityId = default(long), long installerId = default(long), long jobId = default(long), long licensedRuns = default(long), long locationId = default(long), long outputLocationId = default(long), DateTime pauseDate = default(DateTime), double probability = default(double), long productTypeId = default(long), long runs = default(long), DateTime startDate = default(DateTime), StatusEnum status = default(StatusEnum), long successfulRuns = default(long))
        {
            this.ActivityId = activityId;
            this.BlueprintId = blueprintId;
            this.BlueprintLocationId = blueprintLocationId;
            this.BlueprintTypeId = blueprintTypeId;
            this.Duration = duration;
            this.EndDate = endDate;
            this.FacilityId = facilityId;
            this.InstallerId = installerId;
            this.JobId = jobId;
            this.LocationId = locationId;
            this.OutputLocationId = outputLocationId;
            this.Runs = runs;
            this.StartDate = startDate;
            this.Status = status;
            this.CompletedCharacterId = completedCharacterId;
            this.CompletedDate = completedDate;
            this.Cost = cost;
            this.LicensedRuns = licensedRuns;
            this.PauseDate = pauseDate;
            this.Probability = probability;
            this.ProductTypeId = productTypeId;
            this.SuccessfulRuns = successfulRuns;
        }

        /// <summary>
        /// Job activity ID
        /// </summary>
        /// <value>Job activity ID</value>
        [DataMember(Name = "activity_id", IsRequired = true, EmitDefaultValue = true)]
        public long ActivityId { get; set; }

        /// <summary>
        /// Gets or Sets BlueprintId
        /// </summary>
        [DataMember(Name = "blueprint_id", IsRequired = true, EmitDefaultValue = true)]
        public long BlueprintId { get; set; }

        /// <summary>
        /// Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
        /// </summary>
        /// <value>Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility</value>
        [DataMember(Name = "blueprint_location_id", IsRequired = true, EmitDefaultValue = true)]
        public long BlueprintLocationId { get; set; }

        /// <summary>
        /// Gets or Sets BlueprintTypeId
        /// </summary>
        [DataMember(Name = "blueprint_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long BlueprintTypeId { get; set; }

        /// <summary>
        /// ID of the character which completed this job
        /// </summary>
        /// <value>ID of the character which completed this job</value>
        [DataMember(Name = "completed_character_id", EmitDefaultValue = false)]
        public long CompletedCharacterId { get; set; }

        /// <summary>
        /// Date and time when this job was completed
        /// </summary>
        /// <value>Date and time when this job was completed</value>
        [DataMember(Name = "completed_date", EmitDefaultValue = false)]
        public DateTime CompletedDate { get; set; }

        /// <summary>
        /// The sume of job installation fee and industry facility tax
        /// </summary>
        /// <value>The sume of job installation fee and industry facility tax</value>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public double Cost { get; set; }

        /// <summary>
        /// Job duration in seconds
        /// </summary>
        /// <value>Job duration in seconds</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public long Duration { get; set; }

        /// <summary>
        /// Date and time when this job finished
        /// </summary>
        /// <value>Date and time when this job finished</value>
        [DataMember(Name = "end_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// ID of the facility where this job is running
        /// </summary>
        /// <value>ID of the facility where this job is running</value>
        [DataMember(Name = "facility_id", IsRequired = true, EmitDefaultValue = true)]
        public long FacilityId { get; set; }

        /// <summary>
        /// ID of the character which installed this job
        /// </summary>
        /// <value>ID of the character which installed this job</value>
        [DataMember(Name = "installer_id", IsRequired = true, EmitDefaultValue = true)]
        public long InstallerId { get; set; }

        /// <summary>
        /// Unique job ID
        /// </summary>
        /// <value>Unique job ID</value>
        [DataMember(Name = "job_id", IsRequired = true, EmitDefaultValue = true)]
        public long JobId { get; set; }

        /// <summary>
        /// Number of runs blueprint is licensed for
        /// </summary>
        /// <value>Number of runs blueprint is licensed for</value>
        [DataMember(Name = "licensed_runs", EmitDefaultValue = false)]
        public long LicensedRuns { get; set; }

        /// <summary>
        /// ID of the location for the industry facility
        /// </summary>
        /// <value>ID of the location for the industry facility</value>
        [DataMember(Name = "location_id", IsRequired = true, EmitDefaultValue = true)]
        public long LocationId { get; set; }

        /// <summary>
        /// Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
        /// </summary>
        /// <value>Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility</value>
        [DataMember(Name = "output_location_id", IsRequired = true, EmitDefaultValue = true)]
        public long OutputLocationId { get; set; }

        /// <summary>
        /// Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
        /// </summary>
        /// <value>Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)</value>
        [DataMember(Name = "pause_date", EmitDefaultValue = false)]
        public DateTime PauseDate { get; set; }

        /// <summary>
        /// Chance of success for invention
        /// </summary>
        /// <value>Chance of success for invention</value>
        [DataMember(Name = "probability", EmitDefaultValue = false)]
        public double Probability { get; set; }

        /// <summary>
        /// Type ID of product (manufactured, copied or invented)
        /// </summary>
        /// <value>Type ID of product (manufactured, copied or invented)</value>
        [DataMember(Name = "product_type_id", EmitDefaultValue = false)]
        public long ProductTypeId { get; set; }

        /// <summary>
        /// Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
        /// </summary>
        /// <value>Number of runs for a manufacturing job, or number of copies to make for a blueprint copy</value>
        [DataMember(Name = "runs", IsRequired = true, EmitDefaultValue = true)]
        public long Runs { get; set; }

        /// <summary>
        /// Date and time when this job started
        /// </summary>
        /// <value>Date and time when this job started</value>
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Number of successful runs for this job. Equal to runs unless this is an invention job
        /// </summary>
        /// <value>Number of successful runs for this job. Equal to runs unless this is an invention job</value>
        [DataMember(Name = "successful_runs", EmitDefaultValue = false)]
        public long SuccessfulRuns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdIndustryJobsGetInner {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  BlueprintId: ").Append(BlueprintId).Append("\n");
            sb.Append("  BlueprintLocationId: ").Append(BlueprintLocationId).Append("\n");
            sb.Append("  BlueprintTypeId: ").Append(BlueprintTypeId).Append("\n");
            sb.Append("  CompletedCharacterId: ").Append(CompletedCharacterId).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FacilityId: ").Append(FacilityId).Append("\n");
            sb.Append("  InstallerId: ").Append(InstallerId).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  LicensedRuns: ").Append(LicensedRuns).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OutputLocationId: ").Append(OutputLocationId).Append("\n");
            sb.Append("  PauseDate: ").Append(PauseDate).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  ProductTypeId: ").Append(ProductTypeId).Append("\n");
            sb.Append("  Runs: ").Append(Runs).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SuccessfulRuns: ").Append(SuccessfulRuns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
