/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// wallet transaction
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdWalletTransactionsGet_inner")]
    public partial class CharactersCharacterIdWalletTransactionsGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdWalletTransactionsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdWalletTransactionsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdWalletTransactionsGetInner" /> class.
        /// </summary>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="date">Date and time of transaction (required).</param>
        /// <param name="isBuy">isBuy (required).</param>
        /// <param name="isPersonal">isPersonal (required).</param>
        /// <param name="journalRefId">journalRefId (required).</param>
        /// <param name="locationId">locationId (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="transactionId">Unique transaction ID (required).</param>
        /// <param name="typeId">typeId (required).</param>
        /// <param name="unitPrice">Amount paid per unit (required).</param>
        public CharactersCharacterIdWalletTransactionsGetInner(long clientId = default(long), DateTime date = default(DateTime), bool isBuy = default(bool), bool isPersonal = default(bool), long journalRefId = default(long), long locationId = default(long), long quantity = default(long), long transactionId = default(long), long typeId = default(long), double unitPrice = default(double))
        {
            this.ClientId = clientId;
            this.Date = date;
            this.IsBuy = isBuy;
            this.IsPersonal = isPersonal;
            this.JournalRefId = journalRefId;
            this.LocationId = locationId;
            this.Quantity = quantity;
            this.TransactionId = transactionId;
            this.TypeId = typeId;
            this.UnitPrice = unitPrice;
        }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = true)]
        public long ClientId { get; set; }

        /// <summary>
        /// Date and time of transaction
        /// </summary>
        /// <value>Date and time of transaction</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets IsBuy
        /// </summary>
        [DataMember(Name = "is_buy", IsRequired = true, EmitDefaultValue = true)]
        public bool IsBuy { get; set; }

        /// <summary>
        /// Gets or Sets IsPersonal
        /// </summary>
        [DataMember(Name = "is_personal", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPersonal { get; set; }

        /// <summary>
        /// Gets or Sets JournalRefId
        /// </summary>
        [DataMember(Name = "journal_ref_id", IsRequired = true, EmitDefaultValue = true)]
        public long JournalRefId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "location_id", IsRequired = true, EmitDefaultValue = true)]
        public long LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public long Quantity { get; set; }

        /// <summary>
        /// Unique transaction ID
        /// </summary>
        /// <value>Unique transaction ID</value>
        [DataMember(Name = "transaction_id", IsRequired = true, EmitDefaultValue = true)]
        public long TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Amount paid per unit
        /// </summary>
        /// <value>Amount paid per unit</value>
        [DataMember(Name = "unit_price", IsRequired = true, EmitDefaultValue = true)]
        public double UnitPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdWalletTransactionsGetInner {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  IsBuy: ").Append(IsBuy).Append("\n");
            sb.Append("  IsPersonal: ").Append(IsPersonal).Append("\n");
            sb.Append("  JournalRefId: ").Append(JournalRefId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
