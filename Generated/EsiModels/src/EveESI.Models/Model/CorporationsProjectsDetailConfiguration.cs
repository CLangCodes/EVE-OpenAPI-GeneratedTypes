/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;
using System.Reflection;

namespace EveESI.Models.Model
{
    /// <summary>
    /// Project&#39;s configuration
    /// </summary>
    [JsonConverter(typeof(CorporationsProjectsDetailConfigurationJsonConverter))]
    [DataContract(Name = "CorporationsProjectsDetail_configuration")]
    public partial class CorporationsProjectsDetailConfiguration : AbstractOpenAPISchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="CaptureFwComplex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CaptureFwComplex.</param>
        public CorporationsProjectsDetailConfiguration(CaptureFwComplex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="DamageShip" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DamageShip.</param>
        public CorporationsProjectsDetailConfiguration(DamageShip actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="DefendFwComplex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DefendFwComplex.</param>
        public CorporationsProjectsDetailConfiguration(DefendFwComplex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="DeliverItem" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DeliverItem.</param>
        public CorporationsProjectsDetailConfiguration(DeliverItem actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="DestroyNpc" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DestroyNpc.</param>
        public CorporationsProjectsDetailConfiguration(DestroyNpc actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="DestroyShip" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DestroyShip.</param>
        public CorporationsProjectsDetailConfiguration(DestroyShip actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="EarnLoyaltyPoint" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EarnLoyaltyPoint.</param>
        public CorporationsProjectsDetailConfiguration(EarnLoyaltyPoint actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="LostShip" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LostShip.</param>
        public CorporationsProjectsDetailConfiguration(LostShip actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="Manual" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Manual.</param>
        public CorporationsProjectsDetailConfiguration(Manual actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="ManufactureItem" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ManufactureItem.</param>
        public CorporationsProjectsDetailConfiguration(ManufactureItem actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="MineMaterial" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MineMaterial.</param>
        public CorporationsProjectsDetailConfiguration(MineMaterial actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="RemoteBoostShield" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RemoteBoostShield.</param>
        public CorporationsProjectsDetailConfiguration(RemoteBoostShield actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="RemoteRepairArmor" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RemoteRepairArmor.</param>
        public CorporationsProjectsDetailConfiguration(RemoteRepairArmor actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="SalvageWreck" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SalvageWreck.</param>
        public CorporationsProjectsDetailConfiguration(SalvageWreck actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="ScanSignature" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ScanSignature.</param>
        public CorporationsProjectsDetailConfiguration(ScanSignature actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="ShipInsurance" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ShipInsurance.</param>
        public CorporationsProjectsDetailConfiguration(ShipInsurance actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsProjectsDetailConfiguration" /> class
        /// with the <see cref="Unknown" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Unknown.</param>
        public CorporationsProjectsDetailConfiguration(Unknown actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CaptureFwComplex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DamageShip))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DefendFwComplex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DeliverItem))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DestroyNpc))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DestroyShip))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EarnLoyaltyPoint))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LostShip))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Manual))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ManufactureItem))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MineMaterial))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RemoteBoostShield))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RemoteRepairArmor))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SalvageWreck))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ScanSignature))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ShipInsurance))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Unknown))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CaptureFwComplex, DamageShip, DefendFwComplex, DeliverItem, DestroyNpc, DestroyShip, EarnLoyaltyPoint, LostShip, Manual, ManufactureItem, MineMaterial, RemoteBoostShield, RemoteRepairArmor, SalvageWreck, ScanSignature, ShipInsurance, Unknown");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CaptureFwComplex`. If the actual instance is not `CaptureFwComplex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CaptureFwComplex</returns>
        public CaptureFwComplex GetCaptureFwComplex()
        {
            return (CaptureFwComplex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DamageShip`. If the actual instance is not `DamageShip`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DamageShip</returns>
        public DamageShip GetDamageShip()
        {
            return (DamageShip)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DefendFwComplex`. If the actual instance is not `DefendFwComplex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DefendFwComplex</returns>
        public DefendFwComplex GetDefendFwComplex()
        {
            return (DefendFwComplex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DeliverItem`. If the actual instance is not `DeliverItem`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DeliverItem</returns>
        public DeliverItem GetDeliverItem()
        {
            return (DeliverItem)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DestroyNpc`. If the actual instance is not `DestroyNpc`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DestroyNpc</returns>
        public DestroyNpc GetDestroyNpc()
        {
            return (DestroyNpc)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DestroyShip`. If the actual instance is not `DestroyShip`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DestroyShip</returns>
        public DestroyShip GetDestroyShip()
        {
            return (DestroyShip)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EarnLoyaltyPoint`. If the actual instance is not `EarnLoyaltyPoint`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EarnLoyaltyPoint</returns>
        public EarnLoyaltyPoint GetEarnLoyaltyPoint()
        {
            return (EarnLoyaltyPoint)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LostShip`. If the actual instance is not `LostShip`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LostShip</returns>
        public LostShip GetLostShip()
        {
            return (LostShip)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Manual`. If the actual instance is not `Manual`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Manual</returns>
        public Manual GetManual()
        {
            return (Manual)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ManufactureItem`. If the actual instance is not `ManufactureItem`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ManufactureItem</returns>
        public ManufactureItem GetManufactureItem()
        {
            return (ManufactureItem)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MineMaterial`. If the actual instance is not `MineMaterial`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MineMaterial</returns>
        public MineMaterial GetMineMaterial()
        {
            return (MineMaterial)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RemoteBoostShield`. If the actual instance is not `RemoteBoostShield`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RemoteBoostShield</returns>
        public RemoteBoostShield GetRemoteBoostShield()
        {
            return (RemoteBoostShield)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RemoteRepairArmor`. If the actual instance is not `RemoteRepairArmor`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RemoteRepairArmor</returns>
        public RemoteRepairArmor GetRemoteRepairArmor()
        {
            return (RemoteRepairArmor)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SalvageWreck`. If the actual instance is not `SalvageWreck`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SalvageWreck</returns>
        public SalvageWreck GetSalvageWreck()
        {
            return (SalvageWreck)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ScanSignature`. If the actual instance is not `ScanSignature`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ScanSignature</returns>
        public ScanSignature GetScanSignature()
        {
            return (ScanSignature)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ShipInsurance`. If the actual instance is not `ShipInsurance`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ShipInsurance</returns>
        public ShipInsurance GetShipInsurance()
        {
            return (ShipInsurance)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Unknown`. If the actual instance is not `Unknown`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Unknown</returns>
        public Unknown GetUnknown()
        {
            return (Unknown)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporationsProjectsDetailConfiguration {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CorporationsProjectsDetailConfiguration.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CorporationsProjectsDetailConfiguration
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CorporationsProjectsDetailConfiguration</returns>
        public static CorporationsProjectsDetailConfiguration FromJson(string jsonString)
        {
            CorporationsProjectsDetailConfiguration newCorporationsProjectsDetailConfiguration = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCorporationsProjectsDetailConfiguration;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CaptureFwComplex).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<CaptureFwComplex>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<CaptureFwComplex>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CaptureFwComplex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CaptureFwComplex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DamageShip).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DamageShip>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DamageShip>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DamageShip");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DamageShip: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DefendFwComplex).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DefendFwComplex>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DefendFwComplex>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DefendFwComplex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DefendFwComplex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DeliverItem).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DeliverItem>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DeliverItem>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DeliverItem");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DeliverItem: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DestroyNpc).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DestroyNpc>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DestroyNpc>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DestroyNpc");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DestroyNpc: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DestroyShip).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DestroyShip>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<DestroyShip>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DestroyShip");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DestroyShip: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EarnLoyaltyPoint).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<EarnLoyaltyPoint>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<EarnLoyaltyPoint>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("EarnLoyaltyPoint");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EarnLoyaltyPoint: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LostShip).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<LostShip>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<LostShip>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LostShip");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LostShip: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Manual).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<Manual>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<Manual>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Manual");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Manual: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ManufactureItem).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<ManufactureItem>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<ManufactureItem>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ManufactureItem");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ManufactureItem: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MineMaterial).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<MineMaterial>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<MineMaterial>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MineMaterial");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MineMaterial: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RemoteBoostShield).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<RemoteBoostShield>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<RemoteBoostShield>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RemoteBoostShield");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RemoteBoostShield: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RemoteRepairArmor).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<RemoteRepairArmor>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<RemoteRepairArmor>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RemoteRepairArmor");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RemoteRepairArmor: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SalvageWreck).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<SalvageWreck>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<SalvageWreck>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SalvageWreck");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SalvageWreck: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ScanSignature).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<ScanSignature>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<ScanSignature>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ScanSignature");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ScanSignature: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ShipInsurance).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<ShipInsurance>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<ShipInsurance>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ShipInsurance");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ShipInsurance: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Unknown).GetProperty("AdditionalProperties") == null)
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<Unknown>(jsonString, CorporationsProjectsDetailConfiguration.SerializerSettings));
                }
                else
                {
                    newCorporationsProjectsDetailConfiguration = new CorporationsProjectsDetailConfiguration(JsonConvert.DeserializeObject<Unknown>(jsonString, CorporationsProjectsDetailConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Unknown");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Unknown: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCorporationsProjectsDetailConfiguration;
        }

    }

    /// <summary>
    /// Custom JSON converter for CorporationsProjectsDetailConfiguration
    /// </summary>
    public class CorporationsProjectsDetailConfigurationJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CorporationsProjectsDetailConfiguration).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return CorporationsProjectsDetailConfiguration.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return CorporationsProjectsDetailConfiguration.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
