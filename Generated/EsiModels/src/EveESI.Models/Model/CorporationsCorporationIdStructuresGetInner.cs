/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdStructuresGetInner
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdStructuresGet_inner")]
    public partial class CorporationsCorporationIdStructuresGetInner
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum AnchorVulnerable for value: anchor_vulnerable
            /// </summary>
            [EnumMember(Value = "anchor_vulnerable")]
            AnchorVulnerable = 1,

            /// <summary>
            /// Enum Anchoring for value: anchoring
            /// </summary>
            [EnumMember(Value = "anchoring")]
            Anchoring = 2,

            /// <summary>
            /// Enum ArmorReinforce for value: armor_reinforce
            /// </summary>
            [EnumMember(Value = "armor_reinforce")]
            ArmorReinforce = 3,

            /// <summary>
            /// Enum ArmorVulnerable for value: armor_vulnerable
            /// </summary>
            [EnumMember(Value = "armor_vulnerable")]
            ArmorVulnerable = 4,

            /// <summary>
            /// Enum DeployVulnerable for value: deploy_vulnerable
            /// </summary>
            [EnumMember(Value = "deploy_vulnerable")]
            DeployVulnerable = 5,

            /// <summary>
            /// Enum FittingInvulnerable for value: fitting_invulnerable
            /// </summary>
            [EnumMember(Value = "fitting_invulnerable")]
            FittingInvulnerable = 6,

            /// <summary>
            /// Enum HullReinforce for value: hull_reinforce
            /// </summary>
            [EnumMember(Value = "hull_reinforce")]
            HullReinforce = 7,

            /// <summary>
            /// Enum HullVulnerable for value: hull_vulnerable
            /// </summary>
            [EnumMember(Value = "hull_vulnerable")]
            HullVulnerable = 8,

            /// <summary>
            /// Enum OnlineDeprecated for value: online_deprecated
            /// </summary>
            [EnumMember(Value = "online_deprecated")]
            OnlineDeprecated = 9,

            /// <summary>
            /// Enum OnliningVulnerable for value: onlining_vulnerable
            /// </summary>
            [EnumMember(Value = "onlining_vulnerable")]
            OnliningVulnerable = 10,

            /// <summary>
            /// Enum ShieldVulnerable for value: shield_vulnerable
            /// </summary>
            [EnumMember(Value = "shield_vulnerable")]
            ShieldVulnerable = 11,

            /// <summary>
            /// Enum Unanchored for value: unanchored
            /// </summary>
            [EnumMember(Value = "unanchored")]
            Unanchored = 12,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 13
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdStructuresGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdStructuresGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdStructuresGetInner" /> class.
        /// </summary>
        /// <param name="corporationId">ID of the corporation that owns the structure (required).</param>
        /// <param name="fuelExpires">Date on which the structure will run out of fuel.</param>
        /// <param name="name">The structure name.</param>
        /// <param name="nextReinforceApply">The date and time when the structure&#39;s newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect.</param>
        /// <param name="nextReinforceHour">The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply.</param>
        /// <param name="profileId">The id of the ACL profile for this citadel (required).</param>
        /// <param name="reinforceHour">The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property.</param>
        /// <param name="services">Contains a list of service upgrades, and their state.</param>
        /// <param name="state">state (required).</param>
        /// <param name="stateTimerEnd">Date at which the structure will move to it&#39;s next state.</param>
        /// <param name="stateTimerStart">Date at which the structure entered it&#39;s current state.</param>
        /// <param name="structureId">The Item ID of the structure (required).</param>
        /// <param name="systemId">The solar system the structure is in (required).</param>
        /// <param name="typeId">The type id of the structure (required).</param>
        /// <param name="unanchorsAt">Date at which the structure will unanchor.</param>
        public CorporationsCorporationIdStructuresGetInner(long corporationId = default(long), DateTime fuelExpires = default(DateTime), string name = default(string), DateTime nextReinforceApply = default(DateTime), long nextReinforceHour = default(long), long profileId = default(long), long reinforceHour = default(long), List<CorporationsCorporationIdStructuresGetInnerServicesInner> services = default(List<CorporationsCorporationIdStructuresGetInnerServicesInner>), StateEnum state = default(StateEnum), DateTime stateTimerEnd = default(DateTime), DateTime stateTimerStart = default(DateTime), long structureId = default(long), long systemId = default(long), long typeId = default(long), DateTime unanchorsAt = default(DateTime))
        {
            this.CorporationId = corporationId;
            this.ProfileId = profileId;
            this.State = state;
            this.StructureId = structureId;
            this.SystemId = systemId;
            this.TypeId = typeId;
            this.FuelExpires = fuelExpires;
            this.Name = name;
            this.NextReinforceApply = nextReinforceApply;
            this.NextReinforceHour = nextReinforceHour;
            this.ReinforceHour = reinforceHour;
            this.Services = services;
            this.StateTimerEnd = stateTimerEnd;
            this.StateTimerStart = stateTimerStart;
            this.UnanchorsAt = unanchorsAt;
        }

        /// <summary>
        /// ID of the corporation that owns the structure
        /// </summary>
        /// <value>ID of the corporation that owns the structure</value>
        [DataMember(Name = "corporation_id", IsRequired = true, EmitDefaultValue = true)]
        public long CorporationId { get; set; }

        /// <summary>
        /// Date on which the structure will run out of fuel
        /// </summary>
        /// <value>Date on which the structure will run out of fuel</value>
        [DataMember(Name = "fuel_expires", EmitDefaultValue = false)]
        public DateTime FuelExpires { get; set; }

        /// <summary>
        /// The structure name
        /// </summary>
        /// <value>The structure name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The date and time when the structure&#39;s newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
        /// </summary>
        /// <value>The date and time when the structure&#39;s newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect</value>
        [DataMember(Name = "next_reinforce_apply", EmitDefaultValue = false)]
        public DateTime NextReinforceApply { get; set; }

        /// <summary>
        /// The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
        /// </summary>
        /// <value>The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply</value>
        [DataMember(Name = "next_reinforce_hour", EmitDefaultValue = false)]
        public long NextReinforceHour { get; set; }

        /// <summary>
        /// The id of the ACL profile for this citadel
        /// </summary>
        /// <value>The id of the ACL profile for this citadel</value>
        [DataMember(Name = "profile_id", IsRequired = true, EmitDefaultValue = true)]
        public long ProfileId { get; set; }

        /// <summary>
        /// The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
        /// </summary>
        /// <value>The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property</value>
        [DataMember(Name = "reinforce_hour", EmitDefaultValue = false)]
        public long ReinforceHour { get; set; }

        /// <summary>
        /// Contains a list of service upgrades, and their state
        /// </summary>
        /// <value>Contains a list of service upgrades, and their state</value>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public List<CorporationsCorporationIdStructuresGetInnerServicesInner> Services { get; set; }

        /// <summary>
        /// Date at which the structure will move to it&#39;s next state
        /// </summary>
        /// <value>Date at which the structure will move to it&#39;s next state</value>
        [DataMember(Name = "state_timer_end", EmitDefaultValue = false)]
        public DateTime StateTimerEnd { get; set; }

        /// <summary>
        /// Date at which the structure entered it&#39;s current state
        /// </summary>
        /// <value>Date at which the structure entered it&#39;s current state</value>
        [DataMember(Name = "state_timer_start", EmitDefaultValue = false)]
        public DateTime StateTimerStart { get; set; }

        /// <summary>
        /// The Item ID of the structure
        /// </summary>
        /// <value>The Item ID of the structure</value>
        [DataMember(Name = "structure_id", IsRequired = true, EmitDefaultValue = true)]
        public long StructureId { get; set; }

        /// <summary>
        /// The solar system the structure is in
        /// </summary>
        /// <value>The solar system the structure is in</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SystemId { get; set; }

        /// <summary>
        /// The type id of the structure
        /// </summary>
        /// <value>The type id of the structure</value>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Date at which the structure will unanchor
        /// </summary>
        /// <value>Date at which the structure will unanchor</value>
        [DataMember(Name = "unanchors_at", EmitDefaultValue = false)]
        public DateTime UnanchorsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdStructuresGetInner {\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  FuelExpires: ").Append(FuelExpires).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NextReinforceApply: ").Append(NextReinforceApply).Append("\n");
            sb.Append("  NextReinforceHour: ").Append(NextReinforceHour).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ReinforceHour: ").Append(ReinforceHour).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateTimerEnd: ").Append(StateTimerEnd).Append("\n");
            sb.Append("  StateTimerStart: ").Append(StateTimerStart).Append("\n");
            sb.Append("  StructureId: ").Append(StructureId).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  UnanchorsAt: ").Append(UnanchorsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
