/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdPlanetsPlanetIdGet
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdPlanetsPlanetIdGet")]
    public partial class CharactersCharacterIdPlanetsPlanetIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsPlanetIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdPlanetsPlanetIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsPlanetIdGet" /> class.
        /// </summary>
        /// <param name="links">links (required).</param>
        /// <param name="pins">pins (required).</param>
        /// <param name="routes">routes (required).</param>
        public CharactersCharacterIdPlanetsPlanetIdGet(List<CharactersCharacterIdPlanetsPlanetIdGetLinksInner> links = default(List<CharactersCharacterIdPlanetsPlanetIdGetLinksInner>), List<CharactersCharacterIdPlanetsPlanetIdGetPinsInner> pins = default(List<CharactersCharacterIdPlanetsPlanetIdGetPinsInner>), List<CharactersCharacterIdPlanetsPlanetIdGetRoutesInner> routes = default(List<CharactersCharacterIdPlanetsPlanetIdGetRoutesInner>))
        {
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new ArgumentNullException("links is a required property for CharactersCharacterIdPlanetsPlanetIdGet and cannot be null");
            }
            this.Links = links;
            // to ensure "pins" is required (not null)
            if (pins == null)
            {
                throw new ArgumentNullException("pins is a required property for CharactersCharacterIdPlanetsPlanetIdGet and cannot be null");
            }
            this.Pins = pins;
            // to ensure "routes" is required (not null)
            if (routes == null)
            {
                throw new ArgumentNullException("routes is a required property for CharactersCharacterIdPlanetsPlanetIdGet and cannot be null");
            }
            this.Routes = routes;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", IsRequired = true, EmitDefaultValue = true)]
        public List<CharactersCharacterIdPlanetsPlanetIdGetLinksInner> Links { get; set; }

        /// <summary>
        /// Gets or Sets Pins
        /// </summary>
        [DataMember(Name = "pins", IsRequired = true, EmitDefaultValue = true)]
        public List<CharactersCharacterIdPlanetsPlanetIdGetPinsInner> Pins { get; set; }

        /// <summary>
        /// Gets or Sets Routes
        /// </summary>
        [DataMember(Name = "routes", IsRequired = true, EmitDefaultValue = true)]
        public List<CharactersCharacterIdPlanetsPlanetIdGetRoutesInner> Routes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdPlanetsPlanetIdGet {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
