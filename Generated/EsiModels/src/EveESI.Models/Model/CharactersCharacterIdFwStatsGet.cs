/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdFwStatsGet
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdFwStatsGet")]
    public partial class CharactersCharacterIdFwStatsGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdFwStatsGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdFwStatsGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdFwStatsGet" /> class.
        /// </summary>
        /// <param name="currentRank">The given character&#39;s current faction rank.</param>
        /// <param name="enlistedOn">The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare.</param>
        /// <param name="factionId">The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare.</param>
        /// <param name="highestRank">The given character&#39;s highest faction rank achieved.</param>
        /// <param name="kills">kills (required).</param>
        /// <param name="victoryPoints">victoryPoints (required).</param>
        public CharactersCharacterIdFwStatsGet(long currentRank = default(long), DateTime enlistedOn = default(DateTime), long factionId = default(long), long highestRank = default(long), CharactersCharacterIdFwStatsGetKills kills = default(CharactersCharacterIdFwStatsGetKills), CharactersCharacterIdFwStatsGetVictoryPoints victoryPoints = default(CharactersCharacterIdFwStatsGetVictoryPoints))
        {
            // to ensure "kills" is required (not null)
            if (kills == null)
            {
                throw new ArgumentNullException("kills is a required property for CharactersCharacterIdFwStatsGet and cannot be null");
            }
            this.Kills = kills;
            // to ensure "victoryPoints" is required (not null)
            if (victoryPoints == null)
            {
                throw new ArgumentNullException("victoryPoints is a required property for CharactersCharacterIdFwStatsGet and cannot be null");
            }
            this.VictoryPoints = victoryPoints;
            this.CurrentRank = currentRank;
            this.EnlistedOn = enlistedOn;
            this.FactionId = factionId;
            this.HighestRank = highestRank;
        }

        /// <summary>
        /// The given character&#39;s current faction rank
        /// </summary>
        /// <value>The given character&#39;s current faction rank</value>
        [DataMember(Name = "current_rank", EmitDefaultValue = false)]
        public long CurrentRank { get; set; }

        /// <summary>
        /// The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare
        /// </summary>
        /// <value>The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare</value>
        [DataMember(Name = "enlisted_on", EmitDefaultValue = false)]
        public DateTime EnlistedOn { get; set; }

        /// <summary>
        /// The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare
        /// </summary>
        /// <value>The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare</value>
        [DataMember(Name = "faction_id", EmitDefaultValue = false)]
        public long FactionId { get; set; }

        /// <summary>
        /// The given character&#39;s highest faction rank achieved
        /// </summary>
        /// <value>The given character&#39;s highest faction rank achieved</value>
        [DataMember(Name = "highest_rank", EmitDefaultValue = false)]
        public long HighestRank { get; set; }

        /// <summary>
        /// Gets or Sets Kills
        /// </summary>
        [DataMember(Name = "kills", IsRequired = true, EmitDefaultValue = true)]
        public CharactersCharacterIdFwStatsGetKills Kills { get; set; }

        /// <summary>
        /// Gets or Sets VictoryPoints
        /// </summary>
        [DataMember(Name = "victory_points", IsRequired = true, EmitDefaultValue = true)]
        public CharactersCharacterIdFwStatsGetVictoryPoints VictoryPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdFwStatsGet {\n");
            sb.Append("  CurrentRank: ").Append(CurrentRank).Append("\n");
            sb.Append("  EnlistedOn: ").Append(EnlistedOn).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  HighestRank: ").Append(HighestRank).Append("\n");
            sb.Append("  Kills: ").Append(Kills).Append("\n");
            sb.Append("  VictoryPoints: ").Append(VictoryPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
