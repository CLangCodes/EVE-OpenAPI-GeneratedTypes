/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// IndustryFacilitiesGetInner
    /// </summary>
    [DataContract(Name = "IndustryFacilitiesGet_inner")]
    public partial class IndustryFacilitiesGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndustryFacilitiesGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IndustryFacilitiesGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IndustryFacilitiesGetInner" /> class.
        /// </summary>
        /// <param name="facilityId">ID of the facility (required).</param>
        /// <param name="ownerId">Owner of the facility (required).</param>
        /// <param name="regionId">Region ID where the facility is (required).</param>
        /// <param name="solarSystemId">Solar system ID where the facility is (required).</param>
        /// <param name="tax">Tax imposed by the facility.</param>
        /// <param name="typeId">Type ID of the facility (required).</param>
        public IndustryFacilitiesGetInner(long facilityId = default(long), long ownerId = default(long), long regionId = default(long), long solarSystemId = default(long), double tax = default(double), long typeId = default(long))
        {
            this.FacilityId = facilityId;
            this.OwnerId = ownerId;
            this.RegionId = regionId;
            this.SolarSystemId = solarSystemId;
            this.TypeId = typeId;
            this.Tax = tax;
        }

        /// <summary>
        /// ID of the facility
        /// </summary>
        /// <value>ID of the facility</value>
        [DataMember(Name = "facility_id", IsRequired = true, EmitDefaultValue = true)]
        public long FacilityId { get; set; }

        /// <summary>
        /// Owner of the facility
        /// </summary>
        /// <value>Owner of the facility</value>
        [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = true)]
        public long OwnerId { get; set; }

        /// <summary>
        /// Region ID where the facility is
        /// </summary>
        /// <value>Region ID where the facility is</value>
        [DataMember(Name = "region_id", IsRequired = true, EmitDefaultValue = true)]
        public long RegionId { get; set; }

        /// <summary>
        /// Solar system ID where the facility is
        /// </summary>
        /// <value>Solar system ID where the facility is</value>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Tax imposed by the facility
        /// </summary>
        /// <value>Tax imposed by the facility</value>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public double Tax { get; set; }

        /// <summary>
        /// Type ID of the facility
        /// </summary>
        /// <value>Type ID of the facility</value>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndustryFacilitiesGetInner {\n");
            sb.Append("  FacilityId: ").Append(FacilityId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
