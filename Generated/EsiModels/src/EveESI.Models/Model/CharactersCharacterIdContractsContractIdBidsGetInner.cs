/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdContractsContractIdBidsGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdContractsContractIdBidsGet_inner")]
    public partial class CharactersCharacterIdContractsContractIdBidsGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdContractsContractIdBidsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdContractsContractIdBidsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdContractsContractIdBidsGetInner" /> class.
        /// </summary>
        /// <param name="amount">The amount bid, in ISK (required).</param>
        /// <param name="bidId">Unique ID for the bid (required).</param>
        /// <param name="bidderId">Character ID of the bidder (required).</param>
        /// <param name="dateBid">Datetime when the bid was placed (required).</param>
        public CharactersCharacterIdContractsContractIdBidsGetInner(double amount = default(double), long bidId = default(long), long bidderId = default(long), DateTime dateBid = default(DateTime))
        {
            this.Amount = amount;
            this.BidId = bidId;
            this.BidderId = bidderId;
            this.DateBid = dateBid;
        }

        /// <summary>
        /// The amount bid, in ISK
        /// </summary>
        /// <value>The amount bid, in ISK</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public double Amount { get; set; }

        /// <summary>
        /// Unique ID for the bid
        /// </summary>
        /// <value>Unique ID for the bid</value>
        [DataMember(Name = "bid_id", IsRequired = true, EmitDefaultValue = true)]
        public long BidId { get; set; }

        /// <summary>
        /// Character ID of the bidder
        /// </summary>
        /// <value>Character ID of the bidder</value>
        [DataMember(Name = "bidder_id", IsRequired = true, EmitDefaultValue = true)]
        public long BidderId { get; set; }

        /// <summary>
        /// Datetime when the bid was placed
        /// </summary>
        /// <value>Datetime when the bid was placed</value>
        [DataMember(Name = "date_bid", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DateBid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdContractsContractIdBidsGetInner {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BidId: ").Append(BidId).Append("\n");
            sb.Append("  BidderId: ").Append(BidderId).Append("\n");
            sb.Append("  DateBid: ").Append(DateBid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
