/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdPlanetsGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdPlanetsGet_inner")]
    public partial class CharactersCharacterIdPlanetsGetInner
    {
        /// <summary>
        /// Defines PlanetType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlanetTypeEnum
        {
            /// <summary>
            /// Enum Temperate for value: temperate
            /// </summary>
            [EnumMember(Value = "temperate")]
            Temperate = 1,

            /// <summary>
            /// Enum Barren for value: barren
            /// </summary>
            [EnumMember(Value = "barren")]
            Barren = 2,

            /// <summary>
            /// Enum Oceanic for value: oceanic
            /// </summary>
            [EnumMember(Value = "oceanic")]
            Oceanic = 3,

            /// <summary>
            /// Enum Ice for value: ice
            /// </summary>
            [EnumMember(Value = "ice")]
            Ice = 4,

            /// <summary>
            /// Enum Gas for value: gas
            /// </summary>
            [EnumMember(Value = "gas")]
            Gas = 5,

            /// <summary>
            /// Enum Lava for value: lava
            /// </summary>
            [EnumMember(Value = "lava")]
            Lava = 6,

            /// <summary>
            /// Enum Storm for value: storm
            /// </summary>
            [EnumMember(Value = "storm")]
            Storm = 7,

            /// <summary>
            /// Enum Plasma for value: plasma
            /// </summary>
            [EnumMember(Value = "plasma")]
            Plasma = 8
        }


        /// <summary>
        /// Gets or Sets PlanetType
        /// </summary>
        [DataMember(Name = "planet_type", IsRequired = true, EmitDefaultValue = true)]
        public PlanetTypeEnum PlanetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdPlanetsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsGetInner" /> class.
        /// </summary>
        /// <param name="lastUpdate">lastUpdate (required).</param>
        /// <param name="numPins">numPins (required).</param>
        /// <param name="ownerId">ownerId (required).</param>
        /// <param name="planetId">planetId (required).</param>
        /// <param name="planetType">planetType (required).</param>
        /// <param name="solarSystemId">solarSystemId (required).</param>
        /// <param name="upgradeLevel">upgradeLevel (required).</param>
        public CharactersCharacterIdPlanetsGetInner(DateTime lastUpdate = default(DateTime), long numPins = default(long), long ownerId = default(long), long planetId = default(long), PlanetTypeEnum planetType = default(PlanetTypeEnum), long solarSystemId = default(long), long upgradeLevel = default(long))
        {
            this.LastUpdate = lastUpdate;
            this.NumPins = numPins;
            this.OwnerId = ownerId;
            this.PlanetId = planetId;
            this.PlanetType = planetType;
            this.SolarSystemId = solarSystemId;
            this.UpgradeLevel = upgradeLevel;
        }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name = "last_update", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets NumPins
        /// </summary>
        [DataMember(Name = "num_pins", IsRequired = true, EmitDefaultValue = true)]
        public long NumPins { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = true)]
        public long OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets PlanetId
        /// </summary>
        [DataMember(Name = "planet_id", IsRequired = true, EmitDefaultValue = true)]
        public long PlanetId { get; set; }

        /// <summary>
        /// Gets or Sets SolarSystemId
        /// </summary>
        [DataMember(Name = "solar_system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SolarSystemId { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeLevel
        /// </summary>
        [DataMember(Name = "upgrade_level", IsRequired = true, EmitDefaultValue = true)]
        public long UpgradeLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdPlanetsGetInner {\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  NumPins: ").Append(NumPins).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  PlanetId: ").Append(PlanetId).Append("\n");
            sb.Append("  PlanetType: ").Append(PlanetType).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  UpgradeLevel: ").Append(UpgradeLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
