/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdPlanetsPlanetIdGet_pins_inner_extractor_details")]
    public partial class CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails" /> class.
        /// </summary>
        /// <param name="cycleTime">in seconds.</param>
        /// <param name="headRadius">headRadius.</param>
        /// <param name="heads">heads (required).</param>
        /// <param name="productTypeId">productTypeId.</param>
        /// <param name="qtyPerCycle">qtyPerCycle.</param>
        public CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails(long cycleTime = default(long), double headRadius = default(double), List<CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetailsHeadsInner> heads = default(List<CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetailsHeadsInner>), long productTypeId = default(long), long qtyPerCycle = default(long))
        {
            // to ensure "heads" is required (not null)
            if (heads == null)
            {
                throw new ArgumentNullException("heads is a required property for CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails and cannot be null");
            }
            this.Heads = heads;
            this.CycleTime = cycleTime;
            this.HeadRadius = headRadius;
            this.ProductTypeId = productTypeId;
            this.QtyPerCycle = qtyPerCycle;
        }

        /// <summary>
        /// in seconds
        /// </summary>
        /// <value>in seconds</value>
        [DataMember(Name = "cycle_time", EmitDefaultValue = false)]
        public long CycleTime { get; set; }

        /// <summary>
        /// Gets or Sets HeadRadius
        /// </summary>
        [DataMember(Name = "head_radius", EmitDefaultValue = false)]
        public double HeadRadius { get; set; }

        /// <summary>
        /// Gets or Sets Heads
        /// </summary>
        [DataMember(Name = "heads", IsRequired = true, EmitDefaultValue = true)]
        public List<CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetailsHeadsInner> Heads { get; set; }

        /// <summary>
        /// Gets or Sets ProductTypeId
        /// </summary>
        [DataMember(Name = "product_type_id", EmitDefaultValue = false)]
        public long ProductTypeId { get; set; }

        /// <summary>
        /// Gets or Sets QtyPerCycle
        /// </summary>
        [DataMember(Name = "qty_per_cycle", EmitDefaultValue = false)]
        public long QtyPerCycle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdPlanetsPlanetIdGetPinsInnerExtractorDetails {\n");
            sb.Append("  CycleTime: ").Append(CycleTime).Append("\n");
            sb.Append("  HeadRadius: ").Append(HeadRadius).Append("\n");
            sb.Append("  Heads: ").Append(Heads).Append("\n");
            sb.Append("  ProductTypeId: ").Append(ProductTypeId).Append("\n");
            sb.Append("  QtyPerCycle: ").Append(QtyPerCycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
