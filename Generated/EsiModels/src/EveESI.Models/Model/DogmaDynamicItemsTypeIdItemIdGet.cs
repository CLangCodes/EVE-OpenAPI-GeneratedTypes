/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// DogmaDynamicItemsTypeIdItemIdGet
    /// </summary>
    [DataContract(Name = "DogmaDynamicItemsTypeIdItemIdGet")]
    public partial class DogmaDynamicItemsTypeIdItemIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaDynamicItemsTypeIdItemIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DogmaDynamicItemsTypeIdItemIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DogmaDynamicItemsTypeIdItemIdGet" /> class.
        /// </summary>
        /// <param name="createdBy">The ID of the character who created the item (required).</param>
        /// <param name="dogmaAttributes">dogmaAttributes (required).</param>
        /// <param name="dogmaEffects">dogmaEffects (required).</param>
        /// <param name="mutatorTypeId">The type ID of the mutator used to generate the dynamic item. (required).</param>
        /// <param name="sourceTypeId">The type ID of the source item the mutator was applied to create the dynamic item. (required).</param>
        public DogmaDynamicItemsTypeIdItemIdGet(long createdBy = default(long), List<DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner> dogmaAttributes = default(List<DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner>), List<DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner> dogmaEffects = default(List<DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner>), long mutatorTypeId = default(long), long sourceTypeId = default(long))
        {
            this.CreatedBy = createdBy;
            // to ensure "dogmaAttributes" is required (not null)
            if (dogmaAttributes == null)
            {
                throw new ArgumentNullException("dogmaAttributes is a required property for DogmaDynamicItemsTypeIdItemIdGet and cannot be null");
            }
            this.DogmaAttributes = dogmaAttributes;
            // to ensure "dogmaEffects" is required (not null)
            if (dogmaEffects == null)
            {
                throw new ArgumentNullException("dogmaEffects is a required property for DogmaDynamicItemsTypeIdItemIdGet and cannot be null");
            }
            this.DogmaEffects = dogmaEffects;
            this.MutatorTypeId = mutatorTypeId;
            this.SourceTypeId = sourceTypeId;
        }

        /// <summary>
        /// The ID of the character who created the item
        /// </summary>
        /// <value>The ID of the character who created the item</value>
        [DataMember(Name = "created_by", IsRequired = true, EmitDefaultValue = true)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets DogmaAttributes
        /// </summary>
        [DataMember(Name = "dogma_attributes", IsRequired = true, EmitDefaultValue = true)]
        public List<DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner> DogmaAttributes { get; set; }

        /// <summary>
        /// Gets or Sets DogmaEffects
        /// </summary>
        [DataMember(Name = "dogma_effects", IsRequired = true, EmitDefaultValue = true)]
        public List<DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner> DogmaEffects { get; set; }

        /// <summary>
        /// The type ID of the mutator used to generate the dynamic item.
        /// </summary>
        /// <value>The type ID of the mutator used to generate the dynamic item.</value>
        [DataMember(Name = "mutator_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long MutatorTypeId { get; set; }

        /// <summary>
        /// The type ID of the source item the mutator was applied to create the dynamic item.
        /// </summary>
        /// <value>The type ID of the source item the mutator was applied to create the dynamic item.</value>
        [DataMember(Name = "source_type_id", IsRequired = true, EmitDefaultValue = true)]
        public long SourceTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DogmaDynamicItemsTypeIdItemIdGet {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DogmaAttributes: ").Append(DogmaAttributes).Append("\n");
            sb.Append("  DogmaEffects: ").Append(DogmaEffects).Append("\n");
            sb.Append("  MutatorTypeId: ").Append(MutatorTypeId).Append("\n");
            sb.Append("  SourceTypeId: ").Append(SourceTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
