/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseGroupsGroupIdGet
    /// </summary>
    [DataContract(Name = "UniverseGroupsGroupIdGet")]
    public partial class UniverseGroupsGroupIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseGroupsGroupIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseGroupsGroupIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseGroupsGroupIdGet" /> class.
        /// </summary>
        /// <param name="categoryId">categoryId (required).</param>
        /// <param name="groupId">groupId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="published">published (required).</param>
        /// <param name="types">types (required).</param>
        public UniverseGroupsGroupIdGet(long categoryId = default(long), long groupId = default(long), string name = default(string), bool published = default(bool), List<long> types = default(List<long>))
        {
            this.CategoryId = categoryId;
            this.GroupId = groupId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseGroupsGroupIdGet and cannot be null");
            }
            this.Name = name;
            this.Published = published;
            // to ensure "types" is required (not null)
            if (types == null)
            {
                throw new ArgumentNullException("types is a required property for UniverseGroupsGroupIdGet and cannot be null");
            }
            this.Types = types;
        }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "category_id", IsRequired = true, EmitDefaultValue = true)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "group_id", IsRequired = true, EmitDefaultValue = true)]
        public long GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", IsRequired = true, EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name = "types", IsRequired = true, EmitDefaultValue = true)]
        public List<long> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseGroupsGroupIdGet {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
