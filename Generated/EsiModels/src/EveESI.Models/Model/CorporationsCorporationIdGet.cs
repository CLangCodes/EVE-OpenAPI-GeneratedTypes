/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdGet
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdGet")]
    public partial class CorporationsCorporationIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdGet" /> class.
        /// </summary>
        /// <param name="allianceId">ID of the alliance that corporation is a member of, if any.</param>
        /// <param name="ceoId">ceoId (required).</param>
        /// <param name="creatorId">creatorId (required).</param>
        /// <param name="dateFounded">dateFounded.</param>
        /// <param name="description">description.</param>
        /// <param name="factionId">factionId.</param>
        /// <param name="homeStationId">homeStationId.</param>
        /// <param name="memberCount">memberCount (required).</param>
        /// <param name="name">the full name of the corporation (required).</param>
        /// <param name="shares">shares.</param>
        /// <param name="taxRate">taxRate (required).</param>
        /// <param name="ticker">the short name of the corporation (required).</param>
        /// <param name="url">url.</param>
        /// <param name="warEligible">warEligible.</param>
        public CorporationsCorporationIdGet(long allianceId = default(long), long ceoId = default(long), long creatorId = default(long), DateTime dateFounded = default(DateTime), string description = default(string), long factionId = default(long), long homeStationId = default(long), long memberCount = default(long), string name = default(string), long shares = default(long), double taxRate = default(double), string ticker = default(string), string url = default(string), bool warEligible = default(bool))
        {
            this.CeoId = ceoId;
            this.CreatorId = creatorId;
            this.MemberCount = memberCount;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CorporationsCorporationIdGet and cannot be null");
            }
            this.Name = name;
            this.TaxRate = taxRate;
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new ArgumentNullException("ticker is a required property for CorporationsCorporationIdGet and cannot be null");
            }
            this.Ticker = ticker;
            this.AllianceId = allianceId;
            this.DateFounded = dateFounded;
            this.Description = description;
            this.FactionId = factionId;
            this.HomeStationId = homeStationId;
            this.Shares = shares;
            this.Url = url;
            this.WarEligible = warEligible;
        }

        /// <summary>
        /// ID of the alliance that corporation is a member of, if any
        /// </summary>
        /// <value>ID of the alliance that corporation is a member of, if any</value>
        [DataMember(Name = "alliance_id", EmitDefaultValue = false)]
        public long AllianceId { get; set; }

        /// <summary>
        /// Gets or Sets CeoId
        /// </summary>
        [DataMember(Name = "ceo_id", IsRequired = true, EmitDefaultValue = true)]
        public long CeoId { get; set; }

        /// <summary>
        /// Gets or Sets CreatorId
        /// </summary>
        [DataMember(Name = "creator_id", IsRequired = true, EmitDefaultValue = true)]
        public long CreatorId { get; set; }

        /// <summary>
        /// Gets or Sets DateFounded
        /// </summary>
        [DataMember(Name = "date_founded", EmitDefaultValue = false)]
        public DateTime DateFounded { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FactionId
        /// </summary>
        [DataMember(Name = "faction_id", EmitDefaultValue = false)]
        public long FactionId { get; set; }

        /// <summary>
        /// Gets or Sets HomeStationId
        /// </summary>
        [DataMember(Name = "home_station_id", EmitDefaultValue = false)]
        public long HomeStationId { get; set; }

        /// <summary>
        /// Gets or Sets MemberCount
        /// </summary>
        [DataMember(Name = "member_count", IsRequired = true, EmitDefaultValue = true)]
        public long MemberCount { get; set; }

        /// <summary>
        /// the full name of the corporation
        /// </summary>
        /// <value>the full name of the corporation</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Shares
        /// </summary>
        [DataMember(Name = "shares", EmitDefaultValue = false)]
        public long Shares { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name = "tax_rate", IsRequired = true, EmitDefaultValue = true)]
        public double TaxRate { get; set; }

        /// <summary>
        /// the short name of the corporation
        /// </summary>
        /// <value>the short name of the corporation</value>
        [DataMember(Name = "ticker", IsRequired = true, EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets WarEligible
        /// </summary>
        [DataMember(Name = "war_eligible", EmitDefaultValue = true)]
        public bool WarEligible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdGet {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  CeoId: ").Append(CeoId).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  DateFounded: ").Append(DateFounded).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  HomeStationId: ").Append(HomeStationId).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Shares: ").Append(Shares).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WarEligible: ").Append(WarEligible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
