/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CharactersCharacterIdContractsContractIdItemsGetInner
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdContractsContractIdItemsGet_inner")]
    public partial class CharactersCharacterIdContractsContractIdItemsGetInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdContractsContractIdItemsGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CharactersCharacterIdContractsContractIdItemsGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdContractsContractIdItemsGetInner" /> class.
        /// </summary>
        /// <param name="isIncluded">true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract (required).</param>
        /// <param name="isSingleton">isSingleton (required).</param>
        /// <param name="quantity">Number of items in the stack (required).</param>
        /// <param name="rawQuantity">-1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy.</param>
        /// <param name="recordId">Unique ID for the item (required).</param>
        /// <param name="typeId">Type ID for item (required).</param>
        public CharactersCharacterIdContractsContractIdItemsGetInner(bool isIncluded = default(bool), bool isSingleton = default(bool), long quantity = default(long), long rawQuantity = default(long), long recordId = default(long), long typeId = default(long))
        {
            this.IsIncluded = isIncluded;
            this.IsSingleton = isSingleton;
            this.Quantity = quantity;
            this.RecordId = recordId;
            this.TypeId = typeId;
            this.RawQuantity = rawQuantity;
        }

        /// <summary>
        /// true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
        /// </summary>
        /// <value>true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract</value>
        [DataMember(Name = "is_included", IsRequired = true, EmitDefaultValue = true)]
        public bool IsIncluded { get; set; }

        /// <summary>
        /// Gets or Sets IsSingleton
        /// </summary>
        [DataMember(Name = "is_singleton", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSingleton { get; set; }

        /// <summary>
        /// Number of items in the stack
        /// </summary>
        /// <value>Number of items in the stack</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public long Quantity { get; set; }

        /// <summary>
        /// -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
        /// </summary>
        /// <value>-1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy</value>
        [DataMember(Name = "raw_quantity", EmitDefaultValue = false)]
        public long RawQuantity { get; set; }

        /// <summary>
        /// Unique ID for the item
        /// </summary>
        /// <value>Unique ID for the item</value>
        [DataMember(Name = "record_id", IsRequired = true, EmitDefaultValue = true)]
        public long RecordId { get; set; }

        /// <summary>
        /// Type ID for item
        /// </summary>
        /// <value>Type ID for item</value>
        [DataMember(Name = "type_id", IsRequired = true, EmitDefaultValue = true)]
        public long TypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdContractsContractIdItemsGetInner {\n");
            sb.Append("  IsIncluded: ").Append(IsIncluded).Append("\n");
            sb.Append("  IsSingleton: ").Append(IsSingleton).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RawQuantity: ").Append(RawQuantity).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
