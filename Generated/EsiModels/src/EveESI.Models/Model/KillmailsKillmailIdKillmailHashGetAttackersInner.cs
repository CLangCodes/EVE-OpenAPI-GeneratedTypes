/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// attacker object
    /// </summary>
    [DataContract(Name = "KillmailsKillmailIdKillmailHashGet_attackers_inner")]
    public partial class KillmailsKillmailIdKillmailHashGetAttackersInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KillmailsKillmailIdKillmailHashGetAttackersInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KillmailsKillmailIdKillmailHashGetAttackersInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KillmailsKillmailIdKillmailHashGetAttackersInner" /> class.
        /// </summary>
        /// <param name="allianceId">allianceId.</param>
        /// <param name="characterId">characterId.</param>
        /// <param name="corporationId">corporationId.</param>
        /// <param name="damageDone">damageDone (required).</param>
        /// <param name="factionId">factionId.</param>
        /// <param name="finalBlow">Was the attacker the one to achieve the final blow  (required).</param>
        /// <param name="securityStatus">Security status for the attacker  (required).</param>
        /// <param name="shipTypeId">What ship was the attacker flying .</param>
        /// <param name="weaponTypeId">What weapon was used by the attacker for the kill .</param>
        public KillmailsKillmailIdKillmailHashGetAttackersInner(long allianceId = default(long), long characterId = default(long), long corporationId = default(long), long damageDone = default(long), long factionId = default(long), bool finalBlow = default(bool), double securityStatus = default(double), long shipTypeId = default(long), long weaponTypeId = default(long))
        {
            this.DamageDone = damageDone;
            this.FinalBlow = finalBlow;
            this.SecurityStatus = securityStatus;
            this.AllianceId = allianceId;
            this.CharacterId = characterId;
            this.CorporationId = corporationId;
            this.FactionId = factionId;
            this.ShipTypeId = shipTypeId;
            this.WeaponTypeId = weaponTypeId;
        }

        /// <summary>
        /// Gets or Sets AllianceId
        /// </summary>
        [DataMember(Name = "alliance_id", EmitDefaultValue = false)]
        public long AllianceId { get; set; }

        /// <summary>
        /// Gets or Sets CharacterId
        /// </summary>
        [DataMember(Name = "character_id", EmitDefaultValue = false)]
        public long CharacterId { get; set; }

        /// <summary>
        /// Gets or Sets CorporationId
        /// </summary>
        [DataMember(Name = "corporation_id", EmitDefaultValue = false)]
        public long CorporationId { get; set; }

        /// <summary>
        /// Gets or Sets DamageDone
        /// </summary>
        [DataMember(Name = "damage_done", IsRequired = true, EmitDefaultValue = true)]
        public long DamageDone { get; set; }

        /// <summary>
        /// Gets or Sets FactionId
        /// </summary>
        [DataMember(Name = "faction_id", EmitDefaultValue = false)]
        public long FactionId { get; set; }

        /// <summary>
        /// Was the attacker the one to achieve the final blow 
        /// </summary>
        /// <value>Was the attacker the one to achieve the final blow </value>
        [DataMember(Name = "final_blow", IsRequired = true, EmitDefaultValue = true)]
        public bool FinalBlow { get; set; }

        /// <summary>
        /// Security status for the attacker 
        /// </summary>
        /// <value>Security status for the attacker </value>
        [DataMember(Name = "security_status", IsRequired = true, EmitDefaultValue = true)]
        public double SecurityStatus { get; set; }

        /// <summary>
        /// What ship was the attacker flying 
        /// </summary>
        /// <value>What ship was the attacker flying </value>
        [DataMember(Name = "ship_type_id", EmitDefaultValue = false)]
        public long ShipTypeId { get; set; }

        /// <summary>
        /// What weapon was used by the attacker for the kill 
        /// </summary>
        /// <value>What weapon was used by the attacker for the kill </value>
        [DataMember(Name = "weapon_type_id", EmitDefaultValue = false)]
        public long WeaponTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KillmailsKillmailIdKillmailHashGetAttackersInner {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  DamageDone: ").Append(DamageDone).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  FinalBlow: ").Append(FinalBlow).Append("\n");
            sb.Append("  SecurityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("  WeaponTypeId: ").Append(WeaponTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
