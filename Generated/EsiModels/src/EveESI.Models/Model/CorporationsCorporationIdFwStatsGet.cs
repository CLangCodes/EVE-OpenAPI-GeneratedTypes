/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdFwStatsGet
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdFwStatsGet")]
    public partial class CorporationsCorporationIdFwStatsGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdFwStatsGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdFwStatsGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdFwStatsGet" /> class.
        /// </summary>
        /// <param name="enlistedOn">The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare.</param>
        /// <param name="factionId">The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare.</param>
        /// <param name="kills">kills (required).</param>
        /// <param name="pilots">How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare.</param>
        /// <param name="victoryPoints">victoryPoints (required).</param>
        public CorporationsCorporationIdFwStatsGet(DateTime enlistedOn = default(DateTime), long factionId = default(long), CorporationsCorporationIdFwStatsGetKills kills = default(CorporationsCorporationIdFwStatsGetKills), long pilots = default(long), CorporationsCorporationIdFwStatsGetVictoryPoints victoryPoints = default(CorporationsCorporationIdFwStatsGetVictoryPoints))
        {
            // to ensure "kills" is required (not null)
            if (kills == null)
            {
                throw new ArgumentNullException("kills is a required property for CorporationsCorporationIdFwStatsGet and cannot be null");
            }
            this.Kills = kills;
            // to ensure "victoryPoints" is required (not null)
            if (victoryPoints == null)
            {
                throw new ArgumentNullException("victoryPoints is a required property for CorporationsCorporationIdFwStatsGet and cannot be null");
            }
            this.VictoryPoints = victoryPoints;
            this.EnlistedOn = enlistedOn;
            this.FactionId = factionId;
            this.Pilots = pilots;
        }

        /// <summary>
        /// The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare
        /// </summary>
        /// <value>The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare</value>
        [DataMember(Name = "enlisted_on", EmitDefaultValue = false)]
        public DateTime EnlistedOn { get; set; }

        /// <summary>
        /// The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare
        /// </summary>
        /// <value>The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare</value>
        [DataMember(Name = "faction_id", EmitDefaultValue = false)]
        public long FactionId { get; set; }

        /// <summary>
        /// Gets or Sets Kills
        /// </summary>
        [DataMember(Name = "kills", IsRequired = true, EmitDefaultValue = true)]
        public CorporationsCorporationIdFwStatsGetKills Kills { get; set; }

        /// <summary>
        /// How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare
        /// </summary>
        /// <value>How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare</value>
        [DataMember(Name = "pilots", EmitDefaultValue = false)]
        public long Pilots { get; set; }

        /// <summary>
        /// Gets or Sets VictoryPoints
        /// </summary>
        [DataMember(Name = "victory_points", IsRequired = true, EmitDefaultValue = true)]
        public CorporationsCorporationIdFwStatsGetVictoryPoints VictoryPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdFwStatsGet {\n");
            sb.Append("  EnlistedOn: ").Append(EnlistedOn).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  Kills: ").Append(Kills).Append("\n");
            sb.Append("  Pilots: ").Append(Pilots).Append("\n");
            sb.Append("  VictoryPoints: ").Append(VictoryPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
