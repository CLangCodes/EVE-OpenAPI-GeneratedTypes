/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// label object
    /// </summary>
    [DataContract(Name = "CharactersCharacterIdMailLabelsGet_labels_inner")]
    public partial class CharactersCharacterIdMailLabelsGetLabelsInner
    {
        /// <summary>
        /// Defines Color
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum _0000fe for value: #0000fe
            /// </summary>
            [EnumMember(Value = "#0000fe")]
            _0000fe = 1,

            /// <summary>
            /// Enum _006634 for value: #006634
            /// </summary>
            [EnumMember(Value = "#006634")]
            _006634 = 2,

            /// <summary>
            /// Enum _0099ff for value: #0099ff
            /// </summary>
            [EnumMember(Value = "#0099ff")]
            _0099ff = 3,

            /// <summary>
            /// Enum _00ff33 for value: #00ff33
            /// </summary>
            [EnumMember(Value = "#00ff33")]
            _00ff33 = 4,

            /// <summary>
            /// Enum _01ffff for value: #01ffff
            /// </summary>
            [EnumMember(Value = "#01ffff")]
            _01ffff = 5,

            /// <summary>
            /// Enum _349800 for value: #349800
            /// </summary>
            [EnumMember(Value = "#349800")]
            _349800 = 6,

            /// <summary>
            /// Enum _660066 for value: #660066
            /// </summary>
            [EnumMember(Value = "#660066")]
            _660066 = 7,

            /// <summary>
            /// Enum _666666 for value: #666666
            /// </summary>
            [EnumMember(Value = "#666666")]
            _666666 = 8,

            /// <summary>
            /// Enum _999999 for value: #999999
            /// </summary>
            [EnumMember(Value = "#999999")]
            _999999 = 9,

            /// <summary>
            /// Enum _99ffff for value: #99ffff
            /// </summary>
            [EnumMember(Value = "#99ffff")]
            _99ffff = 10,

            /// <summary>
            /// Enum _9a0000 for value: #9a0000
            /// </summary>
            [EnumMember(Value = "#9a0000")]
            _9a0000 = 11,

            /// <summary>
            /// Enum Ccff9a for value: #ccff9a
            /// </summary>
            [EnumMember(Value = "#ccff9a")]
            Ccff9a = 12,

            /// <summary>
            /// Enum E6e6e6 for value: #e6e6e6
            /// </summary>
            [EnumMember(Value = "#e6e6e6")]
            E6e6e6 = 13,

            /// <summary>
            /// Enum Fe0000 for value: #fe0000
            /// </summary>
            [EnumMember(Value = "#fe0000")]
            Fe0000 = 14,

            /// <summary>
            /// Enum Ff6600 for value: #ff6600
            /// </summary>
            [EnumMember(Value = "#ff6600")]
            Ff6600 = 15,

            /// <summary>
            /// Enum Ffff01 for value: #ffff01
            /// </summary>
            [EnumMember(Value = "#ffff01")]
            Ffff01 = 16,

            /// <summary>
            /// Enum Ffffcd for value: #ffffcd
            /// </summary>
            [EnumMember(Value = "#ffffcd")]
            Ffffcd = 17,

            /// <summary>
            /// Enum Ffffff for value: #ffffff
            /// </summary>
            [EnumMember(Value = "#ffffff")]
            Ffffff = 18
        }


        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharactersCharacterIdMailLabelsGetLabelsInner" /> class.
        /// </summary>
        /// <param name="color">color (default to ColorEnum.Ffffff).</param>
        /// <param name="labelId">labelId.</param>
        /// <param name="name">name.</param>
        /// <param name="unreadCount">unreadCount.</param>
        public CharactersCharacterIdMailLabelsGetLabelsInner(ColorEnum? color = ColorEnum.Ffffff, long labelId = default(long), string name = default(string), long unreadCount = default(long))
        {
            this.Color = color;
            this.LabelId = labelId;
            this.Name = name;
            this.UnreadCount = unreadCount;
        }

        /// <summary>
        /// Gets or Sets LabelId
        /// </summary>
        [DataMember(Name = "label_id", EmitDefaultValue = false)]
        public long LabelId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UnreadCount
        /// </summary>
        [DataMember(Name = "unread_count", EmitDefaultValue = false)]
        public long UnreadCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharactersCharacterIdMailLabelsGetLabelsInner {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UnreadCount: ").Append(UnreadCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
