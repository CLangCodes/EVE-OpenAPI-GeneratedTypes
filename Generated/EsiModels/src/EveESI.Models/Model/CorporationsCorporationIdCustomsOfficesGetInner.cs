/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// CorporationsCorporationIdCustomsOfficesGetInner
    /// </summary>
    [DataContract(Name = "CorporationsCorporationIdCustomsOfficesGet_inner")]
    public partial class CorporationsCorporationIdCustomsOfficesGetInner
    {
        /// <summary>
        /// Access is allowed only for entities with this level of standing or better
        /// </summary>
        /// <value>Access is allowed only for entities with this level of standing or better</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandingLevelEnum
        {
            /// <summary>
            /// Enum Bad for value: bad
            /// </summary>
            [EnumMember(Value = "bad")]
            Bad = 1,

            /// <summary>
            /// Enum Excellent for value: excellent
            /// </summary>
            [EnumMember(Value = "excellent")]
            Excellent = 2,

            /// <summary>
            /// Enum Good for value: good
            /// </summary>
            [EnumMember(Value = "good")]
            Good = 3,

            /// <summary>
            /// Enum Neutral for value: neutral
            /// </summary>
            [EnumMember(Value = "neutral")]
            Neutral = 4,

            /// <summary>
            /// Enum Terrible for value: terrible
            /// </summary>
            [EnumMember(Value = "terrible")]
            Terrible = 5
        }


        /// <summary>
        /// Access is allowed only for entities with this level of standing or better
        /// </summary>
        /// <value>Access is allowed only for entities with this level of standing or better</value>
        [DataMember(Name = "standing_level", EmitDefaultValue = false)]
        public StandingLevelEnum? StandingLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdCustomsOfficesGetInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporationsCorporationIdCustomsOfficesGetInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationsCorporationIdCustomsOfficesGetInner" /> class.
        /// </summary>
        /// <param name="allianceTaxRate">Only present if alliance access is allowed.</param>
        /// <param name="allowAccessWithStandings">standing_level and any standing related tax rate only present when this is true (required).</param>
        /// <param name="allowAllianceAccess">allowAllianceAccess (required).</param>
        /// <param name="badStandingTaxRate">badStandingTaxRate.</param>
        /// <param name="corporationTaxRate">corporationTaxRate.</param>
        /// <param name="excellentStandingTaxRate">Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates.</param>
        /// <param name="goodStandingTaxRate">goodStandingTaxRate.</param>
        /// <param name="neutralStandingTaxRate">neutralStandingTaxRate.</param>
        /// <param name="officeId">unique ID of this customs office (required).</param>
        /// <param name="reinforceExitEnd">reinforceExitEnd (required).</param>
        /// <param name="reinforceExitStart">Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack (required).</param>
        /// <param name="standingLevel">Access is allowed only for entities with this level of standing or better.</param>
        /// <param name="systemId">ID of the solar system this customs office is located in (required).</param>
        /// <param name="terribleStandingTaxRate">terribleStandingTaxRate.</param>
        public CorporationsCorporationIdCustomsOfficesGetInner(double allianceTaxRate = default(double), bool allowAccessWithStandings = default(bool), bool allowAllianceAccess = default(bool), double badStandingTaxRate = default(double), double corporationTaxRate = default(double), double excellentStandingTaxRate = default(double), double goodStandingTaxRate = default(double), double neutralStandingTaxRate = default(double), long officeId = default(long), long reinforceExitEnd = default(long), long reinforceExitStart = default(long), StandingLevelEnum? standingLevel = default(StandingLevelEnum?), long systemId = default(long), double terribleStandingTaxRate = default(double))
        {
            this.AllowAccessWithStandings = allowAccessWithStandings;
            this.AllowAllianceAccess = allowAllianceAccess;
            this.OfficeId = officeId;
            this.ReinforceExitEnd = reinforceExitEnd;
            this.ReinforceExitStart = reinforceExitStart;
            this.SystemId = systemId;
            this.AllianceTaxRate = allianceTaxRate;
            this.BadStandingTaxRate = badStandingTaxRate;
            this.CorporationTaxRate = corporationTaxRate;
            this.ExcellentStandingTaxRate = excellentStandingTaxRate;
            this.GoodStandingTaxRate = goodStandingTaxRate;
            this.NeutralStandingTaxRate = neutralStandingTaxRate;
            this.StandingLevel = standingLevel;
            this.TerribleStandingTaxRate = terribleStandingTaxRate;
        }

        /// <summary>
        /// Only present if alliance access is allowed
        /// </summary>
        /// <value>Only present if alliance access is allowed</value>
        [DataMember(Name = "alliance_tax_rate", EmitDefaultValue = false)]
        public double AllianceTaxRate { get; set; }

        /// <summary>
        /// standing_level and any standing related tax rate only present when this is true
        /// </summary>
        /// <value>standing_level and any standing related tax rate only present when this is true</value>
        [DataMember(Name = "allow_access_with_standings", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAccessWithStandings { get; set; }

        /// <summary>
        /// Gets or Sets AllowAllianceAccess
        /// </summary>
        [DataMember(Name = "allow_alliance_access", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAllianceAccess { get; set; }

        /// <summary>
        /// Gets or Sets BadStandingTaxRate
        /// </summary>
        [DataMember(Name = "bad_standing_tax_rate", EmitDefaultValue = false)]
        public double BadStandingTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets CorporationTaxRate
        /// </summary>
        [DataMember(Name = "corporation_tax_rate", EmitDefaultValue = false)]
        public double CorporationTaxRate { get; set; }

        /// <summary>
        /// Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
        /// </summary>
        /// <value>Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates</value>
        [DataMember(Name = "excellent_standing_tax_rate", EmitDefaultValue = false)]
        public double ExcellentStandingTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets GoodStandingTaxRate
        /// </summary>
        [DataMember(Name = "good_standing_tax_rate", EmitDefaultValue = false)]
        public double GoodStandingTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets NeutralStandingTaxRate
        /// </summary>
        [DataMember(Name = "neutral_standing_tax_rate", EmitDefaultValue = false)]
        public double NeutralStandingTaxRate { get; set; }

        /// <summary>
        /// unique ID of this customs office
        /// </summary>
        /// <value>unique ID of this customs office</value>
        [DataMember(Name = "office_id", IsRequired = true, EmitDefaultValue = true)]
        public long OfficeId { get; set; }

        /// <summary>
        /// Gets or Sets ReinforceExitEnd
        /// </summary>
        [DataMember(Name = "reinforce_exit_end", IsRequired = true, EmitDefaultValue = true)]
        public long ReinforceExitEnd { get; set; }

        /// <summary>
        /// Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
        /// </summary>
        /// <value>Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack</value>
        [DataMember(Name = "reinforce_exit_start", IsRequired = true, EmitDefaultValue = true)]
        public long ReinforceExitStart { get; set; }

        /// <summary>
        /// ID of the solar system this customs office is located in
        /// </summary>
        /// <value>ID of the solar system this customs office is located in</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = true)]
        public long SystemId { get; set; }

        /// <summary>
        /// Gets or Sets TerribleStandingTaxRate
        /// </summary>
        [DataMember(Name = "terrible_standing_tax_rate", EmitDefaultValue = false)]
        public double TerribleStandingTaxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporationsCorporationIdCustomsOfficesGetInner {\n");
            sb.Append("  AllianceTaxRate: ").Append(AllianceTaxRate).Append("\n");
            sb.Append("  AllowAccessWithStandings: ").Append(AllowAccessWithStandings).Append("\n");
            sb.Append("  AllowAllianceAccess: ").Append(AllowAllianceAccess).Append("\n");
            sb.Append("  BadStandingTaxRate: ").Append(BadStandingTaxRate).Append("\n");
            sb.Append("  CorporationTaxRate: ").Append(CorporationTaxRate).Append("\n");
            sb.Append("  ExcellentStandingTaxRate: ").Append(ExcellentStandingTaxRate).Append("\n");
            sb.Append("  GoodStandingTaxRate: ").Append(GoodStandingTaxRate).Append("\n");
            sb.Append("  NeutralStandingTaxRate: ").Append(NeutralStandingTaxRate).Append("\n");
            sb.Append("  OfficeId: ").Append(OfficeId).Append("\n");
            sb.Append("  ReinforceExitEnd: ").Append(ReinforceExitEnd).Append("\n");
            sb.Append("  ReinforceExitStart: ").Append(ReinforceExitStart).Append("\n");
            sb.Append("  StandingLevel: ").Append(StandingLevel).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  TerribleStandingTaxRate: ").Append(TerribleStandingTaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
