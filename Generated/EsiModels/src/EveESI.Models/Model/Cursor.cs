/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// Cursor
    /// </summary>
    [DataContract(Name = "Cursor")]
    public partial class Cursor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cursor" /> class.
        /// </summary>
        /// <param name="after">Cursor to use as &#39;after&#39; in your next request, to continue walking forwards in time..</param>
        /// <param name="before">Cursor to use as &#39;before&#39; in your next request, to continue walking backwards in time..</param>
        public Cursor(string after = default(string), string before = default(string))
        {
            this.After = after;
            this.Before = before;
        }

        /// <summary>
        /// Cursor to use as &#39;after&#39; in your next request, to continue walking forwards in time.
        /// </summary>
        /// <value>Cursor to use as &#39;after&#39; in your next request, to continue walking forwards in time.</value>
        [DataMember(Name = "after", EmitDefaultValue = false)]
        public string After { get; set; }

        /// <summary>
        /// Cursor to use as &#39;before&#39; in your next request, to continue walking backwards in time.
        /// </summary>
        /// <value>Cursor to use as &#39;before&#39; in your next request, to continue walking backwards in time.</value>
        [DataMember(Name = "before", EmitDefaultValue = false)]
        public string Before { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cursor {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
