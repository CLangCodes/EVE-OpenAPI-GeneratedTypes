/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EveESI.Models.Client.OpenAPIDateConverter;

namespace EveESI.Models.Model
{
    /// <summary>
    /// UniverseConstellationsConstellationIdGet
    /// </summary>
    [DataContract(Name = "UniverseConstellationsConstellationIdGet")]
    public partial class UniverseConstellationsConstellationIdGet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseConstellationsConstellationIdGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UniverseConstellationsConstellationIdGet() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseConstellationsConstellationIdGet" /> class.
        /// </summary>
        /// <param name="constellationId">constellationId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="regionId">The region this constellation is in (required).</param>
        /// <param name="systems">systems (required).</param>
        public UniverseConstellationsConstellationIdGet(long constellationId = default(long), string name = default(string), CharactersCharacterIdAssetsLocationsPostInnerPosition position = default(CharactersCharacterIdAssetsLocationsPostInnerPosition), long regionId = default(long), List<long> systems = default(List<long>))
        {
            this.ConstellationId = constellationId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UniverseConstellationsConstellationIdGet and cannot be null");
            }
            this.Name = name;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for UniverseConstellationsConstellationIdGet and cannot be null");
            }
            this.Position = position;
            this.RegionId = regionId;
            // to ensure "systems" is required (not null)
            if (systems == null)
            {
                throw new ArgumentNullException("systems is a required property for UniverseConstellationsConstellationIdGet and cannot be null");
            }
            this.Systems = systems;
        }

        /// <summary>
        /// Gets or Sets ConstellationId
        /// </summary>
        [DataMember(Name = "constellation_id", IsRequired = true, EmitDefaultValue = true)]
        public long ConstellationId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public CharactersCharacterIdAssetsLocationsPostInnerPosition Position { get; set; }

        /// <summary>
        /// The region this constellation is in
        /// </summary>
        /// <value>The region this constellation is in</value>
        [DataMember(Name = "region_id", IsRequired = true, EmitDefaultValue = true)]
        public long RegionId { get; set; }

        /// <summary>
        /// Gets or Sets Systems
        /// </summary>
        [DataMember(Name = "systems", IsRequired = true, EmitDefaultValue = true)]
        public List<long> Systems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniverseConstellationsConstellationIdGet {\n");
            sb.Append("  ConstellationId: ").Append(ConstellationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
