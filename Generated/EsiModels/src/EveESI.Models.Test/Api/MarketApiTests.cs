/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing MarketApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MarketApiTests : IDisposable
    {
        private MarketApi instance;

        public MarketApiTests()
        {
            instance = new MarketApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MarketApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MarketApi
            //Assert.IsType<MarketApi>(instance);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdOrders
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdOrders(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdOrdersGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdOrdersHistory
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdOrdersHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdOrdersHistory(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdOrdersHistoryGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdOrders
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdOrders(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdOrdersGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdOrdersHistory
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdOrdersHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdOrdersHistory(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdOrdersHistoryGetInner>>(response);
        }

        /// <summary>
        /// Test GetMarketsGroups
        /// </summary>
        [Fact]
        public void GetMarketsGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsGroups(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetMarketsGroupsMarketGroupId
        /// </summary>
        [Fact]
        public void GetMarketsGroupsMarketGroupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long marketGroupId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsGroupsMarketGroupId(marketGroupId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<MarketsGroupsMarketGroupIdGet>(response);
        }

        /// <summary>
        /// Test GetMarketsPrices
        /// </summary>
        [Fact]
        public void GetMarketsPricesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsPrices(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<MarketsPricesGetInner>>(response);
        }

        /// <summary>
        /// Test GetMarketsRegionIdHistory
        /// </summary>
        [Fact]
        public void GetMarketsRegionIdHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long regionId = null;
            //long typeId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsRegionIdHistory(regionId, typeId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<MarketsRegionIdHistoryGetInner>>(response);
        }

        /// <summary>
        /// Test GetMarketsRegionIdOrders
        /// </summary>
        [Fact]
        public void GetMarketsRegionIdOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderType = null;
            //long regionId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //long? typeId = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsRegionIdOrders(orderType, regionId, xCompatibilityDate, page, typeId, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<MarketsRegionIdOrdersGetInner>>(response);
        }

        /// <summary>
        /// Test GetMarketsRegionIdTypes
        /// </summary>
        [Fact]
        public void GetMarketsRegionIdTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long regionId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsRegionIdTypes(regionId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetMarketsStructuresStructureId
        /// </summary>
        [Fact]
        public void GetMarketsStructuresStructureIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long structureId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetMarketsStructuresStructureId(structureId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<MarketsStructuresStructureIdGetInner>>(response);
        }
    }
}
