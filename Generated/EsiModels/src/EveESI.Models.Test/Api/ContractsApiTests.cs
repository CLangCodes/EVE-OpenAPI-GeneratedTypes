/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing ContractsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContractsApiTests : IDisposable
    {
        private ContractsApi instance;

        public ContractsApiTests()
        {
            instance = new ContractsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContractsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ContractsApi
            //Assert.IsType<ContractsApi>(instance);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdContracts
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdContractsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdContracts(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdContractsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdContractsContractIdBids
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdContractsContractIdBidsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //long contractId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdContractsContractIdBids(characterId, contractId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdContractsContractIdBidsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdContractsContractIdItems
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdContractsContractIdItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //long contractId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdContractsContractIdItems(characterId, contractId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdContractsContractIdItemsGetInner>>(response);
        }

        /// <summary>
        /// Test GetContractsPublicBidsContractId
        /// </summary>
        [Fact]
        public void GetContractsPublicBidsContractIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long contractId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetContractsPublicBidsContractId(contractId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<ContractsPublicBidsContractIdGetInner>>(response);
        }

        /// <summary>
        /// Test GetContractsPublicItemsContractId
        /// </summary>
        [Fact]
        public void GetContractsPublicItemsContractIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long contractId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetContractsPublicItemsContractId(contractId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<ContractsPublicItemsContractIdGetInner>>(response);
        }

        /// <summary>
        /// Test GetContractsPublicRegionId
        /// </summary>
        [Fact]
        public void GetContractsPublicRegionIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long regionId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetContractsPublicRegionId(regionId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<ContractsPublicRegionIdGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdContracts
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdContractsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdContracts(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdContractsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdContractsContractIdBids
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdContractsContractIdBidsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long contractId = null;
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdContractsContractIdBids(contractId, corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdContractsContractIdBidsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdContractsContractIdItems
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdContractsContractIdItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long contractId = null;
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdContractsContractIdItems(contractId, corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdContractsContractIdItemsGetInner>>(response);
        }
    }
}
