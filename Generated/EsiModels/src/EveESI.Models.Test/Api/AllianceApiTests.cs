/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing AllianceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AllianceApiTests : IDisposable
    {
        private AllianceApi instance;

        public AllianceApiTests()
        {
            instance = new AllianceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AllianceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AllianceApi
            //Assert.IsType<AllianceApi>(instance);
        }

        /// <summary>
        /// Test GetAlliances
        /// </summary>
        [Fact]
        public void GetAlliancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetAlliances(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetAlliancesAllianceId
        /// </summary>
        [Fact]
        public void GetAlliancesAllianceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long allianceId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetAlliancesAllianceId(allianceId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<AlliancesAllianceIdGet>(response);
        }

        /// <summary>
        /// Test GetAlliancesAllianceIdCorporations
        /// </summary>
        [Fact]
        public void GetAlliancesAllianceIdCorporationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long allianceId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetAlliancesAllianceIdCorporations(allianceId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetAlliancesAllianceIdIcons
        /// </summary>
        [Fact]
        public void GetAlliancesAllianceIdIconsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long allianceId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetAlliancesAllianceIdIcons(allianceId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<AlliancesAllianceIdIconsGet>(response);
        }
    }
}
