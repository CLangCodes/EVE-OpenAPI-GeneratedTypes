/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing UniverseApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UniverseApiTests : IDisposable
    {
        private UniverseApi instance;

        public UniverseApiTests()
        {
            instance = new UniverseApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UniverseApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UniverseApi
            //Assert.IsType<UniverseApi>(instance);
        }

        /// <summary>
        /// Test GetUniverseAncestries
        /// </summary>
        [Fact]
        public void GetUniverseAncestriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseAncestries(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseAncestriesGetInner>>(response);
        }

        /// <summary>
        /// Test GetUniverseAsteroidBeltsAsteroidBeltId
        /// </summary>
        [Fact]
        public void GetUniverseAsteroidBeltsAsteroidBeltIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long asteroidBeltId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseAsteroidBeltsAsteroidBeltId(asteroidBeltId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseAsteroidBeltsAsteroidBeltIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseBloodlines
        /// </summary>
        [Fact]
        public void GetUniverseBloodlinesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseBloodlines(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseBloodlinesGetInner>>(response);
        }

        /// <summary>
        /// Test GetUniverseCategories
        /// </summary>
        [Fact]
        public void GetUniverseCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseCategories(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseCategoriesCategoryId
        /// </summary>
        [Fact]
        public void GetUniverseCategoriesCategoryIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long categoryId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseCategoriesCategoryId(categoryId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseCategoriesCategoryIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseConstellations
        /// </summary>
        [Fact]
        public void GetUniverseConstellationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseConstellations(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseConstellationsConstellationId
        /// </summary>
        [Fact]
        public void GetUniverseConstellationsConstellationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long constellationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseConstellationsConstellationId(constellationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseConstellationsConstellationIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseFactions
        /// </summary>
        [Fact]
        public void GetUniverseFactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseFactions(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseFactionsGetInner>>(response);
        }

        /// <summary>
        /// Test GetUniverseGraphics
        /// </summary>
        [Fact]
        public void GetUniverseGraphicsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseGraphics(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseGraphicsGraphicId
        /// </summary>
        [Fact]
        public void GetUniverseGraphicsGraphicIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long graphicId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseGraphicsGraphicId(graphicId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseGraphicsGraphicIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseGroups
        /// </summary>
        [Fact]
        public void GetUniverseGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseGroups(xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseGroupsGroupId
        /// </summary>
        [Fact]
        public void GetUniverseGroupsGroupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long groupId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseGroupsGroupId(groupId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseGroupsGroupIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseMoonsMoonId
        /// </summary>
        [Fact]
        public void GetUniverseMoonsMoonIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long moonId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseMoonsMoonId(moonId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseMoonsMoonIdGet>(response);
        }

        /// <summary>
        /// Test GetUniversePlanetsPlanetId
        /// </summary>
        [Fact]
        public void GetUniversePlanetsPlanetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long planetId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniversePlanetsPlanetId(planetId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniversePlanetsPlanetIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseRaces
        /// </summary>
        [Fact]
        public void GetUniverseRacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseRaces(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseRacesGetInner>>(response);
        }

        /// <summary>
        /// Test GetUniverseRegions
        /// </summary>
        [Fact]
        public void GetUniverseRegionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseRegions(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseRegionsRegionId
        /// </summary>
        [Fact]
        public void GetUniverseRegionsRegionIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long regionId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseRegionsRegionId(regionId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseRegionsRegionIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseStargatesStargateId
        /// </summary>
        [Fact]
        public void GetUniverseStargatesStargateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long stargateId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseStargatesStargateId(stargateId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseStargatesStargateIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseStarsStarId
        /// </summary>
        [Fact]
        public void GetUniverseStarsStarIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long starId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseStarsStarId(starId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseStarsStarIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseStationsStationId
        /// </summary>
        [Fact]
        public void GetUniverseStationsStationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long stationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseStationsStationId(stationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseStationsStationIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseStructures
        /// </summary>
        [Fact]
        public void GetUniverseStructuresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? filter = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseStructures(xCompatibilityDate, filter, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseStructuresStructureId
        /// </summary>
        [Fact]
        public void GetUniverseStructuresStructureIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long structureId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseStructuresStructureId(structureId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseStructuresStructureIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseSystemJumps
        /// </summary>
        [Fact]
        public void GetUniverseSystemJumpsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseSystemJumps(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseSystemJumpsGetInner>>(response);
        }

        /// <summary>
        /// Test GetUniverseSystemKills
        /// </summary>
        [Fact]
        public void GetUniverseSystemKillsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseSystemKills(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseSystemKillsGetInner>>(response);
        }

        /// <summary>
        /// Test GetUniverseSystems
        /// </summary>
        [Fact]
        public void GetUniverseSystemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseSystems(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseSystemsSystemId
        /// </summary>
        [Fact]
        public void GetUniverseSystemsSystemIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long systemId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseSystemsSystemId(systemId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseSystemsSystemIdGet>(response);
        }

        /// <summary>
        /// Test GetUniverseTypes
        /// </summary>
        [Fact]
        public void GetUniverseTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseTypes(xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetUniverseTypesTypeId
        /// </summary>
        [Fact]
        public void GetUniverseTypesTypeIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long typeId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetUniverseTypesTypeId(typeId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseTypesTypeIdGet>(response);
        }

        /// <summary>
        /// Test PostUniverseIds
        /// </summary>
        [Fact]
        public void PostUniverseIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //List<string> requestBody = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostUniverseIds(xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<UniverseIdsPost>(response);
        }

        /// <summary>
        /// Test PostUniverseNames
        /// </summary>
        [Fact]
        public void PostUniverseNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //List<long> requestBody = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostUniverseNames(xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<UniverseNamesPostInner>>(response);
        }
    }
}
