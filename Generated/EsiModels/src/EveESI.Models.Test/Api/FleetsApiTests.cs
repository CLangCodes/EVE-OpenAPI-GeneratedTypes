/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing FleetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FleetsApiTests : IDisposable
    {
        private FleetsApi instance;

        public FleetsApiTests()
        {
            instance = new FleetsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FleetsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FleetsApi
            //Assert.IsType<FleetsApi>(instance);
        }

        /// <summary>
        /// Test DeleteFleetsFleetIdMembersMemberId
        /// </summary>
        [Fact]
        public void DeleteFleetsFleetIdMembersMemberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long memberId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.DeleteFleetsFleetIdMembersMemberId(fleetId, memberId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test DeleteFleetsFleetIdSquadsSquadId
        /// </summary>
        [Fact]
        public void DeleteFleetsFleetIdSquadsSquadIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long squadId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.DeleteFleetsFleetIdSquadsSquadId(fleetId, squadId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test DeleteFleetsFleetIdWingsWingId
        /// </summary>
        [Fact]
        public void DeleteFleetsFleetIdWingsWingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long wingId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.DeleteFleetsFleetIdWingsWingId(fleetId, wingId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdFleet
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdFleetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdFleet(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdFleetGet>(response);
        }

        /// <summary>
        /// Test GetFleetsFleetId
        /// </summary>
        [Fact]
        public void GetFleetsFleetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetFleetsFleetId(fleetId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<FleetsFleetIdGet>(response);
        }

        /// <summary>
        /// Test GetFleetsFleetIdMembers
        /// </summary>
        [Fact]
        public void GetFleetsFleetIdMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetFleetsFleetIdMembers(fleetId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<FleetsFleetIdMembersGetInner>>(response);
        }

        /// <summary>
        /// Test GetFleetsFleetIdWings
        /// </summary>
        [Fact]
        public void GetFleetsFleetIdWingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetFleetsFleetIdWings(fleetId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<FleetsFleetIdWingsGetInner>>(response);
        }

        /// <summary>
        /// Test PostFleetsFleetIdMembers
        /// </summary>
        [Fact]
        public void PostFleetsFleetIdMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //DateOnly xCompatibilityDate = null;
            //PostFleetsFleetIdMembersRequest postFleetsFleetIdMembersRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PostFleetsFleetIdMembers(fleetId, xCompatibilityDate, postFleetsFleetIdMembersRequest, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test PostFleetsFleetIdWings
        /// </summary>
        [Fact]
        public void PostFleetsFleetIdWingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostFleetsFleetIdWings(fleetId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<FleetsFleetIdWingsPost>(response);
        }

        /// <summary>
        /// Test PostFleetsFleetIdWingsWingIdSquads
        /// </summary>
        [Fact]
        public void PostFleetsFleetIdWingsWingIdSquadsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long wingId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostFleetsFleetIdWingsWingIdSquads(fleetId, wingId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<FleetsFleetIdWingsWingIdSquadsPost>(response);
        }

        /// <summary>
        /// Test PutFleetsFleetId
        /// </summary>
        [Fact]
        public void PutFleetsFleetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //DateOnly xCompatibilityDate = null;
            //PutFleetsFleetIdRequest putFleetsFleetIdRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PutFleetsFleetId(fleetId, xCompatibilityDate, putFleetsFleetIdRequest, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test PutFleetsFleetIdMembersMemberId
        /// </summary>
        [Fact]
        public void PutFleetsFleetIdMembersMemberIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long memberId = null;
            //DateOnly xCompatibilityDate = null;
            //PutFleetsFleetIdMembersMemberIdRequest putFleetsFleetIdMembersMemberIdRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PutFleetsFleetIdMembersMemberId(fleetId, memberId, xCompatibilityDate, putFleetsFleetIdMembersMemberIdRequest, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test PutFleetsFleetIdSquadsSquadId
        /// </summary>
        [Fact]
        public void PutFleetsFleetIdSquadsSquadIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long squadId = null;
            //DateOnly xCompatibilityDate = null;
            //PutFleetsFleetIdSquadsSquadIdRequest putFleetsFleetIdSquadsSquadIdRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PutFleetsFleetIdSquadsSquadId(fleetId, squadId, xCompatibilityDate, putFleetsFleetIdSquadsSquadIdRequest, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test PutFleetsFleetIdWingsWingId
        /// </summary>
        [Fact]
        public void PutFleetsFleetIdWingsWingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long fleetId = null;
            //long wingId = null;
            //DateOnly xCompatibilityDate = null;
            //PutFleetsFleetIdSquadsSquadIdRequest putFleetsFleetIdSquadsSquadIdRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PutFleetsFleetIdWingsWingId(fleetId, wingId, xCompatibilityDate, putFleetsFleetIdSquadsSquadIdRequest, acceptLanguage, ifNoneMatch, xTenant);
        }
    }
}
