/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing CorporationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CorporationApiTests : IDisposable
    {
        private CorporationApi instance;

        public CorporationApiTests()
        {
            instance = new CorporationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CorporationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CorporationApi
            //Assert.IsType<CorporationApi>(instance);
        }

        /// <summary>
        /// Test GetCorporationsCorporationId
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationId(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CorporationsCorporationIdGet>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdAlliancehistory
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdAlliancehistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdAlliancehistory(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdAlliancehistoryGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdBlueprints
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdBlueprintsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdBlueprints(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdBlueprintsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdContainersLogs
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdContainersLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdContainersLogs(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdContainersLogsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdDivisions
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdDivisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdDivisions(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CorporationsCorporationIdDivisionsGet>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdFacilities
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdFacilitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdFacilities(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdFacilitiesGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdIcons
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdIconsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdIcons(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CorporationsCorporationIdIconsGet>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdMedals
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdMedalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdMedals(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdMedalsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdMedalsIssued
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdMedalsIssuedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdMedalsIssued(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdMedalsIssuedGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdMembers
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdMembers(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdMembersLimit
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdMembersLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdMembersLimit(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<long>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdMembersTitles
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdMembersTitlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdMembersTitles(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdMembersTitlesGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdMembertracking
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdMembertrackingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdMembertracking(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdMembertrackingGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdRoles
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdRoles(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdRolesGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdRolesHistory
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdRolesHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdRolesHistory(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdRolesHistoryGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdShareholders
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdShareholdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdShareholders(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdShareholdersGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdStandings
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdStandingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdStandings(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdStandingsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdStarbases
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdStarbasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdStarbases(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdStarbasesGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdStarbasesStarbaseId
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdStarbasesStarbaseIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //long starbaseId = null;
            //long systemId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdStarbasesStarbaseId(corporationId, starbaseId, systemId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CorporationsCorporationIdStarbasesStarbaseIdGet>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdStructures
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdStructuresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdStructures(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdStructuresGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdTitles
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdTitlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdTitles(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdTitlesGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsNpccorps
        /// </summary>
        [Fact]
        public void GetCorporationsNpccorpsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsNpccorps(xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }
    }
}
