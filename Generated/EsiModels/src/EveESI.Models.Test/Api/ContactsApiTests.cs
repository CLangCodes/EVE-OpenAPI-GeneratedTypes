/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing ContactsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContactsApiTests : IDisposable
    {
        private ContactsApi instance;

        public ContactsApiTests()
        {
            instance = new ContactsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContactsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ContactsApi
            //Assert.IsType<ContactsApi>(instance);
        }

        /// <summary>
        /// Test DeleteCharactersCharacterIdContacts
        /// </summary>
        [Fact]
        public void DeleteCharactersCharacterIdContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //List<long> contactIds = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.DeleteCharactersCharacterIdContacts(characterId, contactIds, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test GetAlliancesAllianceIdContacts
        /// </summary>
        [Fact]
        public void GetAlliancesAllianceIdContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long allianceId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetAlliancesAllianceIdContacts(allianceId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<AlliancesAllianceIdContactsGetInner>>(response);
        }

        /// <summary>
        /// Test GetAlliancesAllianceIdContactsLabels
        /// </summary>
        [Fact]
        public void GetAlliancesAllianceIdContactsLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long allianceId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetAlliancesAllianceIdContactsLabels(allianceId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<AlliancesAllianceIdContactsLabelsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdContacts
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdContacts(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdContactsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdContactsLabels
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdContactsLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdContactsLabels(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<AlliancesAllianceIdContactsLabelsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdContacts
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdContacts(corporationId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CorporationsCorporationIdContactsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCorporationsCorporationIdContactsLabels
        /// </summary>
        [Fact]
        public void GetCorporationsCorporationIdContactsLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long corporationId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCorporationsCorporationIdContactsLabels(corporationId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<AlliancesAllianceIdContactsLabelsGetInner>>(response);
        }

        /// <summary>
        /// Test PostCharactersCharacterIdContacts
        /// </summary>
        [Fact]
        public void PostCharactersCharacterIdContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //double standing = null;
            //DateOnly xCompatibilityDate = null;
            //List<long> requestBody = null;
            //List<long>? labelIds = null;
            //bool? watched = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostCharactersCharacterIdContacts(characterId, standing, xCompatibilityDate, requestBody, labelIds, watched, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<long>>(response);
        }

        /// <summary>
        /// Test PutCharactersCharacterIdContacts
        /// </summary>
        [Fact]
        public void PutCharactersCharacterIdContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //double standing = null;
            //DateOnly xCompatibilityDate = null;
            //List<long> requestBody = null;
            //List<long>? labelIds = null;
            //bool? watched = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PutCharactersCharacterIdContacts(characterId, standing, xCompatibilityDate, requestBody, labelIds, watched, acceptLanguage, ifNoneMatch, xTenant);
        }
    }
}
