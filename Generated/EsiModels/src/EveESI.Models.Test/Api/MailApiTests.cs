/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing MailApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MailApiTests : IDisposable
    {
        private MailApi instance;

        public MailApiTests()
        {
            instance = new MailApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MailApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MailApi
            //Assert.IsType<MailApi>(instance);
        }

        /// <summary>
        /// Test DeleteCharactersCharacterIdMailLabelsLabelId
        /// </summary>
        [Fact]
        public void DeleteCharactersCharacterIdMailLabelsLabelIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //long labelId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.DeleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test DeleteCharactersCharacterIdMailMailId
        /// </summary>
        [Fact]
        public void DeleteCharactersCharacterIdMailMailIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //long mailId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.DeleteCharactersCharacterIdMailMailId(characterId, mailId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdMail
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdMailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //List<long>? labels = null;
            //long? lastMailId = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdMail(characterId, xCompatibilityDate, labels, lastMailId, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdMailGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdMailLabels
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdMailLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdMailLabels(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdMailLabelsGet>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdMailLists
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdMailListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdMailLists(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdMailListsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdMailMailId
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdMailMailIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //long mailId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdMailMailId(characterId, mailId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdMailMailIdGet>(response);
        }

        /// <summary>
        /// Test PostCharactersCharacterIdMail
        /// </summary>
        [Fact]
        public void PostCharactersCharacterIdMailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //PostCharactersCharacterIdMailRequest postCharactersCharacterIdMailRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostCharactersCharacterIdMail(characterId, xCompatibilityDate, postCharactersCharacterIdMailRequest, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<long>(response);
        }

        /// <summary>
        /// Test PostCharactersCharacterIdMailLabels
        /// </summary>
        [Fact]
        public void PostCharactersCharacterIdMailLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //PostCharactersCharacterIdMailLabelsRequest postCharactersCharacterIdMailLabelsRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostCharactersCharacterIdMailLabels(characterId, xCompatibilityDate, postCharactersCharacterIdMailLabelsRequest, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<long>(response);
        }

        /// <summary>
        /// Test PutCharactersCharacterIdMailMailId
        /// </summary>
        [Fact]
        public void PutCharactersCharacterIdMailMailIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //long mailId = null;
            //DateOnly xCompatibilityDate = null;
            //PutCharactersCharacterIdMailMailIdRequest putCharactersCharacterIdMailMailIdRequest = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //instance.PutCharactersCharacterIdMailMailId(characterId, mailId, xCompatibilityDate, putCharactersCharacterIdMailMailIdRequest, acceptLanguage, ifNoneMatch, xTenant);
        }
    }
}
