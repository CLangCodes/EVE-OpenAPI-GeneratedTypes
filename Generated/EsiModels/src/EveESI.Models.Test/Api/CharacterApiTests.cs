/*
 * EVE Stable Infrastructure (ESI) - tranquility
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2025-08-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EveESI.Models.Client;
using EveESI.Models.Api;
// uncomment below to import models
//using EveESI.Models.Model;

namespace EveESI.Models.Test.Api
{
    /// <summary>
    ///  Class for testing CharacterApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CharacterApiTests : IDisposable
    {
        private CharacterApi instance;

        public CharacterApiTests()
        {
            instance = new CharacterApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CharacterApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CharacterApi
            //Assert.IsType<CharacterApi>(instance);
        }

        /// <summary>
        /// Test GetCharactersCharacterId
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterId(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdGet>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdAgentsResearch
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdAgentsResearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdAgentsResearch(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdAgentsResearchGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdBlueprints
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdBlueprintsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //int? page = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdBlueprints(characterId, xCompatibilityDate, page, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdBlueprintsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdCorporationhistory
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdCorporationhistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdCorporationhistory(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdCorporationhistoryGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdFatigue
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdFatigueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdFatigue(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdFatigueGet>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdMedals
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdMedalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdMedals(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdMedalsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdNotifications
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdNotifications(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdNotificationsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdNotificationsContacts
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdNotificationsContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdNotificationsContacts(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdNotificationsContactsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdPortrait
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdPortraitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdPortrait(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdPortraitGet>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdRoles
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdRoles(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<CharactersCharacterIdRolesGet>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdStandings
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdStandingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdStandings(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdStandingsGetInner>>(response);
        }

        /// <summary>
        /// Test GetCharactersCharacterIdTitles
        /// </summary>
        [Fact]
        public void GetCharactersCharacterIdTitlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.GetCharactersCharacterIdTitles(characterId, xCompatibilityDate, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersCharacterIdTitlesGetInner>>(response);
        }

        /// <summary>
        /// Test PostCharactersAffiliation
        /// </summary>
        [Fact]
        public void PostCharactersAffiliationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly xCompatibilityDate = null;
            //List<long> requestBody = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostCharactersAffiliation(xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<List<CharactersAffiliationPostInner>>(response);
        }

        /// <summary>
        /// Test PostCharactersCharacterIdCspa
        /// </summary>
        [Fact]
        public void PostCharactersCharacterIdCspaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long characterId = null;
            //DateOnly xCompatibilityDate = null;
            //List<long> requestBody = null;
            //string? acceptLanguage = null;
            //string? ifNoneMatch = null;
            //string? xTenant = null;
            //var response = instance.PostCharactersCharacterIdCspa(characterId, xCompatibilityDate, requestBody, acceptLanguage, ifNoneMatch, xTenant);
            //Assert.IsType<double>(response);
        }
    }
}
